%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Warm, fire, fireplace, comfort, Christmas, girl, rest, loneliness-temp_01.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Антон
%%CreationDate: 11/19/2021
%%BoundingBox: 0 0 1302 1180
%%HiResBoundingBox: 0 0 1301.4620 1179.7969
%%CropBox: 0 0 1301.4620 1179.7969
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 116 8%%BeginData: 18931 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD53FFA8FFA8FFA8FD78FFA8AFA8AFA8FFA8A9A8AFA8FD74FFA8FF
%A9FFAFAFA8FFAFFFA8FFA9FD72FFA8FFA8FFA8FF8484A8FFA8FFA8A9A8FD
%70FFA8FFFFFFA9FF84AEAFAFAFFFA9FFA9FD70FFA8A9A8FFA9FFA8BC84AF
%84AFA9FFA8FFA8A9FD6FFFA9FFA9FFAFA87D8484A184FFAFFFA9FFA8FD6E
%FFA8FFA8FFA8FF8484597D9A84A8FFA8FFA8AFA8FD6CFFA9FFFFFFA9FFA9
%84A88A848484AFFFFFA9FFA9FD6EFFA8FFA9FFA88484FF8484AF845FFFA9
%FFA8FFA8FD6EFFA9FFAFAFFD0584AF8484A8FFAFFFA8FD6EFFA8FFA8FFA8
%848484938459845FA9A8FFA8A9A8FD6EFFA9FFFFAF84FFFD04849A8484FF
%FFFFA8FD6EFFA8FFA8FFA1FD0484A85F84A8AFA8FFA8A9FD6FFFA8FFA8FD
%0484AFFFAE848A84A8A9FD72FFA8AF84A8848459845F8484A9A8A9A8FD72
%FFA8CBC4C4A1A19AC4A1CACAFFA8FD73FFC393BC93BC93BC93BC93BC9AFD
%73FFC3B6BC93BCB6BC93BCB6BC93BCBCFD71FFCA93BC93BC93BC93BC93BC
%93BC93BCC3FD70FF9ABC93BC93BC93BC93BC93BC93BC93BCFD56FFA8A884
%597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D5393939493939394
%939393949393939493522E5252522E5252522E5252522E5252522E525252
%2E5252522E525228052727270527FD33FF7DFD35FFFD10A827597D7E7D7D
%27FD33FF7DFD45FF2E53FFA8FF7E27FD33FF7DFD45FF277DA9FFFFA827FD
%33FF7DFD45FF2E7EFFA8FFA927FD33FF7DFD45FF27A8AFFFA9FF27FD33FF
%7DFD45FF2E7DFFA8FFA827FD33FF7DFD45FF2EA9FFFFA9FF27FD33FF7DFD
%06A8597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D
%597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D7D7D597D
%7D7D537D522EFD057D27FD33FFFD137DFD30522E287D527D537D285353FD
%36FFA8FD0FFF7DFD09FFA8FD25FF5259A8FFA8FFA852FD38FFA8FD0EFFA8
%7DFD09FFA8FD25FF5352FFFFFFA9FF52FD38FFA8FD0EFFA852FD09FF59FD
%25FF5259A8FFA9FFA852FD38FFA8FD0EFFA852FD09FF7DFD25FF5353FFA9
%FFAFFF52FD38FF84FD04FFA87D7D597D5227272E2728272E272827277D7D
%597D7DFD11FF84A8A8A852522E522852275228522E5228522E7D277DA8FF
%A8FFA852FD38FFA8FD09FF7DA8FD09FF52FD20FF52FD09FF5253FFA9FFFF
%FF52FD38FFA8FD09FF52A8FD09FF53FD20FF52FD09FF277DA9FFA8FFA952
%FD38FFA8FD09FF7DA8FD09FFA8FD20FF52FD09FF5252FFAFFFA9FF52FD38
%FFA8FD09FF52A8FD09FFA8FD20FF28FD09FF2752A8FFA8FFA852FD38FF7D
%7D7D5252275228525252275252535253527D537D527D53525253A8FD09FF
%A8A8FD097D84FD057D52FD047D52527D7DA85252FFFFFFA9FF52FD38FFA8
%FD04FF7DFD0AFFA8FD09FF59FD15FF7DFD0AFF52FD04FF2752A8FFA9FFA8
%52FD38FFA8FD04FF7DFD0AFFA8FD09FF7DFD15FF7DFD0AFF27FD04FF5252
%FFA9FFAFFF52FD38FF84FD04FF7DFD0AFF84FD09FF7DFD15FF52FD0AFF28
%FD04FF2752A8FFA8FFA852FD1BFFA8A9A8FD19FFA8A8FD04FF7DFD0AFFA8
%FD09FFA8FD15FF53FD0AFF2EFD04FF5252FFA9FFFFFF52FD19FFA9547E54
%7E547E7EFD16FFA8A8FD04FFA8FD0AFFA8FD15FFA8A8A87D7D7D527D5259
%277E5259527D537D7DA8A8527D7EA8FF2752A9FFA8FFA952FD18FFA9547E
%5A7E547E5A7E7EFD15FFA8A8FD26FFFD04A8597E7DA87DA87D7D527D527D
%FD05A8FD04FF5228FFAFFFA9FF52FD12FFA8CAA1A7A1A8545A537EA1A17D
%7E545A7DCAA8FD12FFA8A8FD2AFFA8FD09FFA859FD09FF2752A8FFA8FFA8
%52FD0FFFA8A176A076A076A0777E5A7EC3C9C3C9C3CA5A7EA0A1A0A1A7FD
%0FFFA8A8FD2AFFA8FD09FFA8A8FD09FF2E28FFFFFFA9FF52FD0DFFA8769A
%7576759A7576767E547EA1C9C3C3A1C9C3A154A1A0A09AA1A0A8FD0DFFA8
%A8FD2AFFA8FD09FFA8A8FD09FF2752A8FFA9FFA852FD0BFFCAA1769A76A0
%769A76A09AA1547E5AA2A07C76C9A0A1A17EA0A1A0A1A0A1A0A1CAFD0BFF
%A8A8FD08FF597D527D527D527D527D527D527D527D527D527DFD0E5228FD
%0C52FD08FF2E27FFA9FFAFFF52FD0AFFA89A759A7576759A757676A1537E
%7D7EA1C376C9A1C3767D54A19AA19AA09AA19AA0A8FD0AFFA884FD07FF7D
%272728272E27282728FD262728FD07FF272EA8FFA8FFA852FD09FFCAA076
%A076A076A076A09AC37D7EA1C3A1C9C37DC352A07D7E7E7DC3A0A1A0C3A0
%A1A0A1CAFD09FFA8A8FD07FFA827FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF
%FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF27
%53FD07FF2E27FFA9FFFFFF52FD08FFA8A07576759A7576759A76A09A7E54
%7EA0C9C3C3A1C976A1A1A254A19AA1A0A09AA1A0A09AA1A8FD08FFA859FD
%07FF7D28A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF
%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA92752FD07FF272EA9FFA8FF
%A952FD08FFA176A0769A76A0769A76A1A0A1547E5A7EC3C9C3C9A17676C9
%7D7E7DA1A0A1A0A1A0A1A0A1A0A1FD08FFA87DFD07FFA827FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FF277DFD07FF2727FFAFFFA9FF52FD07FFA87576759A
%7576759A75A09AA1775A537E54A1A1C9A0C3A0C9A17E537D9AA09AA19AA0
%9AA19AA09AA1FD07FFA87DFD07FFA827A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A82752FD07FF2728A8FFA8FFA82EFD07FF76A076A076A076A076A0A0C3A1
%7E5A7E5A7E7DC9C3A1272E76C95A7E7DA1A0C3A0A1A0C3A0A1A0C3A0FD07
%FFA87DFD07FFA827FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF
%FFC9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FF277DFD07FF2827
%FFFFFFA9FF27FD06FFA19A7576759A7576759A76A09A7E547E547E54A2A0
%C9C3C3A1C97D7E547EA0A09AA1A0A09AA1A0A09AA1A1FD06FFA87DFD07FF
%A827A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFC8C8A6FFA9FF
%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA82752FD07FF2728A8FFA9FFA828
%FD06FFA076A0769A76A0769A76A1A0A1777E5A7E547EA1C3A0C3C3C97D7E
%5A7E7DA1A0A1A0A1A0A1A0A1A0A1A0A1FD06FFA87DFD07FFA827FFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA7CDC8C8A7FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFF277DFD07FF2827FFA9FFAFFF27FD06FF757675
%9A7576759A757676A19AA1537E545A53A6A0C3A0A1545A537E53A09AA19A
%A1A1A19AA09AA19AA09ACFFD05FFA859FD07FF8427A8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8C8A5C8C7C9A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA82752FD07FF052EA8FFA8FFA827FD05FFA8A076A076A076A0
%76A076C3A0A1A07E5A7E5AA19FC89FC8A07E5A7E5A7EA0C3A0A1A8CAA0A1
%A0C3A0A1A0C3A1FD05FFA87DFD07FFA827FFA9FFFFFFA9FFFFFFA9FFFFFF
%A9FFFFFFA9FFFFCEC8CDC8C8C9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FF
%FFFF277DFD07FF2E27FFA9FFFFFF27FD05FFA87576759A7576759A75769A
%A1A07E53A77D7D9FC89FA59FC87D7E547E77A09AA1A8CAA0A1A0A09AA1A0
%A09AA1FD05FFA859FD07FFA828A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9
%FFA8FFA7C8A5C8C8CFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA92752
%FD07FF272EA9FFA8FFA927FD05FFA1A0769A76A0769A76A076A1A0A19FC8
%C8CDC8C89FC89FC89FA15A7E547EA0A1A8CFCACAA0A1A0A1A0A1A0A1A0FD
%05FFA87DFD07FFA827FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFCAFFA9FF
%C9C8C8FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF277DFD07FF27
%27FFAFFFA9FF27FD05FFA1759A7576759A7576759A9AA09FC79FC8A5C8C7
%C89FC79FA57D7E545A53A1A1FFA8A79AA09AA19AA09AA19AA0FD05FFA87D
%FD07FFA827A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA6FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA82752FD07FF2728A8FFA8
%FFA827FD05FFA1A076A076A076A076A076A1A0C89FC8A7CDC8C8C8CDC8C8
%C87E5A7E5A7EA0A1CAFFA7A1A0C3A0A1A0C3A07D598484FFFFFFA87DFD07
%FFA827FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFC9CDCAFFA9FFFFFFA9FFFFFF
%A9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FF277DFD07FF2727FFFFFFA9FF
%27FD05FFA7759A7576759A7576759AA0A09FC89FC8A6C8C8C8A5C8C8A654
%7E547DA6C8A0A1A8FFA0A09AA1A0A0765935593559355959847DFD07FFA8
%27A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9C8A5CFA9FFA8FFA9FFA8FFA9FFA8
%FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8287DFD07FF2728A8FFA9FFA828FD
%05FFA19A76A0769A76A0769A76A19FC89FC89FCFC8CDC8C8C8CDA67E547E
%A1C8C8A1A0CAA1A1A0A1A0A1A059355F355F355F355F355F84AFFD05FFA8
%27FFA9FFAFFFA9FFAFFFA9FFAFFFA9CFC8C8C8FFAFFFA9FFAFFFA7FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF27A8FD07FF2827FFA9FFAFFF27FD
%05FFCA7576759A7576759A757676C79FA59FC79FCFA6C8C7C8A5C8A07D53
%A7C7C2FD05939A9AA07659353535593535355935353559355959AEA8FF84
%27A8FFA8FFA8FFA8FFA8FFA8FFA8FFA7C8C7C8A6FFA8FFA8FFA6C8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8277DFD07FF052EA8FFA8FFA827FD
%05FFCAA076A076A076A076A076A19FC89FC89FC89FCFC8C8C8CDFD04C8A6
%C8C1BC93B693BC94C3A083355F355F355F355F355F355F355F355F355934
%592E607DA8A8FFA9FFFFFFA9FFFFFFA9CFC8C8C8CDC9CFA8CFC8C8C8CDCA
%FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF27A8FD07FF2827FFA9FFFFFF27
%FD06FF7576759A7576759A757675C89FA59FC89FA5A6CEC8C8A5C8C8C8A5
%C8C2C3A1C9C39A93C2C35935593559355935593584355935593559355935
%5934352E352E352E35358484A8A8FFA9FFA8C8C8C8A5C8C8C8A5C8C8C8A5
%C8A8FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9277DFD07FF052EA9FFA8FFA9
%27FD06FFA0769A76A0769A76A076A09FC89FC89FC89FC8C9CDC8C8C8CDC8
%C8C9C9C3C9C3C993BCC3A7355F355F355F355F6060845F355F355F355F35
%5F355F355F35353459343534593435598484AEC8CDC8C8C8CDC8C8C1CDC8
%C8C8CDCAFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF277EFD07FF2727FFAFFFA9
%FF27FD06FF759A7576759A7576759A75A59FC79FA59FC79FCFA5C8C7C8A6
%CFA7C8A0C9A1C3A0939AA135593535355935353584846035593535355935
%3535593535355935352E352E352E352E352E352E3475C299C299BC93BCA5
%C8C7C8A5C8A7FFA8FFA8FFA8FFA8FFA8FFA8FFA8277DFD07FF2728A8FFA8
%FFA827FD06FFA176A076A076A076A076A09FC89FC89FC89FC8CFCDC8CDCA
%FFA6C89FC8C3C9C3BC93C3355F355F355F355F355F84FF355F355F355F35
%5F355F355F355F355F355F3559345934593459345934A0BCBCB6BCBCBCC2
%CDC8C8C8CDC8C8C9FFFFFFA9FFFFFFA9FFFFFFA9FF2784FD07FF2727FFFF
%FFA9FF27FD06FF769A7576759A7576759A75A59FC89FA59FC89FCFA5CEFF
%C99FC89FA59FC9A09993BB58593559355935593559355959353559355935
%5935593559355935593559355935352E352E352E352E3593BC93BC93BCC1
%C8A5C8C8C8A5C8C8C8A6FFA9FFA8FFA9FFA8FFA9FFA8287DFD07FF2728A8
%FFA9FFA827FD06FFA776A0769A76A0769A76A09FC89FC89FC89FC8C9CFCA
%C89FC89FC89FC8C8C89FC8585F355F355F355F355F355F35593435345935
%5F355F355F355F355F355F355F355F599A767C769A93BC52BC93BCB6BCC8
%C8C2C8C8CDC8C8C8CDC8C8C8FFAFFFA9FFAFFFA9FFAFFF27A8FD07FF2827
%FFA9FFAFFF27FD06FFA176759A7576759A757675A69FA59FC79FA59FC9A6
%A59FC79FA59FC79FC89FA67B353559353535593535355935352E352E352E
%352E352E5935353559345934593535357693BC93BC93BC93A899BC93C2C7
%C89FC89FC8A5C8C7C8A5C8C7C8A7FFA8FFA8FFA8FFA8FFA8277DFD07FF05
%2EA8FFA8FFA827FD06FFA176A076A076A076A076A076A076A076A076A076
%A076A076A076A09AA09AA19AA0525F355F355F355F355F355F345934592E
%7D5258527D525876A09AA09AA0767D355F9ABCB6BCBCBCA1FFFFCEC2FD05
%C8C2C8C8CDC8C8C8CDC8C8C8CDFFFFA9FFFFFFA9FFFFFF27A8FD07FF2827
%FFA9FFFFFF27FD04FFA7A07576759A7576759A7576759A7576759A757675
%9A7576759A769A9AA1A0A09AA19A9A7559355935593559355935352E352E
%76759A7576759A76A09AA1A0A09AA1767676BC93BC93C3A8FFA8FFC8C8A5
%C8C8C8A5C8C1C8A5C8C8C8A5C8C8C8A5CFA9FFA8FFA9FFA8FFA9277DFD07
%FF052EA9FFA8FFA927FFFFFFA89A76A0769A76A0769A76A0769A76A0769A
%76A0769A76A0769A76A1A0A1A0A1A0A1A0A1A0A07659355F355F355F3559
%34352E7C769A76A0769A9AA1A0A1A0A1A0A1A0A19AA09ABCBCC9A8FFAFFF
%A8CDC8C8C8CDC8C8C1C8C2C8C8CDC8C8C8CDC8C8C8FFAFFFA9FFAFFFA9FF
%277EFD07FF2727FFAFFFA9FF27FFFFA89A7576759A7576759A7576759A75
%76759A7576759A7576759A75A09AA19AA09AA19AA09AA19A9A7559353535
%5935352E352E76759A7576759A76A09AA19AA09AA19AA09AA1769AA8FFA6
%C8A7FFA7C8A5C8C7C8A5C8C7C89FC89FC89FC8C7C8A5C8C7C8A8FFA8FFA8
%FFA8FFA8277DFD07FF2728A8FFA8FFA827FFFFA776A076A076A076A076A0
%76A076A076A076A076A076A076A076A0A0C3A0A1A0C3A0A1A0C3A0A1A0A0
%595F355F355F3559347C76A076A076A076A1A0C3A0A1A0C3A0A1A0C3A0A1
%76CAFFCEC8CDC8C8C8CDC8C8C8CDFD04C8C2C8C2FD04C8CDC8C8C8FFFFFF
%A9FFFFFFA9FF2784FD07FF2727FFFFFFA9FF27FFFF769A7576759A757675
%9A7576759A7576759A7576759A7576759A76A09AA1A0A09AA1A0A09AA1A0
%A0767D3559355935352E7C7576759A7576759AA0A09AA1A0A09AA1A0A09A
%A1A09A7CFFC8C8A5C8C8C8A5C8C1C8A5C8C8C89FC8C1C89FC8C8C8A5C8C8
%C8A8FFA9FFA8FFA9FFA8287DFD07FF2728A8FFA9FFA827FFFF9A76A0769A
%76A0769A76A0769A76A0769A76A0769A76A0769A76A0A0A1A0A1A0A1A0A1
%A0A1A0A1A0A0765F355F3559347C76A0769A76A0769A76A1A0A1A0A1A0A1
%A0A1A0A1A0A19AA1A9CEC8C8C8CDC8C8C1FD04C8CDC8C8C1C8C2C8C8CDC8
%C8C8CDC8FFA9FFAFFFA9FFAFFF27A8FD07FF2827FFA9FFAFFF27FFFF7576
%759A7576759A7576759A7576759A7576759A7576759A757676A19AA09AA1
%9AA09AA19AA09AA17676355935352E7C7576759A7576759A759A9AA19AA0
%9AA19AA09AA19AA09AA076FFA7C8C7C8A5C8C7C89FC8C7C8A5C89FC89FC8
%C1C8A5C8C7C8A5C9A8FFA8FFA8FFA8FFA82884FD07FF052EA8FFA8FFA827
%FFFFA076A076A076A076A076A076A076A076A076A076A076A076A076A1A0
%A1A0C3A0A1A0C3A0A1A0C3A0A0765F355F347DA0A076A076A076A076A09A
%C3A0A1A0C3A0A1A0C3A0A1A0C3A0A0A9CFC8C8C8CDC8C8C2C8C2C8C8C8C2
%C8C2FD04C8CDC8C8C8CDC9FFA9FFFFFFA9FFFFFF27A8FD07FF2827FFA9FF
%FFFF27FFFF7676759A7576759A7576759A7576759A7576759A7576759A75
%7676A1A0A09AA1A0A09AA1A0A09AA17676355935599AA07576759A757675
%9A759A9AA1A0A09AA1A0A09AA1A0A09AA076FFA8C8C8C8A5C8C8C89FC8C1
%C89FC8C1C89FC8C8C89FC8C8C8A5FFA9FFA8FFA9FFA8FFA952A8FD07FF05
%2EA9FFA8FFA927FFFFA1769A76A0769A76A0769A76A0769A76A0769A76A0
%769A76A076A0A0A1A0A1A0A1A0A1A0A1A0A1A0A1765F357DA0A19AA0769A
%76A0769A76A076A1A0A1A0A1A0A1A0A1A0A1A0A19AA1AFFFC8CDFD06C8C1
%C8C2C8C1C8C2C8C1C8C2C8C1CDC8CEA9FFAFFFA9FFAFFFA9FF52FD08FF27
%27FFAFFFA9FF27FFFFA09A7576759A7576759A7576759A7576759A757675
%9A7576759A76A09AA19AA09AA19AA09AA19AA0767C35599AA19AA076A09A
%A0759A7576759A9AA09AA19AA09AA19AA09AA19AA076FFA8CFA5C8C7C89F
%C89FC89FC89FC89FC89FC89FC89FC8A5C8A8FFA8FFA8FFA8FFA8FFA852FD
%08FF2728A8FFA8FFA827FFFFCA76A076A076A076A076A076A076A076A076
%A076A076A076A076A0A0C3A0A1A0C3A0A1A0C3A0A1A0A1767DA0C3A0A1A0
%C3A0A1A0C3A0A076A09AA1A0C3A0A1A0C3A0A1A0C3A0A19AA1FFFFA9CFFD
%04C8C2C8C2C8C2C8C2C8C2C8C2C8C2C8C8CDCAFFA9FFFFFFA9FFFFFFA9FF
%52FD08FF2727FFFFFFA9FF27FFFFA89A7576759A7576759A7576759A7576
%759A7576759A7576759A76A09AA1A0A09AA1A0A09AA1A0A0767CA0A09AA1
%A0A09AA1A0A09AA1A0A075A0A0A09AA1A0A09AA1A0A09AA1A0A076FFA9FF
%A8CFC8C89F5251527B7C515275A0515251A0C1C9A8FFA9FFA8FFA9FFA8FF
%A9FFA852FD08FF2728A8FFA9FFA827FFFFCF76A0769A76A0769A76A0769A
%76A0769A76A0769A76A0769A76A0A0A1A0A1A0A1A0A1A0A1A0A1A0A076A1
%A0A1A0A1A0A1A0A1A0A1A0A1A0A076A1A0A1A0A1A0A1A0A1A0A1A0A1A0A0
%A9FFAFFFA9FFA7522752272E2752272E2752272E27A7AFFFA9FFAFFFA9FF
%AFFFA9FFAFFF2EFD08FF2827FFA9FFAFFF27FFFFFF76759A7576759A7576
%759A7576759A7576759A7576759A757676A19AA09AA19AA09AA19AA09AA1
%9A9A9AA19AA09AA19AA09AA19AA09AA19A9A9AA19AA09AA19AA09AA19AA0
%9AA076FFA8FFA8FFA87D2728272E2728272E2728272E272852FFA8FFA8FF
%A8FFA8FFA8FFA8FFA852FD08FF052EA8FFA8FFA827FFFFFF76A076A076A0
%76A076A076A076A076A076A076A076A076A076A1A0A1A0C3A0A1A0C3A0A1
%A0C3A0A176C3A0A1A0C3A0A1A0C3A0A1A0C3A0A19AC3A0A1A0C3A0A1A0C3
%A0A1A0C3A0A1A9FFFFFFA9FF7D2E2752272E2752272E2752272E2759FFFF
%A9FFFFFFA9FFFFFFA9FFFFFF52FD08FF2827FFA9FFFFFF27FFFFFFA1759A
%7576759A7576759A7576759A7576759A7576759A757676A1A0A09AA1A0A0
%9AA1A0A09AA19A9A9AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1
%A0A09AA1A0A09AA076FFA8FFA9FFA8842728272E2728272E2728272E2728
%7DFFA9FFA8FFA9FFA8FFA9FFA8FFA952FD08FF052EA9FFA8FFA927FFFFFF
%A19A76A0769A76A0769A76A0769A76A0769A76A0769A76A076A0A0A1A0A1
%A0A1A0A1A0A1A0A1A0A19AA1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1
%A0A1A0A1A0A1A0A1A0A19AA05259527D52595252272827522728272E2828
%272E2859527D5259527D5259527D5259525327FD085227275252522E5227
%FFFFFFA87576759A7576759A7576759A7576759A7576759A7576759A76A0
%9AA19AA09AA19AA09AA19AA076A09AA09AA19AA09AA19AA09AA19AA09AA1
%9AA09AA19AA09AA19AA09AA19AA0757D5259527D5259FD0552595252527D
%5252527D5259527D5259527D5259527D525952537D5228522E5228522752
%28522E522852FFFFFFA8A076A076A076A076A076A076A076A076A076A076
%A076A076A0A0C3A0A1A0C3A0A1A0C3A0A1A0A19AA1A0C3A0A1A0C3A0A1A0
%C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0A1FD38FFCF7576759A75
%76759A7576759A7576759A7576759A7576759A76A09AA1A0A09AA1A0A09A
%A1A0A076A0A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0
%A09AA1A0A076FD39FFA0769A76A0769A76A0769A76A0769A76A0769A76A0
%769A76A0A0A1A0A1A0A1A0A1A0A1A0A1A0A076A1A0A1A0A1A0A1A0A1A0A1
%A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1FD39FF759A7576759A75
%76759A7576759A7576759A7576759A757676A19AA09AA19AA09AA19AA09A
%A19A9A9AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19A
%A09AA1A0FD39FFA176A076A076A076A076A076A076A076A076A076A076A0
%76A1A0A1A0C3A0A1A0C3A0A1A0C3A0A176C3A0A1A0C3A0A1A0C3A0A1A0C3
%A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1FD39FFA19A7576759A757675
%9A7576759A7576759A7576759A757676A1A0A09AA1A0A09AA1A0A09AA19A
%9A9AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09A
%A1A0FD39FFA876A0769A76A0769A76A0769A76A0769A76A0769A76A076A0
%A0A1A0A1A0A1A0A1A0A1A0A1A0A19AA1A0A1A0A1A0A1A0A1A0A1A0A1A0A1
%A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1FD39FFA876759A7576759A757675
%9A7576759A7576759A7576759A76A09AA19AA09AA19AA09AA19AA076A09A
%A09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA07C
%FD3AFF76A076A076A076A076A076A076A076A076A076A076A076A0A0C3A0
%A1A0C3A0A1A0C3A0A1A0A19AA1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0
%C3A0A1A0C3A0A1A0C3A0A1A0A1FD3AFF9A759A7576759A7576759A757675
%9A7576759A7576759A76A09AA1A0A09AA1A0A09AA1A0A09AA0A0A09AA1A0
%A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A0A0FD3AFFA1
%9A76A0769A76A0769A76A0769A76A0769A76A0769A76A0A0A1A0A1A0A1A0
%A1A0A1A0A1A0A19AA1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0
%A1A0A1A0A1A0A1A0A1FD3AFFCA7576759A7576759A7576759A7576759A75
%76759A757676A19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09A
%A19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA1A0FD3BFFA176A076A0
%76A076A076A076A076A076A076A076A076A1A0A1A0C3A0A1A0C3A0A1A0C3
%A0A19AC3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1
%A0C3A0A1FD3BFFCA76759A7576759A7576759A7576759A7576759A757676
%A1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A0
%A09AA1A0A09AA1A0A09AA1A0A09AA1A1FD3CFFA79A76A0769A76A0769A76
%A0769A76A0769A76A076A0A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0
%A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0FD3EFFA1
%76759A7576759A7576759A7576759A7576759A75A09AA19AA09AA19AA09A
%A19AA09AA09AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA19A
%A09AA19AA1FD3FFFA1A076A076A076A076A076A076A076A076A076A09AC3
%A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1A0C3A0A1
%A0C3A0A1A0C3A0A1A0C3A0A1A8FD40FFA8A07576759A7576759A7576759A
%7576759A759A9AA1A0A09AA1A0A09AA1A0A09AA0A0A09AA1A0A09AA1A0A0
%9AA1A0A09AA1A0A09AA1A0A09AA1A0A09AA1A1FD43FFA7769A76A0769A76
%A0769A76A0769A76A0769A9AA1A0A1A0A1A0A1A0A1A0A19AA1A0A1A0A1A0
%A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A0A1A1FD46FFA7A1759A75
%76759A7576759A7576759A757675A09AA09AA19AA09AA19AA09AA19AA09A
%A19AA09AA19AA09AA19AA09AA19AA09AA19AA09AA7A8FD3AFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:title="fireplace"
   xmp:MetadataDate="2021-11-19T13:42:34+02:00"
   xmp:ModifyDate="2021-11-19T13:42:34+02:00"
   xmp:CreateDate="2021-11-19T13:42:34+02:00"
   xmp:CreatorTool="Adobe Illustrator CS6 (Windows)"
   xmpMM:InstanceID="xmp.iid:6DB123512D49EC1198C2DE3E16F552F4"
   xmpMM:DocumentID="xmp.did:6DB123512D49EC1198C2DE3E16F552F4"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">loneliness</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>Warm</rdf:li>
     <rdf:li>fire</rdf:li>
     <rdf:li>fireplace</rdf:li>
     <rdf:li>comfort</rdf:li>
     <rdf:li>Christmas</rdf:li>
     <rdf:li>girl</rdf:li>
     <rdf:li>rest</rdf:li>
     <rdf:li>loneliness</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="232"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhL/AFAW9EQc52+yvYe5yUY2glK5PrE1WuJSR/KDRRlgCEHZ&#xA;XFldvKtu7B4jStaVH8w9sLVjzRnddEyhv7q2IExM0Pc/tDImLdacRukiB0NVYVBypLeKuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVp2CqWPRQSfoxVIYy0jNcP&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:6CB123512D49EC1198C2DE3E16F552F4"
    stRef:documentID="xmp.did:6CB123512D49EC1198C2DE3E16F552F4"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:8b306741-4e6b-3542-aaf1-985c84228de3"
      stEvt:when="2021-11-19T09:17:52+02:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:6CB123512D49EC1198C2DE3E16F552F4"
      stEvt:when="2021-11-19T13:42:32+02:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:6DB123512D49EC1198C2DE3E16F552F4"
      stEvt:when="2021-11-19T13:42:34+02:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1500.000000"
    stDim:h="1500.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="Blue Grey 3"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="38"
         xmpG:green="49"
         xmpG:blue="56"/>
        <rdf:li
         xmpG:swatchName="Blue Grey 800 РєРѕРїРёСЏ"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="54"
         xmpG:green="70"
         xmpG:blue="79"/>
        <rdf:li
         xmpG:swatchName="Blue Grey 700"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="68"
         xmpG:green="89"
         xmpG:blue="100"/>
        <rdf:li
         xmpG:swatchName="ffffff РєРѕРїРёСЏ"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Indigo 50"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="232"
         xmpG:green="233"
         xmpG:blue="246"/>
        <rdf:li
         xmpG:swatchName="R=217 G=219 B=232 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="217"
         xmpG:green="219"
         xmpG:blue="232"/>
        <rdf:li
         xmpG:swatchName="R=193 G=196 B=214 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="193"
         xmpG:green="196"
         xmpG:blue="214"/>
        <rdf:li
         xmpG:swatchName="R=178 G=183 B=206 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="178"
         xmpG:green="183"
         xmpG:blue="206"/>
        <rdf:li
         xmpG:swatchName="R=181 G=191 B=234 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="181"
         xmpG:green="191"
         xmpG:blue="234"/>
        <rdf:li
         xmpG:swatchName="Indigo 200"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="158"
         xmpG:green="168"
         xmpG:blue="218"/>
        <rdf:li
         xmpG:swatchName="Indigo 300"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="121"
         xmpG:green="133"
         xmpG:blue="202"/>
        <rdf:li
         xmpG:swatchName="R=92 G=108 B=173 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="92"
         xmpG:green="108"
         xmpG:blue="173"/>
        <rdf:li
         xmpG:swatchName="Amber 200"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="223"
         xmpG:blue="130"/>
        <rdf:li
         xmpG:swatchName="Amber 300"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="212"
         xmpG:blue="79"/>
        <rdf:li
         xmpG:swatchName="R=244 G=198 B=69 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="244"
         xmpG:green="198"
         xmpG:blue="69"/>
        <rdf:li
         xmpG:swatchName="R=229 G=183 B=53 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="229"
         xmpG:green="183"
         xmpG:blue="53"/>
        <rdf:li
         xmpG:swatchName="R=185 G=239 B=232 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="185"
         xmpG:green="239"
         xmpG:blue="232"/>
        <rdf:li
         xmpG:swatchName="Teal 200"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="128"
         xmpG:green="202"
         xmpG:blue="195"/>
        <rdf:li
         xmpG:swatchName="R=56 G=193 B=176 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="56"
         xmpG:green="193"
         xmpG:blue="176"/>
        <rdf:li
         xmpG:swatchName="Teal 400"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="38"
         xmpG:green="165"
         xmpG:blue="154"/>
        <rdf:li
         xmpG:swatchName="R=27 G=140 B=126 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="27"
         xmpG:green="140"
         xmpG:blue="126"/>
        <rdf:li
         xmpG:swatchName="Red A100"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="137"
         xmpG:blue="128"/>
        <rdf:li
         xmpG:swatchName="Red A200"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="82"
         xmpG:blue="82"/>
        <rdf:li
         xmpG:swatchName="R=232 G=58 B=58 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="232"
         xmpG:green="58"
         xmpG:blue="58"/>
        <rdf:li
         xmpG:swatchName="R=214 G=145 B=118 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="214"
         xmpG:green="145"
         xmpG:blue="118"/>
        <rdf:li
         xmpG:swatchName="R=183 G=111 B=88 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="183"
         xmpG:green="111"
         xmpG:blue="88"/>
        <rdf:li
         xmpG:swatchName="R=158 G=87 B=68 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="158"
         xmpG:green="87"
         xmpG:blue="68"/>
        <rdf:li
         xmpG:swatchName="R=255 G=175 B=153 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="175"
         xmpG:blue="153"/>
        <rdf:li
         xmpG:swatchName="R=247 G=140 B=116 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="247"
         xmpG:green="140"
         xmpG:blue="116"/>
        <rdf:li
         xmpG:swatchName="R=255 G=217 B=171 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="217"
         xmpG:blue="171"/>
        <rdf:li
         xmpG:swatchName="Orange 300"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="255"
         xmpG:green="182"
         xmpG:blue="77"/>
        <rdf:li
         xmpG:swatchName="R=237 G=160 B=58 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="237"
         xmpG:green="160"
         xmpG:blue="58"/>
        <rdf:li
         xmpG:swatchName="R=249 G=173 B=115 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="249"
         xmpG:green="173"
         xmpG:blue="115"/>
        <rdf:li
         xmpG:swatchName="R=214 G=134 B=80 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="214"
         xmpG:green="134"
         xmpG:blue="80"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1179.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1179.8 li
1301.46 1179.8 li
1301.46 0 li
cp
clp
1115.94 965.883 mo
1115.94 520.124 li
643.474 520.124 li
643.474 965.883 li
1115.94 965.883 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.909804 .917647 .964706 rgb
f
1115.94 966.407 mo
643.474 968.553 li
642.005 968.561 640.809 967.375 640.803 965.906 cv
640.803 965.903 li
640.803 965.883 li
639.273 520.124 li
639.266 517.824 641.114 515.951 643.41 515.926 cv
643.474 515.924 li
673.002 515.595 li
702.531 515.379 li
761.59 514.949 li
879.705 514.607 li
938.763 514.55 li
997.82 514.578 li
1115.94 514.943 li
1115.98 514.943 li
1118.83 514.953 1121.13 517.266 1121.12 520.111 cv
1121.12 520.124 li
1120.49 631.564 li
1120.07 687.284 li
1119.52 743.004 li
1118.28 854.443 li
1117.43 910.163 li
1117.17 928.736 1116.83 947.311 1116.46 965.883 cv
1116.46 965.892 li
1116.46 966.178 1116.22 966.407 1115.94 966.407 cv
cp
1115.4 965.355 mo
1115.04 946.959 1114.7 928.561 1114.44 910.163 cv
1113.59 854.443 li
1112.35 743.004 li
1111.8 687.284 li
1111.38 631.564 li
1110.76 520.124 li
1115.94 525.305 li
997.82 525.67 li
938.763 525.699 li
879.705 525.641 li
761.59 525.299 li
702.531 524.869 li
673.002 524.653 li
643.474 524.324 li
647.674 520.124 li
646.145 965.883 li
643.474 963.213 li
1115.4 965.355 li
cp
.14902 .196078 .219608 rgb
f
895.715 933.326 mo
852.598 933.326 804.918 928.939 778.213 896.352 cv
759.793 873.869 753.015 839.528 757.972 794.035 cv
766.027 806.656 778.403 813.787 790.207 813.787 cv
804.471 813.787 818.856 802.811 818.856 778.263 cv
818.856 767.383 814.942 755.523 810.788 742.96 cv
800.815 712.72 788.768 676.221 825.104 634.068 cv
821.763 649.189 823.365 663.832 830.104 676.614 cv
838.309 692.209 853.034 701.895 868.521 701.895 cv
885.038 701.895 898.596 691.49 906.935 673.163 cv
918.536 696.324 941.547 713.971 960.905 728.83 cv
970.494 736.181 979.556 743.123 985.641 749.534 cv
1016.02 781.538 1024.3 826.039 1007.27 865.69 cv
989.065 908.047 947.361 933.326 895.715 933.326 cv
cp
1 .835294 .309804 rgb
f
881.288 639.121 mo
876.752 639.121 872.622 637.41 868.98 634.068 cv
852.598 618.923 858.344 611.139 871.793 596.358 cv
878.083 589.432 884.941 581.879 887.048 572.968 cv
904.49 582.993 912.612 596.903 909.57 612.103 cv
906.636 626.748 893.689 639.121 881.288 639.121 cv
cp
f
894.953 933.326 mo
843.226 933.326 819.264 915.451 808.273 900.466 cv
803.602 894.096 800.734 887.549 799.199 881.367 cv
802.526 884.37 806.549 886.299 811.521 886.299 cv
815.813 886.299 820.187 884.818 824.915 881.762 cv
828.623 879.344 830.838 876.301 831.502 872.701 cv
832.631 866.602 829.004 861.615 825.484 856.795 cv
822.631 852.867 819.671 848.82 820.16 845.37 cv
821.83 833.307 829.561 828.797 838.28 824.845 cv
839.367 837.149 842.276 851.619 854.203 857.596 cv
858.495 859.742 862.922 860.828 867.337 860.828 cv
877.893 860.828 887.076 854.498 892.535 843.454 cv
899.654 829.028 894.126 812.728 888.771 796.969 cv
881.071 774.311 877.309 759.776 894.847 749.561 cv
895.66 776.021 912.343 787.787 926.088 797.473 cv
939.348 806.832 949.834 814.222 949.834 832.07 cv
949.834 834.366 945.419 839.569 942.484 843.006 cv
936.277 850.301 925.898 862.526 936.426 873.055 cv
939.387 876.015 943.327 877.66 947.482 877.66 cv
953.623 877.66 959.816 874.182 964.057 868.381 cv
965.061 866.996 965.932 865.527 966.65 864.006 cv
973.172 875.921 974.189 886.949 969.639 896.949 cv
959.452 919.416 922.937 933.326 894.953 933.326 cv
cp
1 .717647 .301961 rgb
f
883.682 968.323 mo
866.903 968.323 853.254 954.676 853.254 937.896 cv
853.254 921.131 866.903 907.492 883.682 907.492 cv
900.447 907.492 914.096 921.131 914.096 937.896 cv
914.096 954.676 900.447 968.323 883.682 968.323 cv
cp
.215686 .278431 .309804 rgb
f
839.268 968.323 mo
822.49 968.323 808.842 954.676 808.842 937.896 cv
808.842 921.131 822.49 907.492 839.268 907.492 cv
856.034 907.492 869.684 921.131 869.684 937.896 cv
869.684 954.676 856.034 968.323 839.268 968.323 cv
cp
f
931.318 968.323 mo
914.54 968.323 900.891 954.676 900.891 937.896 cv
900.891 921.131 914.54 907.492 931.318 907.492 cv
948.085 907.492 961.732 921.131 961.732 937.896 cv
961.732 954.676 948.085 968.323 931.318 968.323 cv
cp
f
1275.58 305.581 mo
1275.58 965.883 li
1209.26 965.883 li
1209.26 305.581 li
1275.58 305.581 li
cp
.909804 .917647 .964706 rgb
f
1275.06 306.119 mo
1264.18 306.371 1253.3 306.677 1242.42 306.863 cv
1209.26 307.503 li
1211.18 305.581 li
1211.45 319.337 1211.75 333.094 1211.9 346.85 cv
1212.47 388.119 li
1213.04 429.389 li
1213.5 470.656 li
1213.9 511.926 li
1214.19 553.193 li
1214.46 594.463 li
1214.63 635.732 li
1214.78 677.001 li
1214.83 718.27 li
1214.85 759.539 li
1214.7 800.807 li
1214.55 842.076 li
1214.47 855.832 1214.5 869.588 1214.34 883.345 cv
1213.96 924.613 li
1213.86 938.37 1213.67 952.127 1213.46 965.883 cv
1209.26 961.684 li
1275.58 961.971 li
1271.67 965.883 li
1273.15 635.732 li
1275.06 306.119 li
cp
1276.11 305.581 mo
1278.02 635.732 li
1279.5 965.883 li
1279.51 968.033 1277.77 969.785 1275.62 969.795 cv
1275.62 969.795 li
1275.58 969.795 li
1209.26 970.082 li
1206.97 970.093 1205.1 968.254 1205.06 965.967 cv
1205.06 965.883 li
1204.86 952.127 1204.67 938.37 1204.57 924.613 cv
1204.19 883.345 li
1204.02 869.588 1204.05 855.832 1203.98 842.076 cv
1203.83 800.807 li
1203.67 759.539 li
1203.7 718.27 li
1203.75 677.001 li
1203.89 635.732 li
1204.06 594.463 li
1204.33 553.193 li
1204.63 511.926 li
1205.02 470.656 li
1205.49 429.389 li
1206.05 388.119 li
1206.62 346.85 li
1206.78 333.094 1207.08 319.337 1207.34 305.581 cv
1207.34 305.508 li
1207.36 304.467 1208.22 303.64 1209.26 303.659 cv
1209.26 303.659 li
1242.42 304.301 li
1253.48 304.488 1264.53 304.8 1275.58 305.056 cv
1275.59 305.057 li
1275.88 305.063 1276.11 305.297 1276.11 305.581 cv
cp
.14902 .196078 .219608 rgb
f
1276.11 305.581 mo
1278.15 635.732 li
1279.7 965.883 li
1279.71 968.143 1277.88 969.984 1275.62 969.994 cv
1275.58 969.994 li
1209.26 970.361 li
1206.8 970.375 1204.8 968.393 1204.78 965.933 cv
1204.78 965.93 li
1204.78 965.883 li
1203.94 800.807 li
1203.8 759.539 li
1203.88 718.27 li
1203.97 677.001 li
1204.18 635.732 li
1204.81 553.193 li
1205.21 511.925 li
1205.78 470.656 li
1206.36 429.389 li
1206.57 415.632 1206.7 401.875 1206.99 388.119 cv
1207.8 346.85 li
1208.05 333.094 1208.38 319.337 1208.74 305.581 cv
1208.75 305.291 1208.99 305.063 1209.28 305.07 cv
1209.56 305.077 1209.78 305.304 1209.79 305.581 cv
1210.14 319.337 1210.47 333.094 1210.72 346.85 cv
1211.54 388.119 li
1211.82 401.875 1211.95 415.632 1212.17 429.389 cv
1212.75 470.656 li
1213.31 511.925 li
1213.71 553.193 li
1214.35 635.732 li
1214.55 677.001 li
1214.65 718.27 li
1214.72 759.539 li
1214.58 800.807 li
1213.74 965.883 li
1209.26 961.404 li
1275.58 961.771 li
1271.47 965.883 li
1273.02 635.732 li
1275.06 305.581 li
1275.06 305.291 1275.3 305.058 1275.59 305.06 cv
1275.88 305.061 1276.11 305.294 1276.11 305.581 cv
cp
f
521.521 221.017 mo
521.975 241.762 li
522.367 263.035 li
523.112 305.581 li
520.983 303.452 li
535.931 303.16 550.877 302.985 565.824 302.804 cv
610.664 302.244 li
655.504 301.685 li
700.345 301.263 li
745.186 300.876 li
790.025 300.611 li
879.705 300.193 li
969.385 300.013 li
1014.23 300.006 li
1059.07 300.154 li
1103.91 300.303 li
1118.85 300.369 1133.8 300.357 1148.75 300.518 cv
1193.59 300.892 li
1208.53 300.991 1223.48 301.182 1238.43 301.381 cv
1234.23 305.581 li
1234.56 220.49 li
1238.43 224.355 li
879.705 222.892 li
521.521 221.017 li
cp
520.983 219.964 mo
879.705 218.087 li
1238.43 216.623 li
1240.55 216.614 1242.28 218.331 1242.29 220.458 cv
1242.29 220.458 li
1242.29 220.49 li
1242.63 305.581 li
1242.64 307.877 1240.79 309.749 1238.5 309.78 cv
1238.43 309.781 li
1223.48 309.98 1208.53 310.171 1193.59 310.27 cv
1148.75 310.645 li
1133.8 310.805 1118.85 310.793 1103.91 310.859 cv
1059.07 311.008 li
1014.23 311.156 li
969.385 311.149 li
879.705 310.969 li
790.025 310.551 li
745.186 310.286 li
700.345 309.899 li
655.504 309.478 li
610.664 308.918 li
565.824 308.358 li
550.877 308.177 535.931 308.002 520.983 307.71 cv
520.904 307.709 li
519.75 307.686 518.832 306.735 518.854 305.581 cv
519.6 263.035 li
519.992 241.762 li
520.458 220.49 li
520.458 220.48 li
520.465 220.194 520.699 219.965 520.983 219.964 cv
cp
f
1238.43 305.581 mo
1296 305.581 li
1296 220.49 li
1238.43 220.49 li
1238.43 305.581 li
cp
.909804 .917647 .964706 rgb
f
1237.9 305.581 mo
1237.44 302.036 1237.05 298.49 1236.69 294.945 cv
1236.38 291.399 1236.01 287.854 1235.75 284.309 cv
1235.48 280.762 1235.18 277.217 1234.97 273.672 cv
1234.76 270.126 1234.49 266.581 1234.33 263.035 cv
1233.81 252.398 li
1233.64 248.854 1233.56 245.308 1233.43 241.762 cv
1233.32 238.217 1233.16 234.671 1233.12 231.126 cv
1232.93 220.49 li
1232.87 217.507 1235.25 215.047 1238.23 214.993 cv
1238.43 214.989 li
1243.22 214.896 1248.02 214.938 1252.82 214.907 cv
1255.22 214.884 1257.62 214.928 1260.02 214.956 cv
1267.21 215.042 li
1272.01 215.178 1276.81 215.248 1281.61 215.476 cv
1284.01 215.568 1286.41 215.67 1288.8 215.815 cv
1291.2 215.931 1293.6 216.119 1296 216.289 cv
1296.39 216.316 li
1298.57 216.472 1300.24 218.323 1300.2 220.49 cv
1299.79 241.762 li
1299.3 263.035 li
1298.96 277.217 1298.67 291.398 1298.24 305.581 cv
1298.23 305.712 li
1298.2 306.911 1297.2 307.854 1296 307.818 cv
1267.21 307.005 li
1238.43 306.106 li
1238.16 306.098 1237.94 305.895 1237.91 305.637 cv
1237.9 305.581 li
cp
1239.01 305.038 mo
1267.21 304.157 li
1296 303.344 li
1293.76 305.581 li
1293.33 291.398 1293.04 277.217 1292.7 263.035 cv
1292.21 241.762 li
1291.8 220.49 li
1296 224.689 li
1293.6 224.859 1291.2 225.048 1288.8 225.163 cv
1286.41 225.308 1284.01 225.41 1281.61 225.502 cv
1276.81 225.73 1272.01 225.801 1267.21 225.936 cv
1260.02 226.023 li
1257.62 226.05 1255.22 226.094 1252.82 226.071 cv
1248.02 226.04 1243.22 226.083 1238.43 225.989 cv
1243.93 220.49 li
1243.73 231.126 li
1243.7 234.671 1243.53 238.217 1243.43 241.762 cv
1243.3 245.308 1243.22 248.854 1243.05 252.398 cv
1242.53 263.035 li
1242.36 266.581 1242.09 270.126 1241.88 273.672 cv
1241.68 277.217 1241.37 280.762 1241.1 284.309 cv
1240.85 287.854 1240.47 291.399 1240.16 294.945 cv
1239.82 298.309 1239.44 301.673 1239.01 305.038 cv
cp
.14902 .196078 .219608 rgb
f
1238.43 305.056 mo
1252.82 304.391 li
1267.21 303.812 li
1276.81 303.442 1286.41 303.001 1296 302.696 cv
1293.11 305.581 li
1292.4 284.308 li
1291.8 263.035 li
1291.68 259.49 1291.59 255.944 1291.43 252.398 cv
1290.97 241.762 li
1290.75 236.444 li
1290.71 234.671 1290.62 232.898 1290.6 231.126 cv
1290.52 227.58 1290.53 224.035 1290.56 220.49 cv
1296 225.929 li
1291.2 225.836 1286.41 225.684 1281.61 225.438 cv
1276.81 225.199 1272.01 224.893 1267.21 224.518 cv
1262.42 224.138 1257.62 223.661 1252.82 223.103 cv
1250.42 222.851 1248.02 222.489 1245.62 222.185 cv
1243.22 221.823 1240.83 221.471 1238.43 221.014 cv
1238.14 220.958 1237.95 220.679 1238 220.389 cv
1238.04 220.167 1238.22 220.005 1238.43 219.964 cv
1240.83 219.508 1243.22 219.155 1245.62 218.793 cv
1248.02 218.489 1250.42 218.128 1252.82 217.875 cv
1257.62 217.317 1262.42 216.841 1267.21 216.461 cv
1272.01 216.086 1276.81 215.779 1281.61 215.54 cv
1286.41 215.294 1291.2 215.142 1296 215.049 cv
1298.95 214.993 1301.38 217.335 1301.44 220.282 cv
1301.44 220.337 li
1301.44 220.49 li
1301.47 224.035 1301.48 227.58 1301.4 231.126 cv
1301.38 232.898 1301.29 234.671 1301.25 236.444 cv
1301.03 241.762 li
1300.57 252.398 li
1300.41 255.944 1300.32 259.49 1300.2 263.035 cv
1299.6 284.308 li
1298.88 305.581 li
1298.88 305.77 li
1298.83 307.311 1297.54 308.518 1296 308.466 cv
1286.41 308.161 1276.81 307.72 1267.21 307.351 cv
1252.82 306.771 li
1238.43 306.106 li
1238.14 306.092 1237.91 305.847 1237.93 305.557 cv
1237.94 305.284 1238.16 305.07 1238.43 305.056 cv
cp
f
550.673 305.581 mo
553.299 965.883 li
550.147 962.732 li
1209.26 960.489 li
1203.87 965.883 li
1203.81 924.613 li
1203.88 883.345 li
1204.01 800.807 li
1204.41 718.27 li
1204.92 635.732 li
1205.21 594.463 li
1205.6 553.193 li
1206.44 470.656 li
1206.87 429.389 li
1207.45 388.119 li
1208.04 346.85 li
1208.74 305.581 li
1208.74 305.291 1208.98 305.06 1209.27 305.065 cv
1209.55 305.07 1209.78 305.3 1209.79 305.581 cv
1210.49 346.85 li
1211.07 388.119 li
1211.66 429.389 li
1212.09 470.656 li
1212.92 553.193 li
1213.32 594.463 li
1213.61 635.732 li
1214.12 718.27 li
1214.51 800.807 li
1214.65 883.345 li
1214.72 924.613 li
1214.65 965.883 li
1214.65 965.909 li
1214.65 968.877 1212.24 971.281 1209.27 971.276 cv
1209.26 971.276 li
550.147 969.035 li
550.124 969.035 li
548.392 969.027 546.99 967.617 546.996 965.885 cv
546.996 965.883 li
549.623 305.581 li
549.624 305.291 549.859 305.057 550.15 305.058 cv
550.438 305.06 550.672 305.293 550.673 305.581 cv
cp
f
1115.41 965.883 mo
1114.72 938.023 li
1114.15 910.163 li
1113.58 882.303 li
1113.14 854.443 li
1112.33 798.724 li
1111.92 770.863 li
1111.64 743.004 li
1111.12 687.284 li
1110.73 631.564 li
1110.57 575.845 li
1110.56 557.271 1110.4 538.697 1110.51 520.124 cv
1115.94 525.549 li
643.474 523.233 li
646.583 520.124 li
645.371 743.004 li
643.999 965.883 li
643.996 966.173 643.76 966.407 643.47 966.404 cv
643.183 966.402 642.951 966.17 642.948 965.883 cv
641.576 743.004 li
640.364 520.124 li
640.355 518.417 641.732 517.024 643.439 517.016 cv
643.441 517.016 li
643.474 517.016 li
1115.94 514.699 li
1118.92 514.686 1121.35 517.09 1121.36 520.07 cv
1121.36 520.124 li
1121.47 538.697 1121.31 557.271 1121.3 575.845 cv
1121.14 631.564 li
1120.75 687.284 li
1120.24 743.004 li
1119.95 770.863 li
1119.55 798.724 li
1118.73 854.443 li
1118.3 882.303 li
1117.72 910.163 li
1117.15 938.023 li
1116.46 965.883 li
1116.45 966.173 1116.21 966.401 1115.92 966.396 cv
1115.64 966.389 1115.42 966.161 1115.41 965.883 cv
cp
f
990.114 516.02 mo
989.271 468.123 li
989.259 467.543 989.722 467.065 990.302 467.055 cv
990.305 467.055 li
990.338 467.055 li
1044.66 466.322 li
1071.82 465.88 li
1076.35 465.853 1080.87 465.75 1085.4 465.786 cv
1089.93 465.793 1094.45 465.842 1098.98 465.938 cv
1099.07 465.939 li
1100.25 465.964 1101.19 466.94 1101.17 468.12 cv
1101.17 468.123 li
1101.08 472.115 1101.03 476.106 1100.89 480.098 cv
1100.79 484.088 1100.67 488.08 1100.5 492.072 cv
1100.36 496.063 1100.17 500.055 1099.96 504.045 cv
1099.71 508.037 1099.53 512.029 1099.2 516.02 cv
1099.2 516.144 1099.09 516.237 1098.96 516.227 cv
1098.85 516.218 1098.76 516.128 1098.75 516.02 cv
1098.43 512.029 1098.25 508.037 1098 504.045 cv
1097.79 500.055 1097.6 496.063 1097.46 492.072 cv
1097.29 488.08 1097.17 484.088 1097.06 480.098 cv
1096.93 476.106 1096.88 472.115 1096.79 468.123 cv
1098.98 470.309 li
1094.45 470.404 1089.93 470.453 1085.4 470.46 cv
1080.87 470.496 1076.35 470.394 1071.82 470.366 cv
1044.66 469.924 li
990.338 469.191 li
991.408 468.123 li
990.563 516.02 li
990.561 516.144 990.459 516.243 990.334 516.241 cv
990.214 516.238 990.115 516.141 990.114 516.02 cv
cp
f
1179.43 466.989 mo
1152.88 467.775 li
1152.34 467.792 1151.89 467.365 1151.87 466.824 cv
1151.87 466.818 li
1151.87 466.765 li
1150.6 413.943 li
1150.58 412.717 1151.55 411.699 1152.77 411.67 cv
1152.78 411.67 li
1152.88 411.667 li
1156.46 411.597 1160.04 411.566 1163.62 411.662 cv
1165.41 411.684 1167.2 411.763 1168.99 411.817 cv
1170.78 411.876 1172.57 411.93 1174.36 412.028 cv
1177.95 412.188 1181.53 412.4 1185.11 412.67 cv
1188.69 412.936 1192.27 413.265 1195.85 413.718 cv
1195.97 413.733 1196.06 413.847 1196.04 413.972 cv
1196.03 414.076 1195.95 414.155 1195.85 414.168 cv
1192.27 414.621 1188.69 414.951 1185.11 415.216 cv
1181.53 415.485 1177.95 415.697 1174.36 415.857 cv
1172.57 415.955 1170.78 416.01 1168.99 416.068 cv
1167.2 416.123 1165.41 416.202 1163.62 416.224 cv
1160.04 416.318 1156.46 416.289 1152.88 416.219 cv
1155.16 413.943 li
1153.89 466.765 li
1152.88 465.753 li
1179.43 466.539 li
1179.55 466.543 1179.65 466.646 1179.65 466.771 cv
1179.64 466.891 1179.55 466.985 1179.43 466.989 cv
cp
f
1042.88 413.718 mo
1060.98 413.346 1079.09 412.837 1097.2 412.585 cv
1124.36 412.128 li
1133.41 411.993 1142.46 411.685 1151.52 411.619 cv
1152.79 411.609 1153.83 412.635 1153.84 413.909 cv
1153.84 413.943 li
1153.89 418.345 1153.83 422.746 1153.75 427.148 cv
1153.63 431.551 1153.54 435.952 1153.36 440.354 cv
1153.21 444.756 1152.99 449.158 1152.73 453.56 cv
1152.62 455.76 1152.45 457.961 1152.28 460.162 cv
1152.12 462.362 1151.96 464.563 1151.74 466.765 cv
1151.73 466.889 1151.62 466.979 1151.5 466.967 cv
1151.39 466.955 1151.3 466.869 1151.29 466.765 cv
1151.07 464.563 1150.91 462.362 1150.75 460.162 cv
1150.58 457.961 1150.42 455.76 1150.3 453.56 cv
1150.04 449.158 1149.83 444.756 1149.67 440.354 cv
1149.49 435.952 1149.4 431.551 1149.29 427.148 cv
1149.2 422.746 1149.14 418.345 1149.19 413.943 cv
1151.52 416.267 li
1142.46 416.201 1133.41 415.893 1124.36 415.758 cv
1097.2 415.301 li
1079.09 415.049 1060.98 414.54 1042.88 414.168 cv
1042.75 414.166 1042.65 414.063 1042.66 413.938 cv
1042.66 413.816 1042.76 413.721 1042.88 413.718 cv
cp
f
1177.25 466.989 mo
1177.25 466.989 1168.85 467.215 1156.25 467.552 cv
1149.95 467.723 1142.6 467.932 1134.73 468.068 cv
1126.86 468.227 1118.46 468.396 1110.06 468.564 cv
1105.86 468.668 1101.67 468.771 1097.53 468.872 cv
1093.4 469.011 1089.33 469.049 1085.39 469.109 cv
1081.46 469.104 1077.65 469.064 1074.04 468.94 cv
1070.43 468.848 1067.02 468.719 1063.87 468.564 cv
1051.27 467.99 1042.88 466.989 1042.88 466.989 cv
1042.75 466.975 1042.66 466.861 1042.68 466.737 cv
1042.69 466.632 1042.78 466.551 1042.88 466.539 cv
1042.88 466.539 1051.27 465.539 1063.87 464.965 cv
1067.02 464.81 1070.43 464.682 1074.04 464.588 cv
1077.65 464.465 1081.46 464.426 1085.39 464.421 cv
1089.33 464.48 1093.4 464.518 1097.53 464.656 cv
1101.67 464.758 1105.86 464.861 1110.06 464.965 cv
1118.46 465.133 1126.86 465.302 1134.73 465.46 cv
1142.6 465.599 1149.95 465.807 1156.25 465.977 cv
1168.85 466.314 1177.25 466.539 1177.25 466.539 cv
1177.37 466.543 1177.47 466.646 1177.47 466.771 cv
1177.46 466.891 1177.37 466.986 1177.25 466.989 cv
cp
f
932.874 413.718 mo
987.193 412.994 li
1041.52 412.407 li
1042.35 412.397 1043.04 413.07 1043.05 413.91 cv
1043.05 413.943 li
1043.65 466.765 li
1043.66 467.93 1042.73 468.885 1041.56 468.898 cv
1041.56 468.898 li
1041.52 468.899 li
1027.94 469.039 li
1023.41 469.063 1018.88 469.137 1014.35 469.087 cv
1000.78 469.017 li
987.193 468.815 li
973.614 468.532 li
960.033 468.123 li
955.508 467.963 950.98 467.874 946.453 467.645 cv
941.927 467.436 937.4 467.265 932.874 466.989 cv
932.75 466.982 932.654 466.875 932.663 466.75 cv
932.669 466.637 932.763 466.546 932.874 466.539 cv
937.4 466.264 941.927 466.094 946.453 465.885 cv
950.98 465.654 955.508 465.565 960.033 465.406 cv
973.614 464.997 li
987.193 464.714 li
1000.78 464.512 li
1014.35 464.441 li
1018.88 464.393 1023.41 464.467 1027.94 464.49 cv
1041.52 464.63 li
1039.38 466.765 li
1039.98 413.943 li
1041.52 415.479 li
987.193 414.893 li
932.874 414.168 li
932.75 414.166 932.65 414.064 932.651 413.939 cv
932.654 413.817 932.752 413.72 932.874 413.718 cv
cp
f
712.644 466.765 mo
711.754 413.943 li
711.744 413.34 712.228 412.842 712.831 412.831 cv
712.836 412.831 li
712.867 412.83 li
767.188 412.143 li
794.348 411.712 li
798.876 411.677 803.402 411.608 807.929 411.602 cv
812.455 411.599 816.982 411.646 821.51 411.707 cv
821.599 411.708 li
822.801 411.725 823.762 412.713 823.746 413.915 cv
823.746 413.943 li
823.479 423.864 li
823.351 427.172 823.256 430.479 823.078 433.786 cv
822.932 437.094 822.735 440.4 822.524 443.709 cv
822.26 447.016 822.074 450.322 821.734 453.63 cv
821.722 453.754 821.61 453.845 821.486 453.832 cv
821.377 453.82 821.294 453.734 821.283 453.63 cv
820.943 450.322 820.76 447.016 820.492 443.709 cv
820.283 440.4 820.087 437.094 819.94 433.786 cv
819.764 430.479 819.668 427.172 819.539 423.864 cv
819.273 413.943 li
821.51 416.178 li
816.982 416.24 812.455 416.288 807.929 416.284 cv
803.402 416.277 798.876 416.209 794.348 416.174 cv
767.188 415.743 li
712.867 415.056 li
713.979 413.943 li
713.092 466.765 li
713.09 466.889 712.988 466.988 712.863 466.985 cv
712.742 466.983 712.645 466.885 712.644 466.765 cv
cp
f
602.64 466.765 mo
602.277 449.158 601.785 431.551 601.531 413.943 cv
601.521 413.218 602.101 412.621 602.826 412.609 cv
602.864 412.609 li
630.025 412.156 li
643.604 411.887 li
648.132 411.771 652.658 411.677 657.185 411.637 cv
661.711 411.553 666.237 411.624 670.766 411.688 cv
675.291 411.806 679.819 411.882 684.346 412.072 cv
688.872 412.227 693.398 412.442 697.925 412.706 cv
700.189 412.827 702.451 412.984 704.716 413.162 cv
706.979 413.33 709.242 413.488 711.506 413.718 cv
711.63 413.73 711.721 413.842 711.707 413.966 cv
711.697 414.074 711.609 414.157 711.506 414.168 cv
709.242 414.396 706.979 414.556 704.716 414.724 cv
702.451 414.901 700.189 415.059 697.925 415.181 cv
693.398 415.443 688.872 415.659 684.346 415.813 cv
679.819 416.004 675.291 416.08 670.766 416.198 cv
666.237 416.262 661.711 416.333 657.185 416.248 cv
652.658 416.209 648.132 416.115 643.604 415.999 cv
630.025 415.73 li
602.864 415.275 li
604.197 413.943 li
603.944 431.551 603.451 449.158 603.09 466.765 cv
603.087 466.889 602.984 466.988 602.86 466.984 cv
602.738 466.982 602.642 466.884 602.64 466.765 cv
cp
f
1100.12 412.584 mo
1099.75 394.977 1099.26 377.369 1099.01 359.762 cv
1099 359.036 1099.58 358.439 1100.3 358.43 cv
1100.34 358.428 li
1127.5 357.975 li
1141.08 357.706 li
1145.61 357.59 1150.13 357.495 1154.66 357.457 cv
1159.19 357.372 1163.72 357.443 1168.24 357.507 cv
1172.77 357.624 1177.29 357.701 1181.82 357.891 cv
1186.35 358.046 1190.88 358.262 1195.4 358.525 cv
1197.67 358.646 1199.93 358.803 1202.19 358.982 cv
1204.46 359.148 1206.72 359.309 1208.98 359.537 cv
1209.11 359.551 1209.2 359.661 1209.18 359.785 cv
1209.17 359.893 1209.09 359.977 1208.98 359.986 cv
1206.72 360.215 1204.46 360.375 1202.19 360.543 cv
1199.93 360.721 1197.67 360.877 1195.4 360.999 cv
1190.88 361.263 1186.35 361.479 1181.82 361.633 cv
1177.29 361.822 1172.77 361.9 1168.24 362.018 cv
1163.72 362.081 1159.19 362.152 1154.66 362.066 cv
1150.13 362.029 1145.61 361.936 1141.08 361.818 cv
1127.5 361.55 li
1100.34 361.096 li
1101.67 359.762 li
1101.42 377.369 1100.93 394.977 1100.56 412.584 cv
1100.56 412.708 1100.46 412.807 1100.34 412.804 cv
1100.21 412.802 1100.12 412.703 1100.12 412.584 cv
cp
f
991.98 359.537 mo
1010.09 359.165 1028.19 358.656 1046.3 358.403 cv
1073.46 357.947 li
1082.51 357.812 1091.57 357.504 1100.62 357.438 cv
1101.89 357.429 1102.94 358.454 1102.95 359.728 cv
1102.95 359.762 li
1102.99 364.164 1102.94 368.565 1102.85 372.968 cv
1102.74 377.369 1102.65 381.771 1102.46 386.172 cv
1102.31 390.574 1102.1 394.977 1101.84 399.378 cv
1101.72 401.579 1101.56 403.779 1101.39 405.98 cv
1101.23 408.182 1101.07 410.383 1100.85 412.584 cv
1100.83 412.708 1100.72 412.798 1100.6 412.785 cv
1100.49 412.774 1100.41 412.688 1100.4 412.584 cv
1100.17 410.383 1100.02 408.182 1099.85 405.98 cv
1099.68 403.779 1099.52 401.579 1099.41 399.378 cv
1099.15 394.977 1098.93 390.574 1098.78 386.172 cv
1098.59 381.771 1098.5 377.369 1098.39 372.968 cv
1098.3 368.565 1098.25 364.164 1098.3 359.762 cv
1100.62 362.086 li
1091.57 362.02 1082.51 361.713 1073.46 361.576 cv
1046.3 361.121 li
1028.19 360.867 1010.09 360.359 991.98 359.986 cv
991.855 359.984 991.758 359.881 991.76 359.757 cv
991.762 359.637 991.86 359.54 991.98 359.537 cv
cp
f
768.735 412.355 mo
768.519 408.03 768.361 403.703 768.203 399.378 cv
768.032 394.977 767.871 390.574 767.771 386.172 cv
767.561 377.369 767.253 368.565 767.127 359.762 cv
768.97 361.605 li
759.916 361.795 750.863 361.884 741.811 362.002 cv
732.756 362.061 723.703 362.161 714.648 362.148 cv
705.596 362.193 696.542 362.076 687.489 362.024 cv
682.963 362.01 678.436 361.947 673.908 361.854 cv
669.383 361.773 664.855 361.702 660.328 361.562 cv
662.129 359.762 li
661.688 412.584 li
660.328 411.226 li
714.648 411.753 li
768.735 412.355 li
cp
768.97 412.809 mo
714.648 413.414 li
660.328 413.941 li
659.586 413.949 658.978 413.353 658.972 412.609 cv
658.972 412.607 li
658.971 412.584 li
658.527 359.762 li
658.521 358.791 659.289 357.994 660.255 357.964 cv
660.328 357.963 li
664.855 357.822 669.383 357.751 673.908 357.671 cv
678.436 357.577 682.963 357.514 687.489 357.5 cv
696.542 357.448 705.596 357.331 714.648 357.376 cv
723.703 357.363 732.756 357.463 741.811 357.521 cv
750.863 357.641 759.916 357.729 768.97 357.918 cv
769.034 357.92 li
770.035 357.94 770.827 358.766 770.813 359.762 cv
770.687 368.565 770.379 377.369 770.166 386.172 cv
770.068 390.574 769.908 394.977 769.736 399.378 cv
769.574 403.779 769.416 408.182 769.195 412.584 cv
769.193 412.592 li
769.188 412.713 769.088 412.807 768.97 412.809 cv
cp
f
659.191 359.762 mo
659.553 377.369 660.047 394.977 660.301 412.584 cv
660.311 413.309 659.73 413.905 659.006 413.916 cv
658.967 413.916 li
631.807 414.371 li
618.227 414.64 li
613.7 414.756 609.173 414.85 604.646 414.889 cv
600.119 414.974 595.593 414.902 591.066 414.839 cv
586.539 414.722 582.013 414.644 577.486 414.454 cv
572.959 414.299 568.433 414.084 563.905 413.82 cv
561.643 413.699 559.379 413.542 557.116 413.364 cv
554.852 413.196 552.589 413.037 550.326 412.809 cv
550.201 412.796 550.111 412.685 550.123 412.561 cv
550.135 412.451 550.221 412.369 550.326 412.357 cv
552.589 412.129 554.852 411.971 557.116 411.803 cv
559.379 411.625 561.643 411.468 563.905 411.347 cv
568.433 411.082 572.959 410.867 577.486 410.712 cv
582.013 410.522 586.539 410.446 591.066 410.328 cv
595.593 410.265 600.119 410.193 604.646 410.277 cv
609.173 410.317 613.7 410.411 618.227 410.527 cv
631.807 410.797 li
658.967 411.25 li
657.635 412.584 li
657.888 394.977 658.38 377.369 658.742 359.762 cv
658.744 359.639 658.848 359.539 658.972 359.541 cv
659.092 359.545 659.188 359.643 659.191 359.762 cv
cp
f
821.734 322 mo
822.623 358.403 li
822.636 359.002 822.162 359.5 821.563 359.516 cv
821.557 359.516 li
821.51 359.516 li
767.188 360.203 li
740.029 360.635 li
735.501 360.67 730.975 360.737 726.448 360.744 cv
721.922 360.748 717.396 360.701 712.867 360.639 cv
712.791 360.638 li
711.583 360.621 710.615 359.627 710.631 358.417 cv
710.631 358.403 li
710.897 345.197 li
711.026 340.796 711.121 336.394 711.299 331.992 cv
711.445 327.59 711.642 323.188 711.852 318.787 cv
712.117 314.385 712.303 309.983 712.644 305.581 cv
712.652 305.457 712.761 305.364 712.885 305.373 cv
712.996 305.382 713.084 305.472 713.092 305.581 cv
713.434 309.983 713.617 314.385 713.883 318.787 cv
714.094 323.188 714.29 327.59 714.437 331.992 cv
714.613 336.394 714.709 340.796 714.838 345.197 cv
715.104 358.403 li
712.867 356.168 li
717.396 356.105 721.922 356.059 726.448 356.063 cv
730.975 356.069 735.501 356.137 740.029 356.172 cv
767.188 356.604 li
821.51 357.291 li
820.397 358.403 li
821.283 322 li
821.288 321.876 821.391 321.777 821.516 321.781 cv
821.635 321.784 821.73 321.88 821.734 322 cv
cp
f
713.371 305.581 mo
713.73 323.188 714.217 340.796 714.472 358.403 cv
714.482 359.124 713.906 359.717 713.186 359.728 cv
713.147 359.728 li
658.005 360.705 li
653.411 360.795 648.816 360.724 644.221 360.661 cv
639.625 360.546 635.03 360.469 630.436 360.279 cv
625.84 360.123 621.244 359.909 616.65 359.645 cv
614.353 359.521 612.055 359.365 609.758 359.187 cv
607.46 359.018 605.162 358.858 602.864 358.628 cv
602.74 358.615 602.65 358.505 602.662 358.381 cv
602.674 358.271 602.76 358.188 602.864 358.178 cv
605.162 357.947 607.46 357.789 609.758 357.62 cv
612.055 357.441 614.353 357.285 616.65 357.162 cv
621.244 356.897 625.84 356.684 630.436 356.527 cv
635.03 356.338 639.625 356.26 644.221 356.146 cv
648.816 356.083 653.411 356.012 658.005 356.102 cv
713.147 357.079 li
711.823 358.403 li
712.078 340.796 712.563 323.188 712.922 305.581 cv
712.925 305.457 713.027 305.358 713.152 305.36 cv
713.271 305.363 713.37 305.461 713.371 305.581 cv
cp
f
957.854 98.8228 mo
957.854 150.094 916.291 191.658 865.02 191.658 cv
813.748 191.658 772.186 150.094 772.186 98.8228 cv
772.186 47.5503 813.748 5.98828 865.02 5.98828 cv
916.291 5.98828 957.854 47.5503 957.854 98.8228 cv
cp
.909804 .917647 .964706 rgb
f
847.181 189.945 mo
847.181 189.945 845.07 189.56 841.11 188.837 cv
839.115 188.561 836.746 187.759 833.897 186.995 cv
830.997 186.328 827.928 184.913 824.353 183.596 cv
817.428 180.511 809.172 176.058 801.018 169.087 cv
792.859 162.186 784.738 152.854 778.527 141.022 cv
772.225 129.268 768.266 114.892 767.748 99.46 cv
767.301 84.063 770.634 67.478 778.573 52.4165 cv
786.469 37.4063 798.588 23.7847 813.939 14.4448 cv
821.609 9.80713 829.942 6.09082 838.705 3.6709 cv
840.876 2.99561 843.114 2.57227 845.326 2.04053 cv
847.566 1.64795 849.795 1.16309 852.062 .916016 cv
854.316 .578613 856.588 .393555 858.861 .227051 cv
859.996 .112793 861.137 .114258 862.274 .0722656 cv
863.984 .0234375 li
864.838 0 li
865.403 .00146484 li
865.803 .0102539 li
869.881 .0498047 874.926 .418945 879.313 1.08008 cv
883.811 1.80029 888.287 2.69385 892.632 4.03271 cv
894.828 4.61572 896.947 5.43945 899.095 6.16113 cv
901.192 7.01367 903.322 7.78711 905.358 8.76855 cv
909.49 10.5967 913.438 12.7891 917.238 15.1626 cv
932.506 24.6426 944.424 38.4775 952.088 53.6016 cv
955.92 61.1807 958.752 69.1099 960.348 77.1094 cv
961.211 81.0938 961.703 85.0977 962.074 89.0493 cv
962.164 91.0332 962.354 92.999 962.35 94.958 cv
962.355 95.9365 962.361 96.9111 962.367 97.8838 cv
962.37 98.6118 li
962.371 98.7935 li
962.361 99.2598 962.361 99.022 962.357 99.1714 cv
962.335 99.5171 li
962.244 100.898 li
962.124 102.737 962.004 104.562 961.885 106.375 cv
961.859 107.259 961.708 108.224 961.557 109.183 cv
961.412 110.137 961.268 111.087 961.122 112.034 cv
960.976 112.979 960.83 113.919 960.684 114.857 cv
960.465 116.259 li
960.132 117.604 li
959.681 119.388 959.232 121.157 958.789 122.912 cv
958.403 124.68 957.711 126.347 957.143 128.026 cv
956.534 129.694 956.001 131.371 955.342 132.98 cv
954.621 134.563 953.908 136.132 953.2 137.685 cv
952.848 138.459 952.494 139.229 952.143 139.997 cv
951.754 140.744 951.325 141.466 950.921 142.195 cv
944.566 153.951 936.325 163.182 928.066 169.968 cv
919.813 176.826 911.492 181.157 904.523 184.141 cv
900.939 185.427 897.835 186.782 894.943 187.409 cv
892.094 188.142 889.721 188.897 887.704 189.151 cv
883.73 189.822 881.61 190.179 881.61 190.179 cv
881.61 190.179 883.672 189.589 887.535 188.482 cv
889.488 188.032 891.771 187.037 894.48 186.037 cv
895.836 185.531 897.291 185 898.767 184.232 cv
900.258 183.523 901.843 182.771 903.519 181.975 cv
910.046 178.479 917.623 173.566 925.02 166.532 cv
932.385 159.501 939.448 150.271 944.771 139.085 cv
945.108 138.389 945.472 137.701 945.791 136.989 cv
946.074 136.261 946.357 135.527 946.643 134.791 cv
947.215 133.323 947.792 131.84 948.375 130.344 cv
948.896 128.827 949.292 127.251 949.766 125.69 cv
950.199 124.117 950.757 122.566 951.009 120.918 cv
951.334 119.294 951.664 117.656 951.994 116.005 cv
952.251 114.768 li
952.387 113.535 li
952.479 112.712 952.573 111.888 952.667 111.06 cv
952.764 110.232 952.86 109.403 952.957 108.57 cv
953.061 107.744 953.171 106.917 953.16 105.981 cv
953.205 104.166 953.25 102.337 953.295 100.495 cv
953.329 99.1113 li
953.338 98.7646 li
953.335 98.7979 953.347 98.4448 953.335 98.7964 cv
953.326 98.6309 li
953.295 97.9702 li
953.254 97.0884 953.212 96.2036 953.171 95.3164 cv
953.105 93.542 952.852 91.7695 952.703 89.9824 cv
952.217 86.4272 951.633 82.8413 950.707 79.2964 cv
950.476 78.4111 950.268 77.5176 950.019 76.6328 cv
949.205 73.9893 li
948.718 72.207 948.004 70.4873 947.416 68.7202 cv
946.021 65.2656 944.563 61.7915 942.715 58.4785 cv
939.176 51.7749 934.582 45.5156 929.287 39.8281 cv
923.921 34.2012 917.818 29.1592 911.094 24.9858 cv
907.721 22.9219 904.229 21.0117 900.572 19.4355 cv
898.775 18.5801 896.891 17.9253 895.04 17.1826 cv
893.142 16.5718 891.275 15.8496 889.338 15.3589 cv
885.508 14.2075 881.563 13.4648 877.605 12.8584 cv
873.516 12.3027 869.996 12.0557 865.5 11.9985 cv
865.099 11.9868 li
864.898 11.981 li
865.134 11.9839 864.859 11.9854 864.859 11.9854 cv
864.107 12.0029 li
862.603 12.0352 li
861.6 12.0645 860.593 12.0483 859.596 12.145 cv
857.593 12.2769 855.592 12.418 853.608 12.7031 cv
851.61 12.8979 849.65 13.3198 847.674 13.6406 cv
845.728 14.1006 843.752 14.4434 841.84 15.0293 cv
834.113 17.0918 826.748 20.3096 819.941 24.3418 cv
813.203 28.4795 806.961 33.3516 801.563 38.957 cv
800.166 40.3145 798.943 41.8228 797.637 43.2495 cv
796.445 44.7705 795.16 46.2158 794.064 47.7959 cv
791.73 50.855 789.744 54.126 787.854 57.4092 cv
780.547 70.6992 776.832 85.3623 776.674 99.4028 cv
776.716 101.158 776.757 102.901 776.797 104.631 cv
776.833 105.496 776.797 106.365 776.891 107.219 cv
776.988 108.073 777.085 108.924 777.182 109.772 cv
777.381 111.467 777.543 113.158 777.765 114.828 cv
778.093 116.479 778.416 118.118 778.737 119.743 cv
778.896 120.558 779.054 121.37 779.209 122.178 cv
779.436 122.969 779.66 123.757 779.885 124.54 cv
780.336 126.111 780.783 127.668 781.228 129.211 cv
781.726 130.736 782.355 132.198 782.903 133.677 cv
783.501 135.136 783.952 136.648 784.69 138.01 cv
789.885 149.26 796.824 158.581 804.097 165.71 cv
811.397 172.844 818.9 177.87 825.381 181.456 cv
831.99 184.828 837.412 186.992 841.271 188.171 cv
845.125 189.328 847.181 189.945 847.181 189.945 cv
cp
.85098 .858824 .909804 rgb
f
871.104 171.76 mo
861.369 171.76 li
860.152 154.726 li
872.32 154.726 li
871.104 171.76 li
cp
.427451 .298039 .254902 rgb
f
922.549 152.266 mo
918.508 142.938 906.992 128.89 906.992 128.89 cv
912.771 127.698 li
911.408 123.699 895.633 101.21 895.633 101.21 cv
903.34 107.106 li
907.403 104.927 li
902.558 95.1123 890.875 76.4692 890.875 76.4692 cv
894.428 76.9644 li
897.846 75.189 li
884.815 57.6343 li
888.543 55.1675 li
865.263 23.3896 li
842.054 54.9824 li
846.615 57.0674 li
832.68 75.8984 li
836.977 77.2949 li
840.988 75.3325 li
840.988 75.3325 822.583 103.89 821.089 108.907 cv
825.677 110.426 li
834.398 103.561 li
834.398 103.561 818.623 127.285 817.181 130.967 cv
822.231 132.567 li
822.231 132.567 812.219 148.414 810.408 153.514 cv
834.453 157.486 li
834.453 157.486 840.836 142.842 843.877 140.277 cv
841.852 146.026 838.049 159.857 838.049 159.857 cv
840.896 160.039 li
844.696 153.347 li
844.078 160.232 li
844.078 160.232 856.433 162.038 863.813 162.038 cv
872.615 162.038 894.073 160.585 901.928 159.409 cv
901.928 159.409 900.154 152.292 898.937 146.723 cv
901.572 149.454 905.02 156.996 905.02 156.996 cv
922.549 152.266 li
cp
.501961 .796078 .768627 rgb
f
855.285 57.3857 mo
855.285 60.7461 852.563 63.4702 849.202 63.4702 cv
845.842 63.4702 843.117 60.7461 843.117 57.3857 cv
843.117 54.0254 845.842 51.3027 849.202 51.3027 cv
852.563 51.3027 855.285 54.0254 855.285 57.3857 cv
cp
1 .321569 .321569 rgb
f
895.438 127.957 mo
895.438 130.645 893.259 132.825 890.57 132.825 cv
887.883 132.825 885.703 130.645 885.703 127.957 cv
885.703 125.27 887.883 123.09 890.57 123.09 cv
893.259 123.09 895.438 125.27 895.438 127.957 cv
cp
f
826.084 140.125 mo
826.084 142.813 823.904 144.992 821.217 144.992 cv
818.528 144.992 816.35 142.813 816.35 140.125 cv
816.35 137.437 818.528 135.258 821.217 135.258 cv
823.904 135.258 826.084 137.437 826.084 140.125 cv
cp
f
863.803 115.79 mo
863.803 119.15 861.079 121.874 857.719 121.874 cv
854.358 121.874 851.635 119.15 851.635 115.79 cv
851.635 112.43 854.358 109.707 857.719 109.707 cv
861.079 109.707 863.803 112.43 863.803 115.79 cv
cp
f
883.271 74.4209 mo
883.271 77.7813 880.547 80.5039 877.187 80.5039 cv
873.826 80.5039 871.104 77.7813 871.104 74.4209 cv
871.104 71.0596 873.826 68.3364 877.187 68.3364 cv
880.547 68.3364 883.271 71.0596 883.271 74.4209 cv
cp
f
872.619 138.118 mo
872.297 144.291 li
878.404 147.705 li
871.971 148.277 li
871.433 155.328 li
867.545 149.401 li
861.369 150.488 li
865.421 145.424 li
863.37 140.934 li
868.004 142.509 li
872.619 138.118 li
cp
1 1 1 rgb
f
871.274 41.252 mo
870.953 47.4258 li
877.059 50.8389 li
870.625 51.4116 li
870.091 58.4629 li
866.2 52.5361 li
860.024 53.6221 li
864.078 48.5586 li
862.027 44.0684 li
866.658 45.6431 li
871.274 41.252 li
cp
f
835.479 117.725 mo
838.74 122.194 li
844.91 121.118 li
840.765 125.146 li
844.373 130.348 li
838.324 128.427 li
834.65 132.667 li
834.606 126.863 li
830.646 124.902 li
834.753 123.38 li
835.479 117.725 li
cp
f
884.499 93.4854 mo
884.212 99.0107 li
889.678 102.068 li
883.919 102.579 li
883.438 108.892 li
879.958 103.586 li
874.43 104.559 li
878.057 100.027 li
876.223 96.0073 li
880.368 97.4165 li
884.499 93.4854 li
cp
f
848.955 84.98 mo
851.469 89.9077 li
857.73 89.8198 li
853.002 93.145 li
854.277 97.6597 li
850.075 95.998 li
845.774 99.605 li
846.648 93.8672 li
843.049 91.3052 li
847.344 90.4512 li
848.955 84.98 li
cp
f
904.953 130.203 mo
907.468 135.13 li
913.73 135.042 li
909 138.366 li
910.277 142.882 li
906.074 141.221 li
901.773 144.828 li
902.648 139.088 li
899.048 136.527 li
903.343 135.672 li
904.953 130.203 li
cp
f
941.389 219.646 mo
788.65 219.646 li
788.65 215.369 li
788.65 190.386 808.901 170.134 833.885 170.134 cv
896.154 170.134 li
921.137 170.134 941.389 190.386 941.389 215.369 cv
941.389 219.646 li
cp
1 .321569 .321569 rgb
f
945.299 219.646 mo
784.74 219.646 li
784.74 210.304 li
945.299 210.304 li
945.299 219.646 li
cp
.909804 .227451 .227451 rgb
f
405.516 1179.8 mo
661.24 1179.8 li
661.24 773.833 li
482.104 773.833 li
441.229 773.833 408.093 806.969 408.093 847.844 cv
405.516 1179.8 li
cp
.717647 .435294 .345098 rgb
f
224.225 1179.8 mo
483.395 1179.8 li
483.395 647.47 li
483.395 557.545 407.918 484.646 317.993 484.646 cv
198.194 484.646 li
101.448 484.646 26.0435 568.506 36.2856 664.708 cv
77.0347 1047.45 li
85.0474 1122.71 148.541 1179.8 224.225 1179.8 cv
cp
f
188.474 1179.8 mo
483.395 1179.8 li
483.395 647.47 li
483.395 557.545 410.495 484.646 320.57 484.646 cv
290.431 484.646 li
203.725 484.646 135.585 558.837 142.944 645.23 cv
188.474 1179.8 li
cp
.839216 .568627 .462745 rgb
f
246.595 1179.8 mo
587.645 1179.8 li
587.23 963.495 li
587.23 922.62 554.095 889.485 513.22 889.485 cv
91.126 889.485 li
98.7646 1039.31 li
102.778 1118.03 167.773 1179.8 246.595 1179.8 cv
cp
f
249.311 839.139 mo
254.909 829.813 295.175 803.121 361.785 805.094 cv
368.339 814.107 426.914 874.664 426.914 874.664 cv
426.914 874.664 424.941 941.273 383.988 951.636 cv
336.805 963.572 272.211 944.162 261.152 902.787 cv
252.445 870.214 255.602 866.893 249.311 839.139 cv
cp
1 .717647 .301961 rgb
f
389.169 696.432 mo
382.701 701.675 370.296 710.528 365.485 734.148 cv
362.78 747.431 339.385 645.643 303.872 627.543 cv
268.727 609.633 277.545 680.933 277.545 680.933 cv
277.545 680.933 318.681 805.867 331.44 810.75 cv
368.556 824.95 417.553 760.793 407.783 708.521 cv
409.342 706.891 393.268 693.111 389.169 696.432 cv
cp
.898039 .717647 .207843 rgb
f
893.534 722.328 mo
889.455 717.283 883.134 719.071 872.388 723.295 cv
856.99 729.346 805.339 729.22 805.339 729.22 cv
775.632 755.789 li
814.743 763.784 li
820.672 775.482 832.843 778.186 840.929 772.08 cv
892.174 733.392 li
895.441 730.9 896.119 725.522 893.534 722.328 cv
cp
1 .321569 .321569 rgb
f
441.104 888.004 mo
441.104 888.004 502.779 829.783 545.488 775.562 cv
625.836 780.032 697.459 768.211 809.944 763.383 cv
817.69 727.102 li
696.605 697.068 620.962 692.83 532.172 681.264 cv
476.1 684.583 364.623 811.023 329.005 841.971 cv
309.15 869.27 337.267 907.313 361.496 906 cv
398.38 904 441.104 888.004 441.104 888.004 cv
cp
.105882 .54902 .494118 rgb
f
363.192 804.809 mo
363.192 804.809 354.769 772.094 348.237 741.196 cv
344.878 725.309 358.556 708.959 350.93 694.678 cv
342.688 679.244 332.001 642.296 324.292 631.004 cv
318.39 622.359 308.826 616.922 298.39 616.141 cv
269.492 613.978 256.537 617.977 237.545 617.789 cv
191.313 617.335 190.629 623.083 176.758 631.644 cv
177.611 635.402 190.76 704.906 196.819 726.15 cv
207.936 765.129 243.046 815.928 248.571 834.967 cv
363.192 804.809 li
cp
1 .835294 .309804 rgb
f
279.833 464.704 mo
278.291 464.436 276.737 464.197 275.157 464.031 cv
275.157 464.031 li
275.067 464.882 li
276.638 464.738 278.228 464.677 279.833 464.704 cv
cp
.839216 .568627 .462745 rgb
f
313.059 480.711 mo
320.593 489.867 324.424 502.023 322.661 514.694 cv
315.234 568.082 li
312.438 588.176 273.791 599.402 273.791 599.402 cv
275.933 622.764 li
288.425 633.173 li
295.846 639.357 295.964 650.716 288.675 657.053 cv
288.675 657.053 li
279.645 664.907 282.384 679.573 293.639 683.637 cv
321.819 693.813 li
316.991 688.984 li
309.71 681.705 311.301 669.504 320.205 664.334 cv
331.252 657.92 li
340.024 652.825 341.726 640.869 334.721 633.53 cv
329.459 628.018 li
323.012 621.264 323.859 610.406 331.277 604.732 cv
335.59 601.436 li
339.91 598.131 342.212 592.836 341.669 587.424 cv
339.615 566.945 334.595 516.69 333.836 507.172 cv
332.843 494.7 325.843 492.032 313.059 480.711 cv
cp
.47451 .52549 .796078 rgb
f
264.517 646.485 mo
264.517 646.485 li
250.046 647.558 237.447 636.695 236.376 622.227 cv
232.673 572.229 li
277.75 568.89 li
281.996 626.209 li
282.768 636.636 274.942 645.713 264.517 646.485 cv
cp
1 .686275 .6 rgb
f
273.791 599.402 mo
273.791 599.402 li
293.884 602.199 312.438 588.176 315.234 568.082 cv
322.661 514.694 li
326.006 490.654 309.229 468.454 285.188 465.109 cv
285.188 465.109 li
261.148 461.765 238.947 478.543 235.603 502.583 cv
230.165 541.676 li
226.271 569.664 245.803 595.509 273.791 599.402 cv
cp
f
225.605 482.143 mo
212.148 509.768 182.49 577.311 182.49 577.311 cv
182.49 577.311 171.648 588.157 182.679 605.001 cv
191.616 618.647 168.076 624.149 167.877 644.967 cv
171.084 636.331 177.498 627.574 197.481 624.243 cv
209.665 622.213 217.009 634.49 234.209 613.43 cv
243.023 557.797 229.585 557.131 229.673 548.276 cv
229.682 547.371 232.256 535.18 232.256 535.18 cv
232.256 535.18 li
237.527 535.295 242.049 531.445 242.776 526.223 cv
245.865 504.01 li
248.084 488.066 262.807 476.94 278.75 479.158 cv
283.148 479.771 li
287.046 480.313 290.806 480.965 294.356 481.779 cv
312.708 485.992 325.464 494.552 322.662 514.694 cv
318.59 543.966 li
328.002 538.861 331.866 529.684 333.201 519.472 cv
336.423 494.821 323.771 468.951 300.571 460.018 cv
267.051 447.111 238.646 455.372 225.605 482.143 cv
cp
.47451 .52549 .796078 rgb
f
287.951 559.334 mo
286.722 559.334 285.609 559.265 284.62 559.128 cv
283.8 559.014 283.227 558.256 283.34 557.436 cv
283.455 556.615 284.213 556.042 285.033 556.156 cv
286.967 556.426 289.613 556.385 292.684 556.039 cv
293.561 555.94 294.322 555.444 294.773 554.68 cv
295.229 553.908 295.293 552.991 294.95 552.165 cv
290.487 541.404 288.429 534.473 288.834 531.565 cv
288.948 530.745 289.718 530.167 290.526 530.287 cv
291.347 530.4 291.919 531.158 291.805 531.979 cv
291.494 534.217 293.706 541.333 297.722 551.015 cv
298.429 552.72 298.296 554.611 297.358 556.203 cv
296.424 557.788 294.842 558.814 293.02 559.021 cv
291.161 559.229 289.468 559.334 287.951 559.334 cv
cp
.14902 .196078 .219608 rgb
f
288.007 579.512 mo
287.045 579.512 286.077 579.445 285.106 579.311 cv
279.619 578.547 274.756 575.692 271.416 571.272 cv
270.916 570.611 271.047 569.67 271.708 569.171 cv
272.37 568.672 273.31 568.803 273.81 569.463 cv
279.708 577.269 290.858 578.818 298.662 572.92 cv
299.324 572.421 300.264 572.552 300.763 573.213 cv
301.263 573.874 301.132 574.814 300.471 575.313 cv
296.832 578.064 292.49 579.512 288.007 579.512 cv
cp
f
246.661 586.807 mo
246.661 586.807 247.309 587.112 248.385 587.709 cv
249.473 588.264 250.979 589.081 252.804 589.984 cv
256.461 591.776 261.303 593.921 266.345 595.445 cv
267.599 595.849 268.874 596.183 270.128 596.521 cv
271.389 596.833 272.635 597.132 273.852 597.393 cv
275.082 597.659 276.208 597.859 277.349 598.029 cv
278.471 598.191 279.546 598.333 280.548 598.427 cv
281.528 598.5 282.525 598.591 283.264 598.609 cv
284.114 598.592 284.862 598.623 285.477 598.639 cv
286.707 598.678 287.42 598.75 287.42 598.75 cv
287.42 598.75 286.775 599.064 285.632 599.521 cv
285.06 599.745 284.367 600.031 283.563 600.305 cv
282.649 600.606 281.75 600.824 280.668 601.008 cv
279.607 601.199 278.441 601.355 277.199 601.415 cv
275.975 601.474 274.61 601.462 273.286 601.344 cv
270.607 601.129 267.767 600.592 265.018 599.744 cv
263.649 599.306 262.291 598.825 260.999 598.246 cv
260.347 597.973 259.71 597.677 259.097 597.354 cv
258.475 597.051 257.869 596.733 257.292 596.385 cv
256.121 595.726 255.034 595.011 254.043 594.285 cv
253.039 593.578 252.155 592.819 251.357 592.111 cv
250.547 591.418 249.866 590.71 249.274 590.079 cv
248.67 589.461 248.201 588.852 247.802 588.383 cv
247.053 587.405 246.661 586.807 246.661 586.807 cv
cp
.968627 .54902 .454902 rgb
f
236.977 532.942 mo
239.548 540.871 237.235 548.727 231.809 550.486 cv
226.383 552.246 219.899 547.244 217.327 539.313 cv
214.755 531.383 217.069 523.528 222.495 521.769 cv
227.922 520.01 234.404 525.012 236.977 532.942 cv
cp
1 .686275 .6 rgb
f
232.256 535.18 mo
229.499 535.777 228.371 537.232 228.461 538.751 cv
228.568 540.554 229.976 543.24 232.444 544.602 cv
232.036 545.19 231.481 545.616 230.772 545.846 cv
227.823 546.803 224.274 545.015 222.539 539.662 cv
220.803 534.313 221.788 529.198 224.738 528.242 cv
227.688 527.284 230.521 529.827 232.256 535.18 cv
cp
.968627 .54902 .454902 rgb
f
273.435 531.292 mo
273.026 534.227 271.24 536.402 269.444 536.153 cv
267.648 535.902 266.524 533.322 266.932 530.388 cv
267.341 527.453 269.127 525.277 270.923 525.527 cv
272.718 525.777 273.842 528.358 273.435 531.292 cv
cp
.14902 .196078 .219608 rgb
f
308.789 536.211 mo
308.381 539.146 306.595 541.321 304.8 541.071 cv
303.004 540.822 301.879 538.24 302.287 535.307 cv
302.695 532.373 304.481 530.195 306.277 530.446 cv
308.073 530.695 309.198 533.277 308.789 536.211 cv
cp
f
316.071 522.709 mo
315.623 522.709 315.181 522.51 314.885 522.128 cv
312.514 519.072 308.515 517.357 303.89 517.409 cv
303.884 517.409 303.877 517.409 303.871 517.409 cv
303.051 517.409 302.382 516.75 302.372 515.928 cv
302.361 515.1 303.025 514.42 303.854 514.409 cv
309.427 514.36 314.302 516.483 317.255 520.29 cv
317.763 520.943 317.644 521.887 316.99 522.395 cv
316.716 522.606 316.393 522.709 316.071 522.709 cv
cp
f
280.89 514.289 mo
280.741 514.289 280.591 514.267 280.441 514.221 cv
272.968 511.885 267.23 511.791 262.908 513.935 cv
262.166 514.304 261.265 513.999 260.898 513.256 cv
260.53 512.515 260.834 511.614 261.576 511.246 cv
266.626 508.745 273.09 508.78 281.336 511.356 cv
282.127 511.604 282.567 512.445 282.321 513.236 cv
282.12 513.877 281.528 514.288 280.89 514.289 cv
cp
f
367.415 748.557 mo
380.228 748.638 li
393.482 748.72 404.294 738.043 404.377 724.789 cv
404.635 683.833 li
343.824 683.452 li
343.566 724.406 li
343.483 737.66 354.161 748.474 367.415 748.557 cv
cp
.909804 .227451 .227451 rgb
f
408.967 738.22 mo
409.685 737.276 414.149 730.72 416.741 723.201 cv
418.989 716.68 416.827 705.867 416.738 705.088 cv
416.738 705.088 407.174 693.331 404.581 694.805 cv
403.275 698.224 404.518 704.916 404.501 707.592 cv
400.299 709.336 396.332 710.811 395.155 711.035 cv
385.624 712.852 389.909 719.531 396.176 718.456 cv
397.679 718.198 400.7 717.513 404.179 716.569 cv
399.047 718.801 393.394 720.964 391.948 721.239 cv
384.491 722.662 386.612 726.877 390.013 728.273 cv
384.312 730.379 387.256 736.367 391.37 735.647 cv
391.484 735.627 391.615 735.602 391.75 735.577 cv
388.113 738.076 390.857 742.857 394.558 742.21 cv
398.996 741.434 410.759 737.242 408.967 738.22 cv
cp
1 .686275 .6 rgb
f
376.664 704.559 mo
374.42 703.992 365.736 702.471 355.102 702.227 cv
344.139 701.979 329.127 708.396 323.813 711.768 cv
317.585 719.145 319.454 719.436 313.915 727.518 cv
310.039 733.175 325.515 747.044 337.761 748.236 cv
344.156 748.857 353.805 744.65 354.64 743.449 cv
355.191 742.656 364.257 738.559 364.713 737.729 cv
365.58 736.152 370.724 738.85 372.172 733.38 cv
373.438 723.889 381.475 719.295 375.795 713.984 cv
384.033 713.027 384.904 706.633 376.664 704.559 cv
cp
f
337.761 748.236 mo
312.108 807.443 241.958 846.17 186.675 821.111 cv
134.572 786.453 147.4 660.619 175.278 633.125 cv
181.302 627.184 198.868 639.166 200.442 650.887 cv
207.235 701.476 238.188 664.948 241.888 764.124 cv
261.13 758.449 277.03 736.855 317.962 720.68 cv
325.52 734.52 332.303 737.874 337.761 748.236 cv
cp
.898039 .717647 .207843 rgb
f
200.738 650.84 mo
201.438 654.668 li
201.672 655.945 202.012 657.182 202.292 658.438 cv
202.908 660.935 203.702 663.385 204.601 665.779 cv
205.583 668.136 206.637 670.465 208.035 672.583 cv
209.394 674.719 210.954 676.715 212.738 678.524 cv
216.257 682.18 220.449 685.305 224.087 689.209 cv
225.927 691.128 227.612 693.226 229.098 695.449 cv
230.196 697.129 li
231.195 698.865 li
231.886 700.014 232.452 701.219 233.039 702.416 cv
234.186 704.82 235.18 707.288 236.043 709.791 cv
236.516 711.032 236.878 712.303 237.264 713.564 cv
237.656 714.828 238.035 716.095 238.339 717.375 cv
238.657 718.652 239.008 719.926 239.298 721.209 cv
240.119 725.065 li
240.662 727.639 241.06 730.229 241.517 732.814 cv
241.871 735.407 242.29 738 242.589 740.598 cv
242.867 743.195 243.215 745.796 243.44 748.397 cv
243.664 750.999 243.936 753.602 244.118 756.205 cv
244.66 764.02 li
241.103 761.463 li
242.693 760.826 244.311 760.339 245.85 759.521 cv
247.417 758.824 248.934 757.943 250.459 757.09 cv
251.975 756.203 253.464 755.236 254.966 754.283 cv
259.431 751.258 li
268.425 745.021 li
271.45 742.939 274.543 740.915 277.668 738.935 cv
279.215 737.922 280.807 736.972 282.408 736.037 cv
283.993 735.079 285.604 734.164 287.235 733.279 cv
288.855 732.378 290.469 731.47 292.146 730.673 cv
293.812 729.857 295.452 729 297.133 728.223 cv
302.212 725.977 li
303.901 725.229 305.646 724.6 307.367 723.932 cv
309.952 722.944 li
310.819 722.629 311.706 722.363 312.582 722.071 cv
317.852 720.401 li
318.01 720.352 318.179 720.439 318.229 720.598 cv
318.274 720.738 318.209 720.888 318.083 720.953 cv
318.072 720.959 li
313.206 723.53 li
311.574 724.356 309.968 725.227 308.378 726.126 cv
306.792 727.034 305.172 727.861 303.604 728.785 cv
298.905 731.555 li
297.34 732.475 295.818 733.468 294.275 734.42 cv
292.729 735.365 291.23 736.389 289.709 737.373 cv
288.186 738.352 286.683 739.362 285.204 740.412 cv
280.748 743.529 li
277.777 745.611 274.876 747.801 271.927 749.957 cv
268.983 752.118 266.038 754.303 262.972 756.4 cv
261.476 757.479 259.866 758.463 258.306 759.489 cv
256.709 760.482 255.085 761.452 253.405 762.354 cv
251.708 763.242 250.015 764.13 248.193 764.836 cv
246.444 765.653 244.521 766.164 242.672 766.784 cv
239.211 767.944 li
239.114 764.227 li
238.915 756.498 li
238.835 753.922 238.668 751.355 238.548 748.781 cv
238.433 746.207 238.171 743.652 237.986 741.085 cv
237.779 738.521 237.454 735.977 237.194 733.421 cv
236.833 730.885 236.53 728.332 236.086 725.813 cv
235.415 722.035 li
235.176 720.779 234.878 719.54 234.612 718.291 cv
234.36 717.037 234.037 715.808 233.7 714.58 cv
233.37 713.352 233.063 712.113 232.65 710.915 cv
231.904 708.488 231.037 706.104 230.029 703.793 cv
229.513 702.643 229.016 701.48 228.403 700.383 cv
227.52 698.716 li
226.542 697.105 li
225.218 694.975 223.744 692.933 222.069 691.035 cv
218.796 687.186 214.754 683.886 211.232 679.913 cv
209.457 677.949 207.895 675.765 206.571 673.468 cv
205.205 671.186 204.216 668.721 203.313 666.252 cv
202.484 663.754 201.825 661.219 201.321 658.65 cv
201.101 657.363 200.82 656.078 200.652 654.793 cv
200.146 650.934 li
200.123 650.77 200.239 650.619 200.403 650.598 cv
200.562 650.575 200.709 650.686 200.738 650.84 cv
cp
1 1 1 rgb
f
804.085 756.965 mo
800.52 751.544 794.053 752.707 782.945 755.856 cv
767.03 760.371 715.638 755.188 715.638 755.188 cv
683.471 778.723 li
721.614 790.509 li
726.367 802.731 738.217 806.611 746.862 801.328 cv
801.647 767.842 li
805.143 765.683 806.344 760.397 804.085 756.965 cv
cp
1 .321569 .321569 rgb
f
509.806 742.661 mo
569.578 760.242 587.229 766.017 714.272 789.208 cv
730.315 755.523 li
630.282 701.625 561.33 668.848 483.155 653.303 cv
439.764 669.307 338.97 815.271 313.805 867.281 cv
302.935 899.24 368.024 943.808 390.776 935.371 cv
425.409 922.529 484.029 830.77 509.806 742.661 cv
cp
.14902 .65098 .603922 rgb
f
373.475 666.322 mo
379.868 673.797 371.796 680.523 371.796 680.523 cv
371.796 680.523 388.024 672.014 380.574 661.363 cv
373.611 651.422 368.272 646.484 397.173 629.467 cv
397.173 629.467 351.809 640.971 373.475 666.322 cv
373.475 666.322 li
cp
.839216 .568627 .462745 rgb
f
384.896 599.08 mo
384.896 599.08 398.663 613.068 371.84 634.576 cv
350.325 651.828 366.932 661.672 371.829 672.908 cv
359.269 661.4 350.057 651.267 356.241 641.842 cv
365.309 628.005 390.45 621.297 384.896 599.08 cv
384.896 599.08 li
cp
f
520.467 704.156 mo
520.467 704.156 520.59 704.786 520.806 705.887 cv
520.918 706.436 521.04 707.105 521.172 707.873 cv
521.292 708.645 521.348 709.547 521.451 710.527 cv
521.498 711.021 521.546 711.536 521.597 712.068 cv
521.611 712.597 521.627 713.143 521.643 713.704 cv
521.667 714.83 521.701 716.027 521.6 717.255 cv
521.518 718.484 521.492 719.774 521.271 721.052 cv
521.102 722.341 520.919 723.653 520.635 724.947 cv
520.402 726.255 520.135 727.556 519.857 728.844 cv
519.625 730.146 519.219 731.375 518.803 732.555 cv
518.311 733.703 517.771 734.787 517.149 735.756 cv
516.532 736.727 515.909 737.619 515.251 738.391 cv
514.617 739.175 513.948 739.837 513.359 740.416 cv
512.746 740.982 512.19 741.449 511.694 741.807 cv
510.719 742.531 510.045 742.842 510.045 742.842 cv
509.875 742.92 509.673 742.846 509.594 742.674 cv
509.566 742.614 509.558 742.551 509.564 742.49 cv
509.566 742.479 li
509.566 742.479 509.658 741.775 509.893 740.631 cv
510.006 740.059 510.16 739.379 510.348 738.618 cv
510.532 737.855 510.762 737.019 511.007 736.11 cv
511.542 734.316 512.143 732.262 513.021 730.178 cv
513.441 729.126 514.033 728.098 514.543 727.011 cv
515.086 725.933 515.606 724.819 516.01 723.664 cv
516.462 722.521 516.818 721.351 517.165 720.19 cv
517.544 719.037 517.813 717.879 518.109 716.756 cv
518.44 715.637 518.588 714.529 518.817 713.48 cv
518.924 712.954 519.026 712.441 519.126 711.946 cv
519.191 711.451 519.254 710.974 519.314 710.514 cv
519.426 709.59 519.571 708.742 519.627 707.968 cv
519.663 707.189 519.702 706.512 519.746 705.952 cv
519.823 704.833 519.868 704.193 519.868 704.193 cv
519.88 704.027 520.023 703.901 520.191 703.913 cv
520.33 703.922 520.441 704.024 520.467 704.156 cv
cp
1 1 1 rgb
f
504.18 714.475 mo
504.18 714.475 504.9 716.159 505.855 718.711 cv
506.346 719.984 506.925 721.468 507.484 723.072 cv
508.077 724.667 508.621 726.39 509.194 728.104 cv
509.735 729.826 510.604 731.479 510.992 733.117 cv
511.354 734.763 511.338 736.373 511.238 737.77 cv
511.128 739.169 510.867 740.371 510.604 741.23 cv
510.35 742.087 510.1 742.6 510.1 742.6 cv
510.007 742.787 509.779 742.866 509.59 742.772 cv
509.563 742.76 509.535 742.742 509.512 742.723 cv
509.512 742.723 509.076 742.355 508.498 741.674 cv
507.912 740.994 507.188 739.998 506.523 738.762 cv
505.869 737.522 505.206 736.057 504.874 734.405 cv
504.567 732.748 504.695 730.887 504.497 729.092 cv
504.33 727.292 504.134 725.498 504.033 723.799 cv
503.899 722.105 503.831 720.513 503.765 719.15 cv
503.611 716.429 503.592 714.598 503.592 714.598 cv
503.591 714.43 503.727 714.29 503.895 714.289 cv
504.021 714.287 504.132 714.365 504.18 714.475 cv
cp
f
661.24 921.855 mo
661.24 921.855 li
620.365 921.855 587.23 888.719 587.23 847.844 cv
587.23 847.844 li
587.23 806.969 620.365 773.833 661.24 773.833 cv
661.24 773.833 li
702.115 773.833 735.252 806.969 735.252 847.844 cv
735.252 847.844 li
735.252 888.719 702.115 921.855 661.24 921.855 cv
cp
.839216 .568627 .462745 rgb
f
660.252 1179.8 mo
587.23 1179.8 li
587.23 847.299 li
735.252 847.299 li
735.252 1104.8 li
735.252 1146.22 701.674 1179.8 660.252 1179.8 cv
cp
f
175.084 1179.8 mo
418.285 1179.8 li
418.285 847.844 li
418.285 806.969 385.149 773.833 344.274 773.833 cv
74.0244 773.833 li
28.9819 773.833 -5.61621 813.729 .758789 858.319 cv
28.5527 1052.72 li
38.9766 1125.64 101.427 1179.8 175.084 1179.8 cv
cp
.717647 .435294 .345098 rgb
f
418.271 847.299 mo
417.977 806.676 384.967 773.833 344.275 773.833 cv
344.275 773.833 li
303.582 773.833 270.573 806.676 270.277 847.299 cv
270.264 847.299 li
270.264 847.844 li
270.264 847.844 li
270.264 1105.79 li
270.264 1146.66 303.399 1179.8 344.275 1179.8 cv
418.285 1179.8 li
418.285 847.844 li
418.285 847.844 li
418.285 847.299 li
418.271 847.299 li
cp
.839216 .568627 .462745 rgb
f
734.353 1113 mo
733.128 1046.57 li
732.551 1013.36 li
732.103 980.147 li
731.201 913.725 li
730.555 847.299 li
734.801 851.547 li
734.789 851.547 li
732.536 851.564 730.685 849.812 730.555 847.588 cv
730.541 847.33 li
730.447 845.691 730.463 844.046 730.271 842.416 cv
730.154 840.779 729.932 839.156 729.688 837.536 cv
729.596 836.722 729.412 835.922 729.266 835.116 cv
729.1 834.314 728.985 833.502 728.771 832.711 cv
728.396 831.117 728.002 829.529 727.506 827.971 cv
727.286 827.182 727.037 826.403 726.753 825.636 cv
726.477 824.865 726.223 824.088 725.928 823.324 cv
725.004 821.054 li
724.715 820.287 724.333 819.563 723.999 818.816 cv
723.343 817.318 722.534 815.895 721.787 814.441 cv
720.946 813.039 720.166 811.603 719.236 810.255 cv
718.62 809.184 717.957 808.143 717.255 807.123 cv
716.59 806.077 715.843 805.092 715.105 804.094 cv
713.629 802.102 712.011 800.215 710.334 798.378 cv
709.479 797.475 708.595 796.598 707.721 795.711 cv
706.796 794.875 705.9 794.002 704.953 793.189 cv
703.055 791.57 701.096 790.008 699.031 788.592 cv
698.002 787.875 696.967 787.166 695.889 786.527 cv
694.831 785.848 693.742 785.223 692.634 784.629 cv
690.439 783.401 688.156 782.335 685.831 781.354 cv
683.505 780.377 681.114 779.555 678.691 778.813 cv
675.02 777.835 li
673.778 777.58 672.541 777.289 671.291 777.061 cv
668.787 776.625 666.261 776.289 663.717 776.105 cv
662.451 776.051 661.146 775.912 659.909 775.924 cv
658.592 775.908 657.268 775.885 656.027 775.949 cv
653.51 775.996 650.916 776.252 648.373 776.564 cv
647.097 776.722 645.83 776.959 644.557 777.154 cv
643.297 777.422 642.023 777.641 640.771 777.949 cv
638.263 778.555 635.758 779.221 633.318 780.08 cv
630.857 780.893 628.462 781.887 626.087 782.934 cv
623.744 784.049 621.412 785.207 619.191 786.564 cv
616.936 787.867 614.809 789.377 612.711 790.931 cv
612.697 790.939 li
612.497 791.088 612.215 791.045 612.068 790.846 cv
611.926 790.654 611.961 790.386 612.139 790.233 cv
614.16 788.528 616.228 786.858 618.438 785.387 cv
620.613 783.861 622.915 782.528 625.242 781.236 cv
627.602 780.009 629.999 778.834 632.475 777.84 cv
634.932 776.795 637.468 775.942 640.023 775.152 cv
641.301 774.753 642.603 774.442 643.895 774.082 cv
645.201 773.793 646.504 773.467 647.822 773.218 cv
650.47 772.723 653.096 772.292 655.825 772.063 cv
657.203 771.911 658.509 771.853 659.818 771.785 cv
661.207 771.688 662.528 771.741 663.891 771.715 cv
666.596 771.734 669.303 771.914 672.004 772.205 cv
673.354 772.363 674.693 772.585 676.041 772.775 cv
680.048 773.566 li
682.701 774.193 685.338 774.914 687.923 775.805 cv
690.506 776.701 693.062 777.7 695.537 778.878 cv
696.787 779.447 698.019 780.055 699.221 780.718 cv
700.447 781.344 701.629 782.042 702.807 782.754 cv
705.173 784.16 707.439 785.734 709.649 787.389 cv
710.752 788.218 711.806 789.111 712.887 789.975 cv
713.921 790.89 714.965 791.801 715.979 792.742 cv
717.976 794.66 719.916 796.648 721.714 798.766 cv
722.611 799.826 723.519 800.883 724.344 802.004 cv
725.205 803.098 726.027 804.221 726.803 805.38 cv
727.828 806.915 728.701 808.544 729.627 810.141 cv
730.459 811.787 731.347 813.407 732.072 815.105 cv
732.441 815.95 732.855 816.775 733.176 817.641 cv
734.189 820.215 li
734.514 821.078 734.791 821.959 735.092 822.829 cv
735.401 823.699 735.672 824.58 735.914 825.471 cv
736.45 827.235 736.878 829.028 737.277 830.827 cv
737.505 831.721 737.631 832.635 737.805 833.54 cv
737.961 834.448 738.154 835.35 738.252 836.266 cv
738.502 838.092 738.717 839.92 738.823 841.758 cv
739.004 843.59 738.97 845.432 739.035 847.269 cv
734.789 843.051 li
734.801 843.051 li
734.875 843.053 li
737.199 843.07 739.066 844.969 739.049 847.292 cv
739.049 847.299 li
738.401 913.725 li
737.502 980.147 li
737.051 1013.36 li
736.477 1046.57 li
735.252 1113 li
735.248 1113.25 735.041 1113.44 734.793 1113.44 cv
734.551 1113.43 734.355 1113.24 734.353 1113 cv
cp
.717647 .435294 .345098 rgb
f
417.835 1113 mo
416.611 1046.57 li
416.035 1013.36 li
415.586 980.147 li
414.686 913.725 li
414.037 847.299 li
418.285 851.547 li
418.271 851.547 li
416.02 851.564 414.168 849.812 414.038 847.588 cv
414.024 847.33 li
413.932 845.691 413.946 844.046 413.755 842.416 cv
413.638 840.779 413.415 839.156 413.172 837.536 cv
413.08 836.722 412.895 835.922 412.748 835.116 cv
412.584 834.314 412.469 833.502 412.255 832.711 cv
411.881 831.117 411.485 829.529 410.99 827.971 cv
410.77 827.183 410.521 826.403 410.236 825.636 cv
409.959 824.867 409.707 824.088 409.413 823.326 cv
408.487 821.054 li
408.198 820.289 407.816 819.563 407.482 818.816 cv
406.826 817.318 406.018 815.895 405.271 814.441 cv
404.43 813.039 403.648 811.603 402.721 810.255 cv
402.104 809.184 401.439 808.143 400.738 807.123 cv
400.073 806.078 399.326 805.092 398.59 804.094 cv
397.114 802.102 395.495 800.217 393.817 798.378 cv
392.963 797.475 392.079 796.598 391.203 795.711 cv
390.28 794.875 389.385 794.002 388.438 793.191 cv
386.539 791.57 384.581 790.008 382.515 788.592 cv
381.486 787.875 380.451 787.166 379.372 786.527 cv
378.315 785.848 377.227 785.223 376.118 784.629 cv
373.924 783.401 371.639 782.335 369.315 781.354 cv
366.989 780.377 364.598 779.555 362.176 778.813 cv
358.503 777.835 li
357.262 777.58 356.024 777.289 354.775 777.061 cv
352.271 776.625 349.744 776.289 347.199 776.105 cv
345.935 776.051 344.631 775.912 343.393 775.924 cv
342.075 775.908 340.752 775.885 339.51 775.949 cv
336.992 775.996 334.4 776.252 331.857 776.564 cv
330.58 776.722 329.314 776.959 328.039 777.154 cv
326.781 777.422 325.507 777.641 324.253 777.949 cv
321.746 778.555 319.242 779.221 316.801 780.082 cv
314.341 780.893 311.945 781.887 309.57 782.936 cv
307.228 784.049 304.896 785.207 302.674 786.564 cv
300.419 787.867 298.292 789.377 296.193 790.931 cv
296.181 790.939 li
295.98 791.088 295.699 791.045 295.551 790.846 cv
295.409 790.654 295.443 790.386 295.623 790.233 cv
297.644 788.528 299.711 786.858 301.92 785.387 cv
304.097 783.861 306.398 782.528 308.726 781.236 cv
311.086 780.009 313.482 778.834 315.958 777.84 cv
318.416 776.795 320.951 775.942 323.507 775.154 cv
324.784 774.753 326.086 774.442 327.378 774.082 cv
328.686 773.793 329.987 773.467 331.307 773.218 cv
333.953 772.723 336.579 772.292 339.31 772.063 cv
340.688 771.911 341.991 771.853 343.302 771.785 cv
344.69 771.688 346.013 771.741 347.375 771.715 cv
350.081 771.734 352.787 771.914 355.488 772.205 cv
356.837 772.363 358.178 772.585 359.525 772.775 cv
363.532 773.566 li
366.185 774.193 368.82 774.914 371.407 775.805 cv
373.988 776.701 376.545 777.7 379.021 778.878 cv
380.271 779.447 381.502 780.055 382.705 780.718 cv
383.931 781.344 385.113 782.042 386.291 782.754 cv
388.657 784.16 390.923 785.736 393.134 787.389 cv
394.237 788.218 395.29 789.111 396.371 789.976 cv
397.405 790.891 398.449 791.801 399.463 792.742 cv
401.46 794.66 403.4 796.648 405.197 798.766 cv
406.096 799.826 407.002 800.883 407.827 802.004 cv
408.688 803.098 409.512 804.223 410.287 805.38 cv
411.313 806.915 412.186 808.544 413.111 810.141 cv
413.943 811.787 414.829 813.407 415.555 815.105 cv
415.924 815.95 416.34 816.775 416.66 817.641 cv
417.675 820.216 li
417.996 821.078 418.275 821.959 418.576 822.829 cv
418.885 823.699 419.156 824.58 419.396 825.472 cv
419.934 827.235 420.361 829.028 420.761 830.827 cv
420.988 831.721 421.115 832.635 421.288 833.54 cv
421.443 834.448 421.637 835.351 421.734 836.266 cv
421.985 838.092 422.2 839.92 422.307 841.758 cv
422.486 843.59 422.452 845.432 422.52 847.269 cv
418.271 843.051 li
418.285 843.051 li
418.359 843.053 li
420.683 843.07 422.551 844.969 422.533 847.292 cv
422.533 847.299 li
421.885 913.725 li
420.985 980.147 li
420.535 1013.36 li
419.96 1046.57 li
418.735 1113 li
418.73 1113.25 418.525 1113.44 418.276 1113.44 cv
418.034 1113.43 417.84 1113.24 417.835 1113 cv
cp
f
257.423 649.69 mo
231.148 646.545 226.338 628.967 226.338 628.967 cv
226.338 628.967 231.005 600.195 236.7 605.514 cv
242.394 610.834 274.815 618.236 281.105 614.165 cv
285.4 611.388 286.591 625.104 286.914 637.849 cv
287.064 643.773 280.772 652.486 257.423 649.69 cv
cp
.898039 .717647 .207843 rgb
f
374.207 665.127 mo
380.6 672.601 372.529 679.327 372.529 679.327 cv
372.529 679.327 388.756 670.816 381.306 660.167 cv
374.345 650.225 369.004 645.287 397.905 628.271 cv
397.905 628.271 352.542 639.773 374.207 665.127 cv
374.207 665.127 li
cp
1 1 1 rgb
f
385.63 597.883 mo
385.63 597.883 399.396 611.871 372.573 633.379 cv
351.059 650.631 367.665 660.475 372.563 671.711 cv
360.001 660.203 350.79 650.068 356.974 640.645 cv
366.041 626.81 391.182 620.101 385.63 597.883 cv
385.63 597.883 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (Warm, fire, fireplace, comfort, Christmas, girl, rest, loneliness-temp_01.eps)
%%CreationDate: 11/19/2021 1:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9?5dP1TJ51_[l_-';OJC2(28ao=p&."AG+i9P]_-=Rr9[8FV\%bqnh,6n3D0[J=D0)3b,J2Ijmb4"F8Ll=ep7PEf\$#>i
%^UH#!U1H5_?+2ViTc!:L[/]pIb0#Y=RGUYRBOtJgd':!M2([:S9<tR,)gGYn>o>Kt<r]P]Y5#\:U"sC+HeXt*:Tp$Dp9*A5QhfPu
%)XY9pq1_t]Kkk]6k%2*[nB:3:e*CYJX?o2NOtM44K<(XIr6F7+X\*)"ohXOm^O"7[o0#-E?db!V^Yaf<_l,'1k\NI::BmI0-0s3D
%U#QqfE?.;k2:oM3],==?f'o,Nejq_Wf75N#Ulc]T;R3=]!a4IF>)M^_(Ce,>RFQ[pi+Mbqrm-NE1tHK^FKcAMM^.Gg#/l^0gJ[3R
%c>kJIOO$s$,])ot9'3HsC@JLdA&Ch4Ctj-[M5B0Ep]\[g&0&Zc8Zs08Dm.n.c:ZZl%?m`b5oVf;$n]k+`nY-(JM4$?))cqpK45"D
%9pq6SBV[.D+>pKOde-eq^=4A:CT,U?\ADF?q://6NO7)q.W5$8[?6U0(C.:%00hu9aF)rnN<m7MI27\@*YmUh`Z#h)6i(`odq;l`
%)5.Kb\,f)5LomtXBenZek*KJiptohGrf(Mgm_E;;IdVEmY1Kkd>9Li<ls_rB.Jbo?d-*83aFp\RCO[qR`]E?,UdnJe$2N3\s,[+V
%SH'f3gJm_CYhAM)r2sW'N5<Lo4Y>Y1)J`_0)8h-V)S\NX)?:q]1eC[&$btA/G^Z28$IBo2AiA=.rZN24;4rYuL!0Z0D5sV45r08N
%PQaO.70:XI>S%eqs3J:Vf66;1moB<=[kYF2s1J><YU-:U8qVWgM6fLcn%NMdq`m<&?nUK[EP(KpQl4j'PT(Y^(7@Ye=1#L,]%;BQ
%/8)RL5^$t=Ie%Q`#0eC]Vr-lu%c,<lNo.E]^SRoIC9!CnRG!/5!O=1gY$dY-0\#*DZ+O0)!]ps!POUg?.sTLE?e8N:WXBSY;g2K)
%S&kPG]dd/U=\c8_oPqj*cP8/&p\gDF]W,6QNl-;[-$t$b8%?&H1p:(h*@[le)Bb%Mc78;#KSj*n"1[BC4aZ/fS]UouPP%u7T<@3]
%bJM#sMgl*<!S)<TK(lP>0:p^:G.(YQbLpHmL!;.VIp!OFZRfp)=llsQe9/$UlXCeLrmBi1Mp5KCS)H=(Mp2S4CfVtBV1euB.29!\
%\Vt1EA]pgkb@PKd0!gJgUtM!cN7aNa/7'gOlT/:2#Af->iEpDUGR83>3CF5S@N.]Brt=aO*:..Q$if3>6jis'=,^7_CIAO0'(5Mu
%_2&nfb%Sq0JB\W_r/5F7AV:@BdGu1A)(c`*n1VD<@F#Kmdq?!sj4!&mX$dWp&"=`&p_UPON+A<^F.@7F"e-ZqK%#Z8lsdmFs5G\"
%ON@P&jc`1Grl&K*,Q;8uAE(I^b@Z97$<a%D$V:u4@oHpFa(C9TJi4$aL&ar>9oY.VqA*mW9uK84K*Vf%70MjqL,h>T39":]`ag*0
%A9;5rj'QVT#f>[ib(V/so!'p:U^M/X66kQO-I5)7$&)1g_-9BW2EsZX2DQKu9jTMCi5_^Uc,BCYHe&3Zci3IV1IYl<c$7P?`4@AG
%5:4OHp9SPmEhU1?SdAk[HGCe3kWgPQFEo9/6M!Q^$X/>@^c;^AdcDWD`,rt_`Q5,jG,_JkoFI#<<3#kgVQj(YOo7'Ep,bCBIrMr4
%1/N4+s(n2'%ZftKj07F$'9)AKJ%6O\'cu&CI%L9HO6drn?7[j.G\$hH-2'D_Z@>L9O5"s@+oZ'NA\Z2;G!m<-UL9JNU']>n3PhV,
%dkSm-o\JWdMmgIUTbdgJkK:G/R:#AK'.qX<feFHkr/G!IMf?5/0G+6$Y+SXK]&UQ).j_]Y_45lRg>V7??m+$r>dV?UBi]D>7TLP)
%*-M[!>:#H8p_6HS0#BmE<*Aeo]<iQ"cUJ/Ziak*1Z8?-n'MnjkGb.h6rgIDIGt;^cc3[W+6KUWEq(0ZdRp]8R3r\=-3,.`E'8Y+<
%FGV$rkg1oicEXq,kR%3fXBEh'OV8Aj3FV`2;7\a4\J"O*":Mc3UPg!MEFsl].qWC/*;;e6!2>fYF/k_I@j+ppES3]HWOmJj0_EIA
%Z(VAIMZJTn"mA:,(:g4nclMVZ"eA5ORnFSiqLE`kKGYhc.K`"hs.q`EJ-Ppa\GSmm7mSb<SQZ?j88[o0/rtT@7klk?s2/?WLdocE
%_@abgW%'etZY;TLS.T'[2*tH!DRei`V4ht=?0"?5i&M-qj@el*cA+&A3FFTjc6;5b98c-.L1eHFPV0pr.!6;]jqQ=3O&IedI\b(1
%5N)^O7l@]4@X::RSZ&^L3R,AuXKCWP3Y7ZLB//X?gP_%+DMg9d)-H-Xg21TO("Y=>`:\QB&eLPZ+:V\0&8Z9r1jW[H2gH*W#nFq0
%cpM;C%S$O=!f!FCp6Eh37T'L9UcHlNN_ge<Um@E[EH!`]`'>NVQlj<9&eZ"VO*d:'ZHtGI2a!iam)XX^M/saT,7cX;^?O$<L!2>6
%OiEA!PrK?r<=?JK)cG>afVme-bn6`!\JY?6WRF0HM=66FqZs1>,D1n_Lihtg3^P1#1gP`VMOcOu,`*/mNdN2,b=RM?9W;V0B3e,C
%\GYn'h%MgnR?0HrKu/#ged8fF/:$4VqCQhX1Vo*gaUcj$c%h<WFdZg%c];AW=[bL>]]W0P`@r^5DTVdFL0ZR^cJu`1'3S9dGmlar
%_N($BE(cr<?X,A92Hk?,n.usrdmmW&W"<-qTL*:O(`t3!A)lU3k$X',BGLs\aHW!p>P8Z(PLQ;)L^Bj37HI]!5@;K_o=!W<R"h#]
%3L8$[1SHBDa=]dm7l7-K-/R\W8^br(7No5CrE2-,pt-"KJmNEl-\oHX$B0ock+qdK6fX#ABVM9mY)kTJ/N8HK2f/qmAr_le,9qjh
%31A-Q3Ros"7)dEud1KY<@l8#VLjIFXGmmU_8JhpK`6nB^m$TR^VZGo`gOeWZ+UX#"ndbjue5`I9%Ou26d;^88rkr7i?%Jm7&<Z=X
%r\:*8\o?@+1kM.\,]tB&C-ec>dLjJQ0Z'TG,*&?,O941ler^K*r<J004(9Es'3/Th.hE8f"*%CQ@=b@T(\;'O"*k"O$"kt4.cE$M
%5Wn&f+Y?'iffVZZK`As1^fZS61A[qX.?a%U/^n"X'nlhM8qc?(OHRE5!$6]I,"piY:!d2Z<H`IP[lcc\/C9p6U81!\#<f=@b.kkc
%%]:j5^m"(G_i>gq0>a(_h8bg0AmFW:L8f1#^lQ9pj?-tM8Ckoq0/NP]#`[nD(deFN8tu^Z@5aX0&So9dA)#4nP(cb1k>=>Jh\,bd
%=cG,)O>JKO?,BUeE9!Q5ZMJ2U\idi.-Tk+@&r"JcC*e<7-'c#t*-Y7KAlhh`OK/d:PV[d,Y'FOmj_K1EA&Y8n'NJVBUY.b^(8p'n
%qKOl0(aDX&5%r6H/f-!QOo(NUP)?$W]+:"bPb1EB$VnO[=]6_b!b3+<LITp_1.k]'UZS]m"^"9k79"PO1.kucdRN^8/T=mI[0oF?
%fT)S"<7kG9c<hI7B#>HX)AdUHjJm><o0De^$"4QW&\tp!1,#ClSKTsB.f5H!87Z48S#!V_2663K\=.rQ?#W<7D!^_S_iV<mA@S"$
%<,F'D_660?L&(ih+CFmM@H<JO3t)f<deAP5X(%<%/gom+0/eQX64*--/uMQVY-8P*,CVPhGt<K\*YrdToc,9c%-*k78"m`,/\EUO
%3)jG*SX\gKT2D4-X)Q->S+G;^Uiar(A>ZRc\'&ME1`LR.M%u`*L`RHb:2.OW^g%?@S+4"Iot+XDB$j$[T-sD8.L%ZJJZ4=--XW%t
%Ip'ld3[J_dMIPO8g/ou[,g)oXKKB:t9ZC_nEAYh:+Eg_HfeF3-JF\n/0n$,PoKE1Fo#(Cr.%c8YW/XJr\^;,8-JW0\VVnsX.::"6
%@gRr+Q:]gjUVkL".OQpZ.!RmUhij,k=A.*:!,jrUf;+qRCfq0bVHPu1bhn>'MFfdL,WTJk10r]E5=g?%^hNH2MFjS&3$8",dI,\M
%n;b$A:ug'8:,<+q.WM.%Qr#d)Gcj]JNX146V#VdjB>V(ss3P3TQ[5?F,8HG4*EHjVV88nSkUq[u,@!+H]eCF^OgAYWb]UQlI-2iA
%`#.)G5n3/^l4Tc49EO63rg.^phWMt.dd"UN4h(6CZEBsYV:G<:hM7YFJ:"Sn97.Pg-ba)U#A;!A]Llr\(9N!%W83K*`:;L#e_/*$
%<jEE?WCg(?E(nXT1-#g64-qFL:?"Bg#=3&Jhp'MNit3\G$M>F#%!PEF$@qS+refu#q`)SLN,[D-KN8FEfT[,_KlY=:An^geQXbDg
%K_KM3&>UF?Sm7+lhBA@-=F,_6)jJiW[PjGXj*\9L9>LeF-ld5nI_pR=UP1Z_kE$(h2/uU5d@JVjN:H20iN/Kd-B-=c&hm8J];51u
%cpA_C79'\q=95[K[.2&FN_!8E'TU?t6Y8WM!U4*E'Pae/+1A7!UeVaL4.Y4UqfbXsPEP;VhNs)qJ]:h49YAE&'b^0[^&(pGa3?pJ
%P>cF3(>!6i^B+V90l\&rj[G_:Gko-["MD35nm9amidHYRQ-q*?LHCCcI,8t.F<5:HB^^Yh-Subg"7gJQ6"Tm62Zm)a?S@*<!UoCY
%:S4HWA`A%FbThJMI1/KR6BC4iI7tGIa,78t/+BDOY0RK(f-J'8a#)X:P5`Xf5HO`B/(AjiA?$9_blPt;A`lSZGF=Shn*I+)7*%@d
%[]SceJXjXM*Dj0hPRi_73%!q*D"H'"a7JqcH9_=!W/ucpMlD\D-q@$BjaCh)n3nfsl9`<R5;pQa'LKhp7A;W0JuLJPLCe!jYE+>A
%@[Rd*Ol<<bi\=WGYpca_noO_?O&]^?I12J8_CfMua:^Tgk^lHJF<Pa39aUoa;?=U\_EI2TK2fl_N:A.5TPcPjVi,sk<YNl.P^/.&
%Qpuud3;/IFP6S>]X:3).q-h=9g&gc/d%k\CUB+S])TDS^`l6*f_tgp+"oOG9Gp*C61(`mUWPd_AB'8Q%=LXEQ&IU.^:J1YNgj_?*
%Y(cNj;6Lr;8M72&=WlM[:&nj5W-XQX"c\Ns?"#_^$^)!_!f_[?A0<&o*tA9])&W)G_fa\/@n__hof@!>,Z=]q-WLb5]&;+*BN>Zk
%+Be`$pM/oG)*CRtd\Zk0K1Yo'nebG;_ED?@')4]FPXI0;X,el+[mL%SE'.S=_K<RB:C%+JEBoq'I^Gc6K(HkpHt"1%:lB%oD2j_Z
%?8kP]NshMRPk[o*07F9ZJ@MWl6]k3hf7G=?GQE>]\C6*48OYls[#*KV8cb6rP_:T?U<4(VKQRkuruIg1*2;um+DM7f:6;Ua&<upW
%3LGEqP+/\=9L2nj0Y366*Sf@:UPd]d8O9E\_"9hs$Y<6JRY7KDJ8Z`t_STDg&FM!8FSmB=F-:&Dj:@FUOoUc@P[J>t?V]*!P=7l,
%Ad,].(oTelP_)e2.3R9<P#1!_%7n\>=BIO4,TpGji4S6fKq2;"((`rY62WBk(18O&MgqZVOB;uX$=LEj8Ic"5\]HlsPR^@m#Z(b`
%iU=:jMi;+U5X<M"]F;mUO@r%ckp$psiX*IDI$9q]*"\&>$:h^bOT>KH!:cQS\D\b]WR$qaK#rr)Vi1EX<QM-0G(G\#"WgA`Rp'cd
%UO]R8mRS$/$3pq"l-b-FiBT48)"R,e9u``bQhP@2Z^(63`K-,<%As;jJ=sh0O:Vn`+%XNJ&`H"Q8EM+<pS7;7;<N4H@7SoEE2.Jb
%cWfID9)$a2OgJCaaM?/;!2mV3ks3aK&&n/"CUaISPbnu/"0pf-8XFu0$+pe/DF-B,*s4*NXU+DslHh_qF<R?Z\3-pXlNLc\rQoQ:
%>_Fjt.Z:o%7`tcH?BTnj0Gom^@&QIYEF$.P+=Rd;U$kS;J'r!%j[ubhR?#4(L\%(qcLr0]YB&+edF>-<jKP*b_V8S]D-Den3[Q/.
%amm"X!0$XF,I3.s(M4?nXHElnn86h;CGO`ircA6s'>:">8LK&l*R^efOmla`=HMn@-`$p-0%f%[K!]\[VJ_U;Ab0.ROQ9AU)BSni
%gNC$X0'[=7EG99!7/]ndj`h:Tq669`/pX;`EnjnnnoCLc''VC/;HB],-^EnGdWhCoQPjcW1Rl*n1aYX:go#3%M*fB5k=fZq-]$"m
%K:P?o_O4-@UdccsBL<\oc1DVR?-nSr76R!Mh0@^&ZM?_eD4ADn&^bVuSP,B(VFX/2S8?\!`[^A<`!g];k+nl:[A[%19079(0]MYb
%A0\PPN3RM8,58@N0&7gAZFk##dRDY1N>^?XUhDd5;$tCt`%^FO+5mDVnt-f$a\mo#_V=5?,Ve<+`TXPt+,J2&&'UujANh]F-Ag!c
%+E39t`",OuZBTIn$=tN[O%UWS6V"%Z1_^uVNhAogP8[ft9S1;?WH#dbk\OZXL"IZS7LiXtl,3eh5a?]$=a5PN9Tk*DX::H)oc2<8
%<_BJD4q<I"/[V#Bln3Z&'RNg/Bt)o3?h:V_%m"q&pBR6RfH[U+E;?LC(Xu[a4K:XFo89)[/l*Dg34[p`%lsrt>5OB\XQHPM.mNXV
%YOpT*qLAHYk2behr)h.Dd_c/C(L=3GIDG<E:"H@heg>K@DKoGO_p6-,oFm6B4Jo['kh"PEB%R-:Q<Je7NHRhW3.Q7UC?D)=mA0"E
%[,JF*DMCmhI37#>KJO[2/F5NQV<ZY#p,YGa\qo(YL)AB)3gFG.YCDbX2uH^a(\H"%`[9#^Bt?G,ft;&YlFgfVTaV7AVjq&Mn$Ytp
%Cms0Gmj<,'DDsmKYQk#)aQ.62>r+El"HATLJ<TTZH,48QlIT=FF&T7foq-1e(hgjqWMHIZ<)4DeH7BbJpkj>87gMtk=pO(H6ES;:
%3WI:g=)Pgd>]m_th4L?uaPL+6<J?:$&*eR-jB&tH_8jl6c>U?*K!AliC)Q_\?@mfk*Pgh"7+\(]m,[usrGoU!a+m'#"lD,jnE^&C
%dAqH@VshTN"WupkFam.G[?Fbl]@gl6a\<mU[sg3uqd?ZeTOG"Xp#9g<2t]YJlaNgHQJ";!@iV#W5Q.414.KPU'kLr.ZZQbK[]ZBb
%rq%*2hWh:j[=:!,=j(Td<\OR2DI]i3\af";2uOHCLk`6&VbJ=foX*]$\CF-skb4b#&<*uf'pcC_bKmboI+D$jZYg_SFULBfEiDgR
%[U)[Z,W;)+DJ@&ZB*oW-c8Q**"B.eKn)2BbH-Vn9ljp[/",Qt,ra\X*X!SH(k^4]_Bp8(#%@SZ0^A"Ot`f.uuB8%!SBeijt^Gfi%
%1&[j*bd9"'R$5q.np5bqli.fPE2G?7Z1bLjY15`)f--NNN*q_#i<-^@aC1le8n0Xa"*GRfPMNHm1!+*"'-GPU3EE&(CQp9)3+-P[
%.p4rP&%WL*T-[o[0M7&Gm-klQ5m`Bka7">96DZpnCcZ'STtIHsR9Br?q+\2gE-UpV[YfMcZa7mBjpmejB"&>>S[$E*QC6PkR)iI_
%K=n&NWa5)LQ/"!GDCoqA=m'rW8mBKgDOK31;nHUU(IMZ"g+?78s-<5m<:FI[.5<nWj[Q&SZV?<69S=N3_W46rhb=c5CN._/):4%+
%Q3o!6Q9eA8RpTk!2SXX1C_>_&Y2='qR3I4fp,CDk8Rn'(T^(.oXjQht'(^9oY?r9FnHVtH=eQ$u^mF@^`lkD`laV^#"^5?`=^a20
%!6KJBO^A\)PECd3T,!*\Ooi+-.OhIE;Z9ke<Z9qt<!LSJ^.pQqLSVqr6EA^PeC,O@nJW-ipM:2D_PT-4P#I1lQ%,>SWorb]Ko4LW
%bPR\/SZ^l9Hejo4%+]H2(*TI@B_]#GpoE>bYBSnd*-^nS^QUCKYA"%rd;Ys3N7Y'g;d"`5bkCE\Q'c=6s0GJ(r_?INOdjZTq9LoZ
%2r5QGrN@+aS`_1t37FSmX0[uH<PR2\#/+@!CZS&r2;^<"l9a1ZQi9kifY"9`n#Z</"JL]$oplL\fr9I8cPEF?3H%q@7@iX#NT/j@
%;"%>I")g]g)8SV0D]D6Ki^Rl@Af1NF^d1bKK>'#OjP9XNl"ohDqaRbnn)#u#I[Z((@=;Yn4o1dnP)Hg]0dUb9;8QK,o[rV=qaeq6
%Y2HTg/D#uMCWO[VjBoTTSDoR5jVi.^.a'^1jVm]1%=(PSQYX[;3A^tVaLHigV5U@Gf8u>7aM0Jg_c:5Afh!'Z/_>uKlc.+jj5mlB
%Entt8Wr1CnXZ#D=Km!io8LodZ%:(\=@Jf:J)XY9dUY*@dKqZ=pV;4[B@ZFeLZ\U]FAN5H9/PSJHBg&f$+baDEFDHs^VF<#hI*QTd
%]R(p,hKR$iV8d1O+U`$&b6lq.6MAS1'Ihi,*@R,>b;.bV9XZL9/^%\P4D!]elhde)L_BY,n6P_Qp<K<'G/Ne;FT(K"]BcjoY)P+#
%B/AJ7Q(j`32rIc[lC$.FB!06IJWoicH?525M./co)4,&pFXfd!V0d=:`p]E',oT99crioE#@hkB.k8a%_d"!"nC8Tl+Ei7hh$5`>
%3DUf@*:kTdZ,;pP[9E+RQN$;;Ahb$Pi?c[abHgWC/A+Z5e["\M/A*MA0?_5Us'4N:QW[GLKi_]]rj")fb]*iu/A+YTGaVi*EHh-P
%bY8-&S0pE,>sZ&;\)g@bPF24SbFNuh`G[CIc-e@!p&chn4=FXp+'=Zf5mb^><m1dYoDZO_oGc3?h^dQkB=HdOVc>S=I<oo1dQ,U>
%F'LoRC$?V(:NQBQC"D'$aRjY"ko49[UZGFEmab=,VVpe2#u8Yk36`uW2"/j#?;i#RI)2jKE%[`b'g.8o[.r[X/G@.6Hk)EU_+DOP
%&#dA.:Dk'4iq'*Bridl!<*]50f7@O#L/%=N]F?b>&pO5$YUNnM]"eii\3&6Lj^TqjR))p[RLB/JM\K3bR`5h<s.5cPV84=76`SGY
%,MeKO'&'`scgRVeFT#ssI16Qo\eoI3a*=/6_e6^.<isbe=4nqfmAktC\_Y@]:qPaflM[@08iB[so/#3N9<?sNj=]P#oS(\fPkZee
%)O41h(/g(iM7$Z?jb1#32=Ji_cL!j.e'UJM`iHQJ.blW1G3AT//FYIorjk[D?fC#$J=b=O/0F,c]W6MW8ABY6d9V6tT61BWQI8^!
%P=<)dC'O->q-Dt.gtXK((EU&,fAiE5A2)Vt_&[s\:(!\!kf<'anN<NF`Q.?sK;-<jMO$!E0;$>V%e<IlG'O>gZ@Y<9+D=pErhli#
%hEelg8T&eYq=5$d7IZ4Zr[taXF.=oH\@dHAko?%6O>$&F?i%c2i6hS+Dd:3fnitksRU-;5ak5kG,bI$@r#VWC3;iQRZWKbTW-,dG
%heTl>f@)"bm(/$o&Tkbn"n4Nrrb7ZK>D)&EE:M7RO4]a;cO-Y062,-@n69V`(9oP$k?0+M.cZfGo?1G>`rM2sEsH0UrN'sR[EnaC
%IV%$oB]KXQCj/`pU_:[<lP[<tM*a5[QFuHJG:=T?Yn/fubp`M)Ui-9E1:I5Dbl`$*''J+cmDIJf0jE'A3jWV/]>rrRD8+95h1!Gc
%?&AE,ruH*ce=hSG7`ORrGY#hdMK!_+T9AaAW_>37kN)[,Ib7e<rrPDqih*Gf!S0l?#hS3FKC7M!4'YBCM8KJTmMUW\haEQ#F,S<f
%L==UCh:u3<)4_Ic'/#^h/UTg3QTPi%gA@>r/_@TjXFJG5L\oq.)X]4GF]-DY=Hjt^hkhti7U"-jRZn&Zb1T+MOh2lL=Z`Bhm^eeQ
%0?%bY@]&"1A!WbOjq(.)n<W!jY1Mshd_(->%V:+S)\2#El7lS72YUYCSLf.BWLI`M]e"RWEJM!8jVj+iL@\4&Fh,K^pM@,49f':X
%02MEdH9mU,o,%!8r;A_PEh3sgmp1G<h&Y;H>PZ7AXBTT;rFMMp9h"g0gp3;ZeRuG?GO.fV\Wt%DDYC\kZi+MDK+AH><,<ZJo8Pc^
%`*0Y+9S3X/RiNi!$7FV(j+?$lX?fha>.p3dWLR8/j*U`6RKZ?pmAs-:.5\[oS$TeC[GJ*J<3aMsjFX88_CCP3P&V/1^EP3U,8b8^
%.kJqB*_P;RQq@pjZP:5V]9Pkb.[<;@d.#K5Pp23#KiXu*o">a`K<9BXb&KL;)+&(!/#9ht?f'*C@L'/Shs7.uH<JFUJ]I4.K6XME
%1R2YP^-^&<hl(\L*mg9(Wh/sdqff37/C#HWZ?/-1;Q-OmiCglSA$a%HXaenRNP4!!0_)R/3br-fm#Bot0pKiqpPmu$"SD`P#..M_
%gsfO_QTFl1FY6*lIFiTo"UUJU\(%t93es_G.nnPGKe9*gAtXLG*cC^:UgbcDd.OF36(28nBK3&#poZbb[TXbO%U&9$s1$nPgpA$f
%lP,7N9?[(Q/YBGXHmqUj[!YNi\$UPSDu!@"=d^flJ(:U!hNPn4bt@]Y+`l\AHgOYVE)u0VY6<_'eC]L6>P:N5o2`;Jac^+Q_DX$q
%Cl4[u7Esst-!D3nVV,T<_n@qlO@\uqR(jFq=BIb9C(\=;F>)i_Zl:V5r\"#YnC4Eo36_7eVs_Y'CW#>Bh`Y7Pi.juph`e`Eng2o$
%rm,\)J7e1\-$.72>0jTJ^ph*1?Y>orka&EY?BBgBOtQMgR7@3N6'VDp0R$LFTeZ!bYaGiV?^h/tXr-3+?!k=RHFYKqh`9,q%gh[Z
%F!Z9NN&++R[+GnR=MBkq_I<7,cJL6IUGhI,E6oE:9J(cR]PG^Ub;XJ@mlJKX9S01Ao\Rj5'$V@cQ>bd\NO)aT#?j;<C?h?I^NJ#L
%,!(\t[rj=4C<SdS?#J2[9E2`]Wj1?ZnQQ(ija4i3EdIG+?=gT*Bu.H%ju4'Y(5F?^>\t'n[C^SML46&gh>#mPUOVeI2eTMl`_7P7
%o=jfC'bY`fk*$L'W\,e?1XC30'ofa4Kq1;%d7Ao-ZD'(_3U`^,r3E'%XD#fsB9j9lAOU*+.N6H8WbA1pAm*NKc\_oi;A,V2TsF-a
%*`b9PM`hNl[X[skn7K$,GO]GhbK"Gk-TrYZI]E`[23A_AkOY.Q/_j"(O@aZ[:0T$F/DlBYDr6I1b8>R$?A0Oe4Nj3@d[>m$0D$gQ
%XK]qCQMKAmhn+gB?A`u?RIAB*$?nSh]7VbX:9j\@RISN_j%I4aA\toMpm)6D1>uFaI*70rSg14Y.H.mCO.6/V9))*R5^c>sn7WYd
%q_J/b'2QqM-(8nHjD?OD0<<b?gZ]O@>s!7AfCJBZe';d$F**2#eMKVdMkB5&]->WOhgDdfA$_K%V=C"n7eo,V][G:5QH&7j-C2@R
%pQ4/2Rrsu?1KtjtT#(#qI[>X>n>fXYi%eIcadREZ:U/3ZE,1#+BnG83Z!U+lOFF_Q3-HTeDP_;L*7'3iB;W1aUmLeG=>PCD<Z7[#
%s7P#+iB"/?Lt0APR5E"/rG'PZMIha`NRqq@NH;kn=45W'L+er0I^p.c:"/,]I*%>\9sNR@1q\_'oNV9(YHs<CVs-Kk.9:U.,1BCE
%ikN^a=#KPk1;`Z@9b8ZjcF$*2HQSNIVRAHJ.KqSc&lBJ7%CF19N5U+u[koc<>f6krV38*ofD61]S]0"Q?[OBF,&U2UFaa;).I*e<
%HD?U?K32W,$r(.kC>F%h%3F#8<d:F%bC2NICtG7!%UG\NmE(`?eS;d)s"dBN)E+-$<[g.lN1(U]'d5:L^M*M4M;P6S>$`gUo0c!t
%C0##Tg9!3k=/cUsK/$RZ+q0VQcO-dD^#aSiSgIS0)O9?+RYPZM9kTasV@^9gs#O/-`7rND'sI.opG2t6&H277DTXqq[@CrCiO.sq
%<*HTt]4Q!e*ltp<-_=pr#83HI?.t-u#+7n/?S$DqbYrpJQ"8.OY,a"/`s]?kV/j&RU+@BR[[;D=dYQkV\=Nl]Mio9k>`cWIWJ#$c
%pS-FLk?5>gHVr36ZeUJEgl(`QiGFm-;<BF]RBQ_RDXKqbAJ++^8):#T-u"cGP_aXr(M,##Sr:91WFTi5[JhfG77i-UU1jM/>btTA
%4Z03`3JDY$P*_+*iiH*@]U#'i]I.SJ%O6Gg/7pnp47uQ?HD[3MZ3Q37oAo8qon',2oOqrRJ;a!bTATE!`L5ZEG=S-s"b1jaP`MA<
%)S1E2kYf'.rN7*N'I6d!\tu*))EKQo/%Ga^\Lb.gJ\`RuM4i$nmFE`YdYEi@2`X!])ft*sJ,JJ0LX%pHghC6uIo#8W`b;EQm41Db
%mgaY&R:EG^?%Y^3kuM5QP>5`Bfn.ghe?>8An>7#hG%1pZ%OsCDVmk54=[!uo,!):PJD,hT+U4]RM!*9HWmUj(66GI,?U'%,S]c0Q
%kP_"^^Ba&nZISrT7DDYH<^2-tG_8Kc$]#;L\3MNb?>k!*IaCX-SDYKoJqF$9pCM?LJ$QM^BPL#Y>./3,3djj^9nP+%U07c9m!T?s
%:rTW1q!/L*I0\D35`!X(k0k+m;uHenStRpT(fcsGW<XiF^kOI&Nko@4[6NECQ2,6#3d`[O#CPIA"Xa]^^74VCUM]sN4>#0n1n3tj
%2>0I_9\Y4R[dKT]$XZlhekCaqRVH"/d7hIVL"I&;5nG<-:6pl<YMo6Q5""c1.QuCF\=1S(BkWI6#11e!fhp,H0S-B_i;<O0NhjAP
%O8k_NBKE;-X%4neE(gq"cN7Ymh81h2k*e80eSl7nT^#^<mD'MI^H%_44BTGDIb4UfdJ5>2@2:UT(rcb4@dfVW=W0'<e4`;"B'PCk
%&J("F%M#SnNhPLK]&Gc.+ckZ6iW9`2QSb1)Q^p,6aMu&t9Fr#1K5&u,NmiWUAKb,3__;Ob-DQq<,-@?'9+]p5RG.55Cdgpc!5eP6
%&`I&udD&8?N,'_9:i&MLE-dD@"4PpW+A,$]pnHK.JJbt;:oqn+6*"2(DJ)Xg_BDVFWp5IZ+;kmF[8]Ot!VJ3=3jXhQ^!kAK1a<tL
%<He'%.8k70rjnNq;b[LD)tXI_2AFS67q]J9CrLC:lIAAdj,c/=8]r,"ZmE:`U"qp1[BNlcOLp4oZ+["bVMk%CTR.X``=:,W32A,3
%!Gt-6JmLa7TiY&YkS<;+oa8oa:f'#<-OR1_$GtM%-THZGGE,:Z<!dboP.G5i(1$u%7H2UiVkI)K(I:^7UlGUS1aR]M=t!ESdo;/g
%L<P)K<*WuqAe=N,EQ.Ts;Q%+UWN@']<MZ`(dMbZVl^EOW:_Z>ECSbO-UbVr\9Pld=>R`+_<[&&Beg3p:Mub%)d$K?9A@d;Db;KZ;
%*MNBX=8lIr$A+Kj+[T;`X.b^]X+oXq/hpO2/6ha=g+/R*eq9R@X%Wf<cql4=2X).*feFJi;ONOK!fI[6R0oVmTIqW#8-/3N+TYOW
%D'67ll,;mm%8\sND@O^g(6MZ--nXN1Pc:Z#J>,J\!%hK1F_>arE.rXtWi?C-%]ZN>X"'cVP$7oTZ7Vf$"\+Xa!/B5s+pb^dFE[>o
%pDPbe"X)4#AK-q0qLk0a1>#:299JRkjl.t'Wdrhff`2^6=\ilB+ommRIZ&dZ_pTN_XG`ekMBOu6Md%eABFI5Ok%5#tf8uj;C2$To
%RK:un4I;o1b^,\G6:.Lmh_jsLC`igBKc3Pb)FTr"c<ZXr:<qG;8[#o`C:94)n2uM;5j?fT^RE9DObj:8YVQLeasGL#Y$pk7F:f)S
%0C2#B\?C]HBtu!P6k]^H@""5=QCSBdA'E6f0*5E"<Sp3TLHgsWRu0KD#4tH7R^rO&N>SKP\eCN[UbR&p^eErRoIZk;!!#os:;jV$
%L./c*1lG%nAJk]?<5im697]\QJMAiL+9HC&&#5lhFs;>rN^=Kk]TnKtfXdnXf.$p8%Rm0[I!*7dTU05DNkn+J"&6TI3"ZJ4n4-ti
%.OpU:\45\W>QbCaq?sX9$$BDDO]j)j72,oljYGY4"U,!rA7#E(,RL:c'h["u'qJrIksf'IL$h?g*6egr53es_`CtCoMK!E62Zh2)
%0'HQK:V'lug5hY2#oL`/"O7DfeP\qS*;#XMH>kSs,8D:HPD$*8`.\gmO/[mD(D+9Q09(*(%(dg5;FFhJK5@ee2G#c;8_7gG]X"NK
%A=LAfg,(;`9Eg8N.-]MTl^5Ok0gQ&*#-t01?(^8sX<Ye<VFs@=lFhWlrVQnggi,0iHMrW@ZDt-mk<GG;m07b,s2fDH(j+75*7&*+
%1;M/.7B[5t>e/W&!),6>B;Fr"!3%B5E-cVS$Q96bY5bP?IaKR=.Uaio@r$oOQ`H0N]urXRDJs/s71gHuM2<P9?oG^^c\3as<Lqto
%2L.(uZiuVaqu&@t]:^%`br=bdfi1b,J9Hoqjjp'6)F?4l9n0!9r-Lbh/JbNpVW2gT]1R(L)GVLdGA#5!l&ERRTBXT%[[dpP7m&;S
%?GG<d"7u7k7<H0)@=]2B-lAEFP59[%2s6CnF8s"HceVL\?L=pVORE@WjLn$rEd,a;$4.TGgT$ar3l</_BY79WVNtg,^8Q2bn5F0?
%.oql(9D@RPRYpb*g=]uGWTq'[FVVuS-_WM>`LNgqF&!9F5r)a@2\E0KpWKd4bR7UBXaI`D%\KeF+/4`>^XbX6el+]OM^C6-dG+j?
%A22aI)g^E4Hpeb.nE+1$9u$-s+lrJ'PB$WqA0+]qh'A908Z`;p#Z],.I(tQEpf?[-8C_fT[-r7iC=ibiO/CO@NN5aVe*b92H&]BH
%BO+Ip"fe,>Q3.R+WjE`$E9aud9Q&3qB?n.rhs].rlc6W^*N3^Bi0Uuk6!i7doJ>+Tp7O4UD8"Q@V]KFm8u,Y+E,.D]nN)+Xe#Uq"
%'#j6TU$9?>rN=c;FhB=jO9LB@=/#G>rKu5G6a,7ZC4"cOVLj"'nckt'B[4[g)%C0o0P4eKl`M>NfYkec+FU^m;`@3*<TQ57Cb*h?
%@cMD;Whhe'cr<sJ$XW-pYBM%]Vo6a,Y2Ai_J,5Q@s6kE6<3>o.X*UPts#HlGe3'Ze6;fN$ABM^9^>B"k;Et,=<3cfe"K-\7pML$5
%,VdB1q&hd%8Ko>pS.,67OMM6iW$-MB-[4XZXp<gkT/gb4A3lORp7gB*eM_aE$mQkiZmec=2qh>>j36s#)SL)FVA!3al?@Rq^Ocum
%h$7r67/KgW]-!K&0l:XW87P$H5GpJ]jRp;U7V.VX5Q+''Sgp.3^`Lj8HpDABfC-.d"0]57>$3.%hm\'(4"(UX%7/+F0K26.cDKsC
%%oP7,#0)&[\_hYjojK,]c0l\fHZV=%?O(G/g(gfB65F8e\%'5<'o,QFBq@YH(s`;C/.!Q)eZWV9^g8[1-q$eA49t2rmUC'8P8)3c
%S.@Y$d"u)kh+\n@jN4$C[tFAO;:GoTI^Q/t[N!Y[I@Lk;ff)0mbXj=Klh3,gY4"fE-]p-K7_Jo4!fJ(KK<;Y<.hWDVYNV.lD>m+f
%_oR@uHh?Bo+Va$R3l6c]"e&jX%-4V!]2cV7J9Y\l<P'>9D[Li@"S9]SCNiSh')UqGYLWqQaV9,*MqBF0"9*1i?'6%bc4N(-6V`CX
%9Lb7m/0Gr@S;q4o3Y&P\iQ?*\;)VubZ\qXmCf:s%Cr>Vsem$.QI%2(:[O6(K:F;Br.@m&+5qQn9M-R..Pk8FE-PJ&bD?Rp\UQd%a
%4iV35b+VJ/*=?nchBG*tpZh^q0J>_X6X"D^)9LJ(p/SPR)j>7F3&\%8FuZk\BZ*k.hQ1p*mp#mf[hIJ<_,YT(I[`5`O)GBq7IWS.
%EL;Q4A/]:&28+g>_dETRIFu7pB[tfSabW_:[$ECRV4!%or6XLObmG?qgJqte*(N2lA\3FJOaL7'Iac1B7`79,qp'?U2LC/GWElQ9
%=`u=4^QIoQ?MClee342ZB_R.N%pkEh@;%#PlRLc[@q@jiQ4@71Fq]rDh^pfri(ZKa^EL[]D+K=H+>H'b8[9F0'C,60fd^3s-]&+b
%RG9GRkO#(8CeWSY[0^0Md7QW]:3C$LCgA<&RDa@>pq5EBG!I99Xp>5;1TMfW)Oee`7`S?3cDZJ[8tD/'7^]9U_=hCY&<Wi,gM`#6
%flX=C'4?g3ngnm2;Vr)N>m35VZ*W,3BEj9_@B^u6+s$L"7PRn!X8t1J)-,XoZ%h7-2U`KdXuM2;6FmdAkr8o;[u-8s9P85A+QH&L
%`S1h@,]#r<o)qukom?At<`8@VBV2JQh.gbue?WA\2uGKA]cJtb':h^Z+2]Kc]%L[4E0"a3Bt(n&os'*(%M*@o\9IG6Q*KJd>KsUg
%Fi]DK;0QKm)FQeKmI#JA`%eM7"VVQ>!uq"r4'hu6,I*Dj\,VD#7aLQ4HCNRVcO$!4.\0&jk889\)HBtSZ*FdtqXm=RJi!O%?s(>4
%U`]n\3">u[N.)-j`j'+rS+U_:fN80OB$C0GMD:t[8:82/%ok$YR3UNNGRP"/A%$'0YFj=CdVX1T[D=9!%\_ONG*lA)^_BMi$oT_M
%bu\5\2i`I:O@A_?.9cK#6a`N5NFd$n,1_ohP+m(YP8'#<R3_#oXjt`u)\]:pCXhV"g9%WW&)6a]=+O-38_iS3\m]/!0pLogS;T]/
%32ZGU/cXN4hTn$a'dd!a0UX%NfFV:`CI2qK(&RS("I&3m2!j%CO::sFW.hAO5#saK0Y`\jM>bD^fh&XPmnPcE<sbr'Z"Dgc$plgA
%1qcXV2Neu!pF)<lP'@p(A2V729u5eJ*u4*U?F4H$U1Lr8)/!rf7;j1CWC:qPAN-%rN@6N5V!hnBN#iEWm'IKVgnaD6Z5sj!6IZ(I
%EA*$4Tk:\uX"mGc=<h.U$%sjTB%5CI[=WOs1!M%W/Wfs([V*!l[\(kcPR;Y>J@2@fePS=MB$G@d(es[EU1GZTYmot^Am!PIXoIcI
%:Ao(T%pG,KLc#98"P^u;.q!G%<TU7kEOCmEJ[jtNX%HJo`N*YuA9b's1)?o39g'?*/Bqj,05O<3OfX!mBJ]qSV;'gbFDl?f<'Ele
%EI+P%ng2i'o:]5]&g>X\?4%e%YD-mI\mD9JY&G\r1pEf)C5hc_@KsZ;D$nK>](P2?3pH0UT\5q2JYQO1r>bBlC,[;aR<-Sp`LL!_
%DZ$)un[a1HJ)b0d73Mbn$?$gGAcB:2>FD)W-h>i(AWZ_'9QdlOTMfC7*hHo'*Ir-]Q/-9=9oh>i^HHaGUuS*76)F`*/CSKJI!kf8
%N.TMdSR-[9<i4__f4?5<gW71G5mK!75c3Gad.=CrFXjYBR>/bbqh]+8_#6a9_H-\_puhgIn3O*G)/\"D)ju`l"<YF\gU1ueoj27W
%]#C09ZQfTZE"I>uFR,Jh8Qg_'B@4YI,S/6!CKZb=2(a0gr]C/FD;G4Boe\;@`q,qh.G0W40Vfd<F%f6l5uBX&8.htbgT>Y\VV?"b
%7A)Hk?9;uS`m'HD=!_i81!(ni*O[A%pX<e!><9c(`E*#'3?PV;VeqM@&ZI+3A^`2`R3NQ3HDu6"*N7JEU2gi`BJC.;5+20hfak<m
%QFgo33A+tYe0<(ATL]S\mg,0ke!@e.;h:qW*!`82=1`f0):\1KG/htLT+fAc&`441pTiYEi"(JfKBs0J,</EIIrX#>8[[]Z]E&>>
%O^cUlCd.8ghYGP5F<h_Hf_ASTF/6og?rum+j,9Bmo;^p&)\^F+@0F$2V!oR/Or8,?R*o51qfkN.d@>k'^8^<YZ7@B'q:MNhFf].8
%LI;p]'sbh8A8E0Y_6agYDT"4BG![Hcf<SnA=[i&>N2IPm6]>^=O@_4O&kXB(j!j][N3u>6jW1pY3YR]<?A^0>h^UG]_TD[d`n;=!
%Bb";]E*q'3SIl@t+&OGF!]4bIO%\J*>*fike@A2\IHC-_]UsWap`$1X1"hSHT5dgZVj]=6E?iD1.dMO["X_c8ojH$b3qgY"icrG!
%U74'(9"FV-U4#UFd"DiS@lsj`B7!9X7<[3J$O/3d$"qK1`coJbkj'\9@L5+qcFlI@A&s8eJ9!9Na'^buEnHIUIW&/\hi$qG3c&/7
%:=q"@08sb[ng:S31W^J0b/BLR%T.DEf?[LOK-2`]Q'-dND$FngQV/UpT%I.bTECF@C:9'XE@RQhK#P7%HsOrQG@!6gE6KNM[RuT8
%>;;_A4SlG!qsN_/*UisHU&O7d1V_PtDr,;;\*b9&mqo-i0%@RNn"KF:7EKk[^%Z.=fs1'pqrmY3j1XlR@[BaAZ*U/C`WJZo'u(Qg
%2jB)E4(#<ip3&AU]tN8qD$u*OgGujs's.uCq<Jj#O7m`+s1D0XqQ*T=Afk@jNHJ5!!!Croo#eE>EPGlYrZuK1gt]t.gIFDgK`96m
%1[DlM>VmM9bC=FmIL!b)CWbU9@W)co[q<C'rTSCkU6'dbH;qH2p6WJKg[^]Em9[63?JJX#PZRU[2&M)3<W32gUKIEacH\BB)Xk.N
%q3uil`r;o+..Zb&Z(`<<f\:iRp`8Z+-J^2"^&H`?Di]>]&#om/nsdr!LUm$$#;%ijpKhtB_mnT*f.3\Tq0KGf@pJHgk#V+ElhOU$
%hq%N/O5H00rnto)[tbK3Ft+6q(;JDO9=:N62RKK#H$6[rnCr-blX;[.=F'mjZb-3^O?5LQoE,\-gY4a$d:!l-kO"VL>c[G*\c25G
%B?P1AITj5JX^4`JFXm^^qX(^0FBL%6p>,l4m)Qj=:04IMotm""9NI4HY&8.Pq1a=OA2nrr>1kDGlooYqg2Kc6dTl>#PP*k%?"e^n
%hgJ`-[&mUspd4pCCTRS/c`AK)O=d*+GLl'qP3Q3LG0Sb%!rB?OUo7WA*#H)sh+-RRlQ<_uN.iXn;D6N&L/G,A*uOW[rE4E4J(oBQ
%HHFkW2G2k/DqYH`!$q?QZMs2nBgXC7^OF<eHM;N*Vu$AB=5mgGA*EA,Di.tr<W4\>_O#3KlKZhSCulT=1[jF`QUG^^4J!MC8*bLJ
%G>\:P?EA"Wr)*$t`t.dmeXP1&08c+BEYg["IdZi:jZ%IXkpQTnqoaa"E)H:<l2A*SK7HQfGU(Z5oeu0]Bk4h/"OfQAMm`.SPt28\
%H>Dim*pgOL>f*(@R*qhBr\e]-5:l8G]/OYemGiE:M+`k3momNC-QDCI[ehpWbp_j4kln%'F0R54AnV),@'s6UW-RLOgkJ&j8tC+s
%bdqQXm9K;Pk:R8AK4/N7\1*PHE;t@\*l9PVVZ"TeF)b(ec<S,sqP^`$\?X=CQEHJ.-Ukf)h,+$uV`V^g(e"LH*:;oA%one'h9BkL
%<8!Vkik]inj&U\MeN*ZWI$m(lRQiD@C57hD^:^J3$e=AEZD7eSfZuLXVshLJXo?_sO80S.&"^cf!Q2]8r0-.>m>;Ea^"u1fUFWb>
%GO=Ab`nOMOgI?\-F8sC*f6<0T0q.GKo\-]>]iV\aFDcOge^bc]]En&]n[BSt6)W&[:rn[KT,rGD'Veua#+ML-fp/<[qu+]Q1O&ic
%Ydd\_\lr\de/lB/EYld`lb0bD#@=t%]RCC/m&hk8cN-HqV2b1!Xo-8oILhAZ\>@@8O%3X^;NupVbk.Z+O,q(W5(/q_CNQ/hm9Y,m
%^_Asjm'E0/g"aa]k:IN?ZKS%!jkb^ikbN1ij$Ja8O=-*H[G9fG&XRH;/mkd;]-0SX!4R>P/b:H8<ep`6\;b_Sl1-4[<qk@FNJkqX
%+QVj4T]5D^Y!78Jl#\h-^9Q9>eEa<=Ltk.0E`%5[o#53d[q)Yh=i0=t8W1!k38Rl]2\)*(o'95QW4)<1rl!H9HaRFW^,S;TYJ.`m
%l&Y6q/88l1^D>>t_U0ERHNoY95#qN]mH<cSC>jF<HNqAU04IW^L-P9C+U`B<rNsk2[+BQr.:"!R:dA-SFd:_;/DK<!nP$RmfI:6m
%?*qu2*[/L1X?<q;'m@NM_#^<Zlikjf(0n+39lN.k1ae^p@KRY4fOPOlL,2R4$$:a&*U53rLAH^)#q)9#.fC&L__091"Jq$"n15aR
%4JX<>N3d#ICgHMB%Z#(!,RoL]Q*CWUphVL2;_oZ<#oG#/%!E62/*rc;+]:`Xns&VNIo9@ad/2cI@$i?0T-Xg#=LPG*e$f<12JW#N
%93S'7UlZ%%HkbKRb"Gu[3Ar,Hop"E-)C-a%1rL:OT-VfAVQqmL5fT]V9EVS:8,INPSPC?@QHmK>'tahf:m.:RCS-<t99#&N\HJ2N
%$)VqcQk:[F*1J_2P57mGDJ9_nKncOd,(R$/3e*H+%10R18#I"iiX%!dDD2.:o#u.([1iDV=:jD*>Api*0^%>9mKhWR.sG%+IL-&<
%b>-92j=]<'CmF`oobN;8?eN0sZC%\Y'X8'QYO%Q.q\N'%G*LI&l_V)Z?O5Ptq+ur'UduZ#7`k$oTJ:@m5n/)#FX_T7>tAX8k,lZ8
%'<Za%R;U\>+-4Q)rV#1nAI24uegZ#t@@[%b@[Au3C.@aTo,i]L9`EJdS[Hc#jNdW-c-lI9enXhnUV,cmF@=Do[MG`QCkRF:(I)pf
%L&<Ag2E^8>7VDm<.Rn&J>bq_EhPn.JbLrKuc\dM6-f:(JaI+]q*9:G?H]9a:TA,j#g\ouchrQTOOd-/Qr](pn(>85W`V@)t64T,]
%?uNLPk)98F=F8jchl<;tJrmS9UVMJ$?+^,NI'tje<J"Z?Cag&t7#iSQmrKl<iqIY`L&-"/CT#`g\VAK*M$dd=p<C%lWbn9^Af*Gr
%#ku"%-0tsBReM!7&eF;":cN]#]\Zn?c:3&\5PkWcgr\Tnc2*44<rL_#D9f=5W?S=a/P(B"*+mB-dptY4^*"3,W;6Ut1)r%%k;"O3
%A5pkEkSY'.:_-<.1beG*dt;=O+ALD"oj8I7V<WC&gZ:6#\GsCJ6.TAj'Q)_eNq`GIhV.-p%`9Tp,R48A\la<c^(48V>h%?)-)QQa
%cD!sNR1]>-qri3fIbEhd?_0A.QWf#[g5=X,KF$p^4P]eofTi5Lr9Mfp^ue#U'e][u5-3gO^H-jK0!83nM,<?hNthJ7E-80#]tEW`
%R<6)$TmaRBh@sikhqMIe[XWQOjQfGSfU.)T^HGnY_#LbW.do8rA\R;F[AWc9'1'H"frd4P$Moug8FV[K>m-A.K[G;Bcoci),qEs_
%qg/5:>OR=aiPOI+H26D_UmO+8U7Iq;cM+BsJN$B:g>8<G0(FL[n8rfGq'^JF3e93Vq+YcmS9A7lM1oBPHI0]$YB8GpYP*.r4O-Pf
%29fsmhl.&[^ZR6+GTU=Hm=nO<]ViYh?>KhS3aV*eH<R*!Y)SS`2/%:Ze6),jV&JZ^,33uC<\u?$W-DnKk7cBJRL-"a2%"GNmBj,s
%/t*liok,A\4;mQB75[?qpIJ3Br6aU8OVE*4bW6^XZY.h5^$SnYDZcVS@GNTG$G;f5,.Q>%dB4:phXBe;P!8TKDZ$]qOJG$']D^_f
%DGK(P2:;#2q<#dTFDI"XjHYil)<`/ngh4=Kq@fnV\Zep,:nXnF%t6Kbg[BU@GA8e6Y4oB^QfYB;rFRLmH\HTUo]!J%+06:.\`D(^
%;e6]lq0iKlpi34qG>=/H`ipL()%R:U'jk8eh[dc:h_pKI_"0^==LqI8?])7L+r5u-)suZOcJ6Tk.TK4_CU#:F=#7$]DS`oqp[-hg
%X1,WtUHR*sGB8$*];p;79m;[\4koh=?2s3>JEuZq+E+'SL\[jG>9Gjp:EXKLr2+kPF0cT'<I=G7$(S`D\+ep.`=G`e^BQ^]WcO_2
%?bG4Q0OQ]VBbq;0CmJ/WmTStIH?F>&Kma(V(FT/r1Z)jq2%Z52O4LZ)P7N"%*EO7NNjg7i5Z?E_h0q,b'fF[I<j-r\2u0sd<8<Oq
%b6?e7c!;#H2;`?o3/Y07UV=3co"%+\PE!hK/CEb&e&qP`TKL3RgtB['O'r'7cn!V<*r#B:b:B1Wgj6_BGZB"c49ulXiG\)=HKA)q
%TQ54E2r89I+msi.E"AIqo")J[q#&3]n[[H<!A\:u(<#U:[I`rtY#`2anAVW@44sZ<8bFH>="G?0hJ.KYAae+9g;B1K'_:).e^hc9
%1b<9\F"SLs4>1&*G]XE4Y(&'PrSF_SflEIUqu+rCrlHVuZ[KKhJ')&%4Lu=@RHFf@^IPr8`F\(cR:PjZo*?djnXs..I=^$jmf9D@
%jl4:6)3c#lI,3O^koscPB@j<V/`-[fo?,-$kSHA*V:IP/)](fm#'nqAgZQ%m]?`OJ9U'J&PXc%.q"`[brPQ;<iVo;_:HoeZ;rPmZ
%^IU#Yg!;M!mD1;D:J,J,!Nj$nqStrSO93:rrW"^0O)EUj[d)Xp<F5QAg<[J1TN7mdT>#\Q/QSA/7V'I?k-bUds5`l7[)U<8\%gad
%P0*uE+3aYc^M86Of%e/4n`i\o`BF(Kh(@e.Xnu'bN<p&O!%nOp^FF&J0"u_D]>\5=mIg9e\YReWbM0S6qgtm;<l#AQCfsQW\S$2'
%V.18O]Z/*U.;GBU!Hl,HTjc1]?QS"C6<?jEFuKW'+3Jq&rt61+\glTaZCsUVqZ\]o2:*KE)sH='8*X0*ZF\$g;#A-/.[IjC<an^H
%S.7XBeUqJZ^%qTk6+M5dHsU.D(gq"5q:Bt>rhC&T-'+)E>8VS36=A)&Io+5&kJc<GAp,bO(i8kY+,e@8TiFZ+<ji7B3FarHVR5'h
%qLUUoNRLPbD1!TUJ-Kq@(d6+=;-mJ->pT-;5!H&W@f8(6^,^H_VcMhWQD?`9$HFV]:q-Hm.gX3LXlu>EJ)4Pcs5JRUg^^."rM/p"
%&:qNM'VE`M-cOH`hJk8sEjI8&mk\aS?%0)f@6o!GX?`Yff:Y"E*T+!3jm.0Bi>WY9\Q86*/+7<0&+f^-8X!G*VckUS^>*pD:6Wc5
%rqlal1ihb\SJk-L2=(6a^3SW3/d5'u002<!oaLd.%J*?Pp$A7$-`=NH_&I7D_3j'<6*oDM5F-6)'H:*Kg[U._3\!,BhShf_iOF4+
%+IVC:cu@e6<i'ogI^(o,h8Q.5?V91aKDYK,qBO*p#EgFQ,gTi2#Bn^qI/pP/,R#1)'cg!8&fCH(aU\Zt%pfE7RZ-M*mc4''7tZho
%2[4OuKchP*;Klm(>]miPAkS-]p[>#,`ImIAIdqB"[>aFN#AiKNfC54C0pVTr%do1I%rlkP+g*t#$>t-BgO2mel.a:mIW>`YZdMfa
%j*WiM.gM^?G@PA2Y^s$TEj>T.ld_[+mAnf+8^i="q2_gH4n\E02aE@8PZUe#5Cp"_^KR^%l9)<I0DePgQ]:?4FI;pVNGIHCmtnaV
%Fo<:]Ph+m-dFVP_":9gL1EJbu]B["p><-?2f>i:F&Ek-Zn+V-Dn*_'"*e*o^oQS(,&"1EmJo:k'm90`Galb6kqs*6>g<9"i(UC4\
%0?TX[0:V(:a8SML7F*0+iPn@J%B&-dpGQq0(iWu7s.aZ*\TDtVHWRj<+4Xke/21PMIKbb$R4QXL'!VO_5N#FOiTAVWO)jZ1YHrZ4
%)mlBj7*GG#\nAuS_7M9_WGbf'?+o<c51U395tR9/S:g7%QdJl[3G1-p+0-acAAK,1:-[GKhd1,aMh<!$Dn^r[jRHiegr^Xi8%i$J
%hsTiKnusFkjY[meo>*jQg^M%N,Ob9trOf[A`dKbAl?;]$17c(o`</kL:;/ZtZhDd*le.?,></rX1?TbJ*gJXtjR9pm=u._o'"u("
%J$($DT)EnS=M/tKT7P]ZHa3V0ZLa%aAtVU<W#m^L<u.E[3SuAPYe%#F4GSIN3>h+L5OpY/TVSU$?L=Lem94F'X';7&D`5`gl7->r
%YKo+aL\GP@N!!kN;6@;lC,thrjcq';44\]((aZ<^ki6fd=DNChVa=<kiL='N]Rs5GMu>rMo/6:5j-gX=!,a61>cJ5#Is"LmkSLD9
%EO\r]gj$FOa!U$6U=>46nn:PN$J.5ua1-ll6m`prd'<:cm2s"ngbNnJr)3Ra+L:V[RY'oon*P*cJk33G)Ihaeo&K\6nr%+A2aIZ@
%mU<PK\Gj:.LMl`+Q7>rT<SEc.:4(:&c23Q`qj//@m7(jO?gPIsYFC1"7DZ]kbd7_6psu=/CZkV93'5]L^7*g0g\LCeDmp3/eDch\
%0,iCFc5V+7U,ObHVc?R3qC^\GM,I".8,GfIE2uq2hBVcsAKB@*Xc(F7+19P1c2?-eX6MiiYMXJ2Z7k]]EI"rg^\?tIlHT0hb)`:f
%E3htchn3$8U-d#L]FW-"S#^rg\#u\+s*GN!gP]qZ/CH=MUKd:YlrM=f)Ws;%Kp:F&0t`3:H<k1MFYG?@65ePapkSK>)VUn.?N-qp
%GD5$`gWeZ7s6.F9)&&]6=+C-\FdJO]>K\"oBS.GO/a6-hD[qYmmEFkWhg47EY(1GebI%a'J8ts_]a::bL(h;>[jKMg9&K[Aa+"<c
%^RE8e`9U9uIFTQhK516aT5(BcmtihVS#WK&=VkE\eVq9qgWjQFC1P,BfnPnPCu$!5%Jr+'d5SjVUBnA%0,de(q:U]%I'*O`4DRG.
%0d;_u^)[n@Fk)pGjX1/)F9folr3u,[74JssL8*oP4Td;D8>k[KL2b,Q.eo/ZHqdnt<`B2ONg[<EI:*=:$j/Rf/=TrkR&Nme-GCMJ
%6+Eq,9bU!,oJEkbi<#QU"^h&&l5Zl-1(H-b$u"S!<WL]fa3AGSNftbo)-G)9q"ibO$Y=cKJ.)9%Yi<5s7oOL6[V_KCW>PDR/'V[6
%#>dgml_o=Y&<8V+B\&3?B2-EhGfP\14b3$69jOTEeL\CM&-^06n^UkQBEQ@d1'^WCBB\$'$TRBG>S8(8R1YdqLk+JHnGo9&#S&c4
%#\\hBR1kjt(tSn`LMBp>.Zo"M:l+?Sph!/X!';(FHm#c5=rLNG?Q7-qa9:d-;0=s!^oLsQ5t2/3P=>_ldu?=-<IFHal+$gN#FaD%
%%O-\F$=jBOj<+`*Y7eS]V!Ap<5I;".APsGPecsMuR!;2#!)USlZ4T\;5S\?2\82o;<U.LK&\s]HCN6mR0IV0Nb,O\lYlK_.NI`s7
%"/;o<YQa:u0H^H:%Wi.eECpemd5V;0:rEE@*!$:jL2r#e'TQlRJ/'p00ceh1rUH/Y0oafSon8blC`qN7JM37P%#TS9QKrSOitsg[
%*sZ/7b,po%EY'[N,U7sM_3GT"EqKI;.0N@d9T=/qe$EUW:DEiGFF%Om1@K.YkY.Vqfee+k'Dc`*X)"-tmt>Tirh'&K[HM[:f4L`f
%N-+TTQ9*\2f*"6W);bVM<NIbG+c_gf%*QmT%QZ:Q0*Ds(3Z$V3A#]7+7Khu`1W?">?oJL91p3+OFPsE6\o:Du+i#nNN&BUf@la>8
%:q5-]V6qnZ5WFQ#[K&QN^=a9\Z/]S%&r?Si_rCS:@Zd?:lC2L][,YgRGmU47TPfWZQ\J>DKd`dj0Nf3!r42'DJ$XZ9)>jOsVD?s.
%\f,Be0SB/?btZ6!R<CYERLgFB`CKOa)I29:Fr&."!c,Ct^@.8-g=::_CV\tA212BZ$hd`4d+<oX!?$(^$XMfE@Ws`E,nn<VOHF4l
%*Um;p^@U/L.dNo%J1_a1UkG]rAdH4'*=O;,%fsUM-j.4]o,M^o`-Hkn0YThTYa5udl7*^dO4'c'FlkhQh*D9C+>t5oNY'i.r2Wqm
%f,te.!t.E;MP5i8$ZkF>W8c=V6'Hqr,@U-@gBb,/N`%8^!JrO=(q^gs+:&VV&Q]3QB7Lj($X`u]^g_/l%[]f)6C?ba^HiXNKRn!C
%mBY]%qML!^JdIlKi1#bU#6J)/*g-.!`L,)jW5$\--ki?W#eqN/["NFdU3"<PSXhjkFrhPYT!/%oX6+BK!c8%Q!_5RHc$$DfU>QUH
%K$1R;,pEU'*klV12$Wo>'t#7?6e_h"VaDF(@6;EQ(baTNZSVb@_R4Muph\FgMdPbrS)aT`=SO(AB]bt%!Va86i?es;5mlNR(=gFO
%>/q&rA8Y:2PD7Wo/uBGUUTQo,DQ+P6@^'7!q.q"&',tbLVD;!Rr?Y)EJUn<n%91;h+o$+`;^T=7WMU>M`Vt!hY"[!Krfna(Ni`7L
%kEEc>8Re:f7E<VfK*4K1)u&%t-u4'3]55ME%(p`RjC!:.%'s5>i?:7lD&X`jB7<,Iktk?j**b6%]-+04h4Q&OKfB\hGS!mZ'Z5&B
%=9JX_C_hE/(jg$6CC5>%"R+2H]SYU/'a5[FadNTO,kFSN$qH)7c@P=-dM,Bal<#D%&ptpME"#*-4ui=Bk.u1fB/>H+5\Ed3MpZB&
%\kU!I4s=!I&-cVp1ipoQq%$bI0Fs4P:gs"h3qs"M-P3d->6?7452:)o/H?"lo/m@$_Q+E1BadIRbN:MJIMbBb1):fKW(Q]]YS[?[
%/4LAq1DO.>%W5`r!"R7a0B,<:Y;rQ?R'sLOkW"_FLn[6dJ_(fCi&m)+\>7f:$OTWKU+b-*(cOCqHJ&!-8%.mro-OQD&B)3-e:R#q
%U3hK#N/^j?C^Ptr"GW8t5XF<tUab"PLhM#S!B?b"_48_[G[i0jjcP(Fl'4O_=]lIk(!8DJg3s]j`)He0@b\t@[(t14Kpd/(7XpD^
%_F+Lh_L`qigDkSK4SIkRQH]L;MZmADeL;s(6qL34E$n$d*FD+=M6s%f&]=[d$jU@!/AIs!PD\ujcjaB)9#2CEMF.[bKKd!0W\Ok$
%U"Zs"/e4PWb48^!cc54]4=mqGL4a4fUl82.?"]LVZtibr6+G1X)<M5tj#TjZ>nBBI_al4R<EK7(>+.9pa0N6B?nR8Q6+fc<.0'em
%[Sf@Y'`eW^:bVu'$edqSn#/q<J/^aO$N;TBB;7p^p5X<U3e/K=dU%SG/?1!=<<QF*B'BLD!D_0#($ZR!M9%q7&^l-Y<eXQVUG.3#
%VlZ%g,P'7'!!N,G*CAB=5W/ii5:Y#,>t<R%c,S;%V$TN)@4OF9Du><7Te\&Mr)`<%;QT_u3hJHXNJE#qFFdT6b,V1=i$.B-pL&*i
%.t[,U/eq:#r*c^-ZQ7+ZiW12,5,tQ>)%a3;_ZV-(.CBT#QpbX8=ap,N#p2,s$)Y43G&g_b(kNp>eF:FR;O<8p5pI;uE:a.M/0MG'
%_iD)M;lieF(3USs8e[<F_.;YF6`^n+0U42)m\DBW]gQQ%e4IJ5SPKS`s&J5\8#X1/QDp*`&';,U>f^0*5gM0`AeW=-#`Hd0":es&
%lnXgeE-,6K?.7c/#H9-e8uWXJFt(8gd6k.6F?u6:64(.t.E7RWJ8'[FlC`Wqc6rFJJ(=AEcK(=M0tD3nH&S+1P>*hX:pObpX&q`$
%NWZ%7;1_:H.'NIML,L#9C6_LefZe)6/4SnU+:A"1J<:.kE+uaHY7b"F'UVdeIpJ%*F+7\Z$)5;og%k)Y-dEu]i_Is:Xkr_0kt.tC
%P?93aq>]g`^8fqLkG+gj(.?db.u8o+kVBcQU6Sa=.shmkkiF4tn$-[!RolFc9ims9;-n<5]&1Rjhkff$NBcct:lpJOXpbWoJ:!bI
%aSXhe?`snWr!dA,n*iIOr)n$M<op47*I;MTUs%']VVf&W]70G&le`BpmG=KT4Dg<I?YYH^q??]J<ICVmfSK#)p)rR,hS>Wj8IAKQ
%Ys,a5]3&*Rg%qA%$g93SO&8KbMS<PW"_SPXq9ZOmPBeY2;sf*ga.cR.!`Dml^kF6J5Dk<!%$j?5B#u13E=p*_!YiL/>3u;O$W46I
%o@["*T)gN</1K$$.8<3bb:"ijK'C]WE3TG%A-BhK"7ldtiZX\'Ylkr2S2Fp?#p'ei'UFo>NYRNg_>m"4;Gbr$@e(NZ)D=8;=B`T'
%[8#7qTeD_('%kU9#QpIqQif_JC[qoE=<k(iR3VdEZqb,kMO5DLD$([Aka8807K@U:I7OccFr'M/YYAG\(18]LDq_5.<bMWc_BP%P
%\SR9*8<?tAiNRi.[.#HY[#DbV0?#]N!%QV.8Nh%>Um`Z8d3gWu-U?b!Qkg"$9kAU3H]S5m,f"!7<1AV:>@niZdh/?Onej:c9S"pL
%<E%+CX;MlkU245@=BD>A8]+FCq7'f:0[&H<P"[;0;m0=$d<(0:8i7XkRj^tOBGq:6;g$:C>9+:;._'"*Z,EZ=X+;aO\TJ#ljIsE+
%%W1B;@+WYBmC.?O#$)e//AcKpMDH^BVYsFM+,*_r%1&VWV^f#8J1&mo#]//7.3Jk"n3[c*Q:Q@ZEkm$k/TjPHN9_etQXa$.q@`C1
%!&b7M2G#H=1R*Gj;Fu87r/8NC+_Zh4#%)n@$DiW\ZE>)^@GI'#+_+4(<R`_0$;pImd9'fS(tBqfn:bI4WctE!<0<2U.IJ%J$=Zu4
%Z!s`\Ej0?[&8E[qgfiVHf,:kG'OG"HA;Pp&fsF1=Z<GnHfAHc&VP9np[<c6h$_/-Jllf&85U9U]MV)&HG;`T$HOMT)O.lM"ZFdpC
%^8o8EMolJ3"7'c5:##n[/^gGK4@/."Z62rN#>B2fiSG9nq/nPcbt5T-7H#^Z171n;[Q>0s=K\JJ"V\?(E,VkH/<Xrl9mCdaGBU3H
%JT&6>bnd;o>!F&^E,\.Z?snp9]LB'*c"9spE`ohdM/\22FYZ'A=tg#E/jjbCFQifg&jq1o)iBd9W?IS:'0J-.fPs\]CJJkF/^3@=
%Vfl$NaGqZ,hoN^:NYXZeAhdaifu`Lnq@#AqEeKo/DTU@5MHdk@dorGZ3c%G/Mofp,+LI?Ld5%dJhHRr]#PfO4?S!tjh@/(2K,`@_
%F@Wu&Jsl99Y`;@&"EPU4Lc@R4#<RIhG3D+`e)GfX;K[mTjm`KM86$BY>"&rkB:$M)3ps2:-`V0U-mJle_L6kfJ"lOgZ^<u)_-S'X
%P+k;fUFMBIgl[Im&""W4'FX8^gl>-M&JY9GgF?76LYRnbCMQ9IL:.R%3uH\N1ZVq[[YZO&?q=R5rWU2:AQXMXG2-%sHcV:19PK/'
%B-)BOO=+TuAB:=8-iq/oMCH^_DTO.3_.:\&_3c6nfIA#%\qE=ON]A)$WQ)+I\gE[Y0Pe%W#dbpM38p$8;r/?a%aHqV<.U'tp4=J+
%D#qR<"e#GNhD>SY1pV:L]qH+"#Xb.+W`Y@9(O3G?5trR0JjZK[2rGmE[`V$aJPb1`nX]!-dl4Wbf2%?6:d&7PU`BSXCp%+G64>Ds
%D-F/CLqP^L!csQ6;D$UqD6R.AK5;J$b?/YW=>M%lR:pRkQ%<eD/nd;7F;D0V>iX6_m05Ik4qP\sWeT)0@:fpUQGp.<ePb)/IfP+/
%W8'?6S8\0fYU5SP=$F0C6niKd30MsP:g-Ks-uPk\1hQNuItGHKeA*'XjAXN5(=.P="LU1):)ScYCZ?0Cg+%Ya1`9e>gbakU"p&E<
%J6Hn01L6[ACki]k:!bo?#*T?'+9KBR_Ek^+3YRB#1>5SC[0_^n$AVf$(_&/V)%6YaKSsiBR)T1_#M8eY@N&iX^[OQ>phh"=_Y0er
%m_FOM4M.u\KL8%,EKOOmdO5Zl^VPJe_4eFA>)"0^(7F10N.uFo8r]HB^SNd1d_tPm1,54`+W3UL&.tR+'0#^[Osi>@-+!\IejPoj
%TIV?:P/KnFXkZJ&#1)]]k+Pc$/mX`)PpAWqeP1LZ7OW("`pHr'/ceM4HD<6SXp!o'Q$3mcGWL.E2bZ=*F-7^J(mIsYWuZe3CViqJ
%8HB6;M5u*(dO&l+:rH-,5l2.PftD2J&;DqbgCk5&>Sbp^`WqWI7CaqU;n./93b\FXHNl1KEOeBrV@R'h_f%9VF[XG3UT>aqD;0nO
%jM2pH)%a:Q+%<ku.sCV68DSA:OZdFW@%*>$T!VfH<SWN4\Df,d(HM5H'UXm`A/&I9_8!b3DGOI/q"8jGl%[@L&YRLli:N`QXd[GU
%>T1P;/B;@5`);-lq*6/QS;gG`6;@e"!K9+pYpN1!E#R@V`2U=[@*mom`],_4_Uai=i4_7RUr]DTTK:]R."d>>./t+jMU=$2[S("p
%DUQF\.I79Vi+Z*f_c:s4M(jq0-P!(%m@`(q%QY#nnBMEAX!<EY/-AS$1!o80bX,rFi41eY_$e)d&JAK]@p%j1\.ID*,Q_IG5SfqN
%!>4!SHN[i!`[d0(0?Y$]UoGYC4,W)2VC<2]RKgN4MV?_n7gW6_WQIkAKBb@Zg_aKG="uHBdfP_R/RGk?pg2+Q@[MP,.[!KSFX$mm
%b-p_Ib(`2$_FuM\D3A:?XE4^P;T#M_^go/:&*XfpIKZY&dQjRf2_Yh;Tc0F%#qQCM#]3;IO[\u7"P,0Kp^Jp6,c(WB=FCsO-uf"_
%!ss#_&lF@ZS#f\m7(IJ/EXfZ5P9_-\/PVjFZs=ZI*d:-^N'Iqfq]_i1_=TUnK9tm/8Z72\l&Z^t]@Sm2$l^Z(]DubGVZ\bg.m(:O
%gn:+/a-Gm_rT#Og<*Ree]-ur@D$e#E(0Cta<!0U4,)iW>i5A3'!/?16erJe34J9U\EL"TG0W&q)flW2?ab7_<f!/[PEsc%Nhrls"
%R:Y;Q>uh&`E#6;J>:Ts_!OjksbUs&#"#./r1MWs=HD#@[8E(3d><4+sP0a9SA=79WgU\h5/trMoS!9f7&VU6&gW:uq(;_aj$?_G9
%Nr+[8+\N,La/0O]X7D2r2S4kK?lHd7#L*8!4W"S23h!Q%(p&?1kW:^K#fbT0CiBqtOSKE('>jOXK<cB$1#StH9PEju.2HE(b=FR3
%Eo)L^'W29hj0aKSiW>M'd3r.0JE^1VQAmlldW]r6Tt(E,Ki01C"e0D&Fs?>V@$%C-)\dT:\oAMS[?<Y8c&:$p!Wb)$QjsbEFp_0e
%"IE+")$@?dgBR,m`2^A*njD/?Gd<D-=qIP8faT[L5aSNNBoi*gKL0qA`XF/RjdHmG#ASlFE1qi'+u9\>@r/+3a1rV&%Z]i>6*DcK
%"O%;iQ/Z:YZ(NBP.O!_bJI!o*G0N!r&PW!r4=1/N@]<%O+nFV1-Nq0=$F)Z"&]PT\abI'onc!]aD:D<7D;t]2";<h1`GMVgH.$HG
%1jr)%N!L11@aQe[As.R4j],U#ltM8JS\uP-a+J]1cnn?eZ*gAl#ZDHc@(2!cB:T8WY/tTWO%#6:^V?D/I5;WK7X_tNo1b2K(,_N7
%EHP+m<->XD:G<Q66mDuY<%2:8a.E(9"Yqpe(\SDj=kXVEA60Gqb>joQ@5,:7-YfO[D">@M/@%Wo)8^J2_pKL9.YhGQ+'!/!q4`u`
%MZJqgf;0G)UB.LaW_pZh&M;l61`X3opcJgo9,0@J((FMK9T2EuC61Y,W.q/K8C36PmA0E+*9hPYZWP%p@)/H4?RU7IK.FJD?k7Q&
%&5Gp<%0k890KKsJa'iNi(34,d`aC.L)(W<P9SV*EX/W\L_2:\:,+E$4>,^gjr,R,Q!J78Q?f>':L>amA.':\K-S6hkN,2NG\"kcX
%7>-DCSeg)B&AcD=e4Y]DN`?P-NJI0b#$;YOcB+49O3U96&07AEJP-f5BMr:!.R(EBJ;rK%>U.7-F?c'96mWBP)tO<jLq?d0Ta=.m
%XG+2T/Bb>OlFZ+:_7^`'7'ObNZ3(mfGf,.IJ:SB1YamI6CJQX:SlJ&;5K=Mq:^5D&d#e=WP$fPC,-\3%Z7[o"'@BsO!8S2#;/\?G
%eWDEa_DIT)-En<iUXc'R\;8<CSi&rA2e]9eekci9=\+B.fRu-m@<@RAA.-:/+VMe(5eufqQ#/'MgYk#,aWM6VfYle=[3^F1!86@-
%U-LAMZ?in"N.l6A-G':6.LT45[RaUK+(DH\A&3\(o'2Y(RWN8kBhX>u_K$%'f!W'"X#aTWFE,#'7X&ncig(Q/i-l$I#c7*lSqoH&
%,%cuWSZ]&1:KmA1K!&[#DDVs3nD5"KDnHIEg9<<.rG7CGZud]JjOqc"L25Ygn-26`,%ij%7<XD^HRj)3SP"g"d=lb%D6f&$W8enq
%_gC0Xq]IrPfH)u@qpX2L3_0n?&NRLEma0E'@OpW'['JfJkXr%q*9tn.G\j3<!#q@R"<q+8<_U>W>:alS`CnbDHe-k:\#>m<d@j!G
%dA*CgYf)65K.Z=XAr?I62*G@KgS47*CdXH'n%"CZ9H,OXM(_/aI.)H!lP$-ScHt,TgchRgECQ]P;UlqiT_2uA@mEG<E5c!l]/ue"
%OXtr+COC,*K&^p9/5(Sq@bX+SZii3CZ,2LRQP2'2mla+4mL3r>'(D9/Bi_`OK4)q@Jh"u\E%p-k$!=OuZ\Lm#kkl=B$8moF8qt,J
%^K%]K-aGWu5XU].KWr_-_3RKX-#F"K/*J6]#c/9s5_>E7;-b?1MNLK75Z?CH8W2]s_-XW,2=sj0MqoAuG+o._;M;)UL8#2R6?g=b
%ON'nX)Ec]uAAtRE-a`EW]O9EsONkR%^J,Yc8p>,)M$UP3gJ3!b)r9m#J"E.>\,ZJHmTk,i8WrGaI09-aI+&'S?>Z^>Au]$>24^7G
%!s+S6,]]9Q7SHdU.PVN<NN<@^s.9(X,ALiBh(q33<+O<s/_X._g.NN^ni1[N"eV9CX2f32]%$WhbOVjL;\cEC$BXK3h?1(EhZ]]R
%cr<1,l8]lTGQcmZ;R&NciNIuXN=a/e#-f(TcKhrZKAN4Fo.5m?\[l`$=l"CN\55ZZnU!L2V+e"DGaP9''OtB7U"6\0Tj=\:QE7G4
%</N;8@ubKbFKGGS]_JL_!"J0p)7^IOU:GXW7^0/LS)7/"]gRUr9;pM/']'>`.D0(<9*`)#;NP@0&cl/Hl7iBfFEsL#A4AWOikgpo
%6>sdY3jNIu?Bt^Y9nJ.m9*^m3?H4ObG?)&d9/\S'[lblkb7XVs7V3DE$-tL7ao14frp*T'K2Ao?]l&!7P\;s_T'b$F`V:>tR^MuJ
%:%4;Im?#L84kHXScB=*H[IRK/Z84e96PsGoo"?$d<!R+cW]om5jm9^Y^$aC3Dh/9eR4dO@4W44F!NP>KaeSJ6E^8tdn"t>>I"<06
%e6at>La81(U78;YMVj97i$k8ZolGrH:%;sCiZ]G5I67SSQqVVD4n(7MSYU^d0*J4&%?j#"!TGhaM%j-QhmEna:hfu?35Qs,;1+LP
%n<E]OJU15OK5j/^d\4'QVJ3IH58o?ViH5?AT>cp_bX>SmK>iK?@`T`tVG@qROC_P5)X8:pm]CS+!)hE6N7Bq;N-d4GYZL]?^5AL6
%<fBPq*&<);ifu"`m)O*l4/aWs+P=:_-k7[M=gi[.$_u>6@O"G<D%-at1;>-.MHpLeKqp/b`:8L4.YA9>%_RE'Jt#[_-egm>b,^[V
%/"o$@j1O"F@&/(+LFg^JV5nS]SfR>79"#LR38@-RV+R2cQq+'FFi3/?L.o^_q<3+3kgF?TEr!,;0%Y#ESpg+\c,R)\","Z[V/uQr
%$%$bMdR_E3p?S4k9;Xa5V@K"eG]%+Ron[-a('HDU-I7BuX=BTVXKe\uk./X8i]5_"Qi0a/lJClsCA+-d/VYefG*gI0mfeEdFiOOp
%@YcX`]D>3KHDV#65pgoQ2g4M8Mh="Q\aI=&b1eqmVf^TECC=!"QI[D^/j62Xe^gJY(e2EM*fH*e+03jBfMJnV;-mqgqpbE?(5uk8
%'?U*u=p7,qFtU%ZR.FeRrOWWQAkHOpC</qODfH"JSLp&q-D]<5+jXf\]Zn%un_QS=[Q6!:b^Aq'DQjNj#PFD#gtG038;<9hC`<(W
%akG\#]=RnOR:,DXnHno0&+R9$&%9!$H*^6);MidS_g<T6(cP9Fh%4Eh/>o*L;om;=CIH/fm^dXZTk0)ql58!]"Q0hoBBF=oq*)V3
%,mM^SA7]6<L"icAHlnXl'I9.^9u+k,!U[1H==L^6gYfA&_]db7jU<#<'&.$O3DOuWmHka=6Hqj4Q=+2fZrX0m?3=\f9HdtS?%_NC
%@LW2YUPQ+ojc4LUVD,I@\=26s@MQKu<dg*K.I.q@_pd58#GBt@T.cXLmG3.c2U)'pl""CIKEX$(6uj'eicR)70\al9#G*d=Ia$P$
%8#0S@)qVW2,86NU:-5c>#edAPSM25s4r4js@_kOEX>uhS.F.0fFXiZg#uZ"!@OHT5L[09<fbTC5b`T7!l\dp8"inKd*I;IW0dqBJ
%gKesEH:%RORkZ:IAH<u2m1V5qU6[70iJ4fpIjH]jm_/F_/jlu9aru,/d-fDODkR>i68"#"*_RQ>RJ)Jn79gsu)FkUP#5XLre\S6[
%1re"-D"!K#afq56L-aR:%<+E@;4I.1gr_ZgC*31m.]#<DTILj*RPd!$G(&YJ,gLWp6_QaZ5dX'.YF>**>eCq:rQ8;WhSu&2osgtb
%]c6&_;:W[(:t8!t'<)8PL:B5n.+r2QcrXugam<k^]mB4ob@O0P)m6I;oS(!M4Zen>:lbFRm855B"SEUih8a;?Z"aYa-(M93W_K31
%P.@)k:V_:S0&Q#&%r$5!6%c=Gs0tl(5KOn24a+t1q<GO2Mc[(9OH#a+=K-.qbN7AZL)0RrQQ)S@YuM,dJO#1Vp6iBblYet8?>]hX
%l\joH4^:3"h!Sf^%RMK!NY0AsD>_RZih:(5hi)m\[3J/-kt+aUI\"Im`Tke33s?kVF_N,!m;A4$9QW/*=Dd;!V<>E`_=2q[^<)5M
%F/@2SMbSncXKa"rh'ZL`!luCoe01&d06:7^E@>.:^/C"hJ9"L"c8VIC0$5HHiDo9`=n`WQ898Al7R@`/B:5Zq]nOSjkt_`QmL]7l
%>o\!C43EqRINpB:;WZ`6<8YP/l[[6V4h!fEiIXps!&.-fR@P`0&r-8[-Ka%KI54Mu)-2.@;BcgKU?jU7qc"%>2B8W4D@rR3/1;PO
%+WL#59",Q%F=A%^KraS6<3KegCUI)#G5!&mCl3ecMfZ?/nc1Q@<s!'eIGX@gr0MaU,&tf=-KH5)8HGG0RGr7C@:J-C'XP?*4*VaG
%]D3+q$l8U4RDK3?R[(Cc&M+IpCFm2KE&.X)`/nie-b!HS:cK<8*aoY;+)Bu*a`"BKeB0DaP2+7Q#,oVN%.pb=(s_r^9`&6FW8:B1
%<!fJIM0[9hF;Q&@T"S[CpuZq/ZW>uI&3iBB!VClO)'P/O4l)'.1?R5!H&d2kVYk%LP+frU'1j=A9u$^uo46@tc.W`mj`V@ba!,-B
%-e;M-b.1Z@.0fRYK&aJ8,5N0m4Zb<>ZQmgt1,CPP-_DIVFe8\-g-_d`rKs-l]C+IJblc:3h;YIY,ZeOgoD!1$Lt.',_gWT"#X=sT
%,I4S1T%f;=c^:0g7rG8W-SO#X4hRMEmaQ>s_3r9=8sSA;q7+3\gSajle?(*]$UUK.@j?p%/iLYJC*G`[74NcXU=9XP\)QQ1/1eCo
%K-E86C"XYQ,4rmtQZulde=nhG"%Ub82Xk2RWfE8'^p-)J06!:hMJk`'i]Z-AG>elRF%tOXHta1[g#nJe79+RS6h,`)<2nH[Q$GB?
%DnQ7hbKq!9P,%J`L0Pg_?-jk>g"eq1<8AJV(E+81'QY34;MCQ@gDCqDdmKF^0Gq;I0Le]LFp]KV(uNLTG\NuA:-eM]R;lP[fuK8d
%/kV>uDH!>(k26!qf,@_m\7@=BX+T(IiaROU[<"0NB)0],LUO?EO1qRBlUs]-_TfOmT'GI=cXcUk!0*Bi[='imOl*hiF4-#@l`N#H
%'WZ%'jqACa@XZkM:U[bZ^+>O[eoIt$F&f&DX51_)oHs1UFd3/Wl06li*iaLVq#uSACVO'7;r!)iHF=3B*A;)Nm$Fc%L_`FW*XR2_
%h.9HRk+EO0&jN`X?s/p600]$5.)L"0*/TOlk,GNKFZFoM2>@qn\^C&BXOh^7-`!HqD[&n`1A.5pE4ObHNHVqSd=k+O5`8ZQ"tXoP
%0Vn/(WailnC+9.k.!amH>LrNk#Zii9@-:f<[HWV08j]q(*3gN(GjXIMc`PL6U6K5E;Fi3\$Y_AYK(Ql'P!XRDWT0sHh]aKaTHWuS
%JCE%NAP(i``C(H.`:6cP>9HfqL'BR!\D`E(L)XjCF<.O8iYZ#n(%8R57f&j;]L?>bWf'rj1aEj^7Kl0?d!C]^@7+5"2\=M>&\&lc
%!Kls7_eWL^qAn1"Abh,[+of2N^NiAM,=-(V,N-Hl/<qHMOuiCE(G<N.7,j/g83(6L-7"e2V#1I)/)5i3B)=eTn&_X]O[:Y?@s+d/
%dH0NhE^1AbO.^9KU'N\"S)]6i;&K^=FhsEL90k=S431h\?=tLN]^@OdaXp02\W'8<52p`+*/h$jmk1F!C/nSmOZD%#U5uYe37kl4
%.2keuRfk1ucZ:HW@2LUY:60PNr+0g+E,Vni^?jku=@c$$pNi]*2Y.:3k\*QD8T'9"\>e.tHkt2b9$^WN;-"p/-K^S@(mj8C<bl=R
%1ZsNp1u4_6oW<.n\eH)<2nB^&gC#!PR:3ZpLA(tT+PMi8r!\NTWp4K`!RUl%c39"2.q0A?EgT@kE*">#/EW#q@p*H0^3"-u!<K[^
%X\](p)m<>P`@..qTF<c9c8ZETQl<G3%1%HE7@XlN*WEQ*dlH\%Tl*&0SZ3Q49-m]TDtD]N>^[@K9;lGkcA!YR!3d+nj0.0[BCd+G
%NN?r-,M!ii&&ErL^MZMf<N._^"J<3TbK5IKE#lI=J^:(\75R/,`tN)t=L>FKe#=P=N8-:HQbpO?$pJSP#tp:o2m;'q\3$ml3RZk;
%9e!&>*OI;`PB#MZQ1cX=P$4T`N%U)D(Wi/O]-S*'NH7$i^No16]",O^1@rEV/!;L;lfTT:lVDC&3QHi"^rEl(UK<F5\;[^#oU=CN
%3?;k'ZS3E?S7t!&m5_^,]CVG==TqFbN88M,'dVku02"o'6g*YcCC_l-D([?G7V0AH.4_Ic_O&H7T=XQu1K<[!%/J'^i`-a9,a[n!
%UK7<Kc.4-Z(-17ZZ.Le#;dEEYRH_2YY1R4Y0,irP5,WG-FRL$Bb+jZK4dE&)k(((Jb!5YAl[!5OmOeC7dLk@h=W9M&H$:ag\*DP'
%?;WVs=e)0D5#&8=9iM2OMNoh.]Xt:W&q>EtOfu+-]?%o4n-MP`2rR?[ph?P9_3/9,)c!0T^LVTM#Kipbert?!&`mn$cDK&AKS9\j
%lsWXB[#N$i/7dIU0GtE-;V*oJA;cW^&DuW[I+uh<GUK\=M.J"`:DoXeT5I7)USYWJe_Vk4F>BaDf907If^Te%:%Y.i\'s7dlWE.'
%mLd<Q/\2nmTh4*V"r6S#ft>.c1Cc2CnG&I4lCf%/5==^$dL$sc[1p].17'[S8NBQ<ib7ju<>KClk%+1SLt4+qn7%hFDOKXL5j)^a
%etlaWP?=MPai'3q/;i)A=VISR<;nR)(ERlqJKd%WI\W%t=W$)[<X63XiT1Ma7+\VLEq1BF+'n8,qP2C,WKAU=$tBaFqfT^/TnBLH
%'-ob#1YD'jhTU*u.GR<Mb[gfe6KtPoo',"<2_/aDd7L6W=d*8ShQ5ONVrD<V#DQt?[H<K/TO!nTdfV7Cfji9GQ`&U:fZo5hf?N(*
%^2'J:+u(u5`=s9bGuZ=Si\),(PJ&tP/N"9^[a402>XccWi<_SNb:B.?1&7p^EHP%*;!AGu9-(GIb"9eMn=#6I;[^??MBoj#j%.4>
%;C\7\GO0k9'c#b2?5sLJ#04YUj!2Pfl;M,g@-UK4#*"s7A&9MM4C)q4b$'Rpj-4jh-AE^;',?oGh0;7Lf>(BY]IHIt\YhEM?@]Pu
%AO`+Bj6K+ah+5k7:i$t5DE/&PihkF^9%>>0`G)p*a1aI%bf=^L>t--7^tTe$[:H-kgWF8<EF-AZLYp,:a3p0q/W)0]E1KjlZ(FYC
%atY$4IC?BmRU@SS(*_\lG2dIfJ5fMj1M!QLF^ArdY"_$!dd>sq4WPYWq@ZH-*@CU,*bZ3DF`%3rGBdOlM!L#"oMajd[l?+%\>f;s
%'(+rNg)+eJ()"=PnaLh7&Xg,s\YSEGPCg72fr*:_V`Yopg$/ApRVBL`mD()>eur#Z9TT*,P=r-r5+?X6#P#6/f#JC[D:`n5CMSF1
%jH]dd?WZEbWnX"3]EB2"1CNI&>7hB'_XuW<>r]rqh:`k2]%P`\[JCBfSnaq/-`V'1d2:DUGrM/qS:Wfs?'J/*Y"ta\9Nl:QMP&I:
%g3j;QKWH76^-q9L`&8PpruI`pQEl@LmQ^rgU&sf5ZCf#Sg@4l:3THlBG<C$acH2Ku0&<WDI4:0?d'D]s'dEO`*O/i(.B"2#SaP_V
%bfJiW0mG#sEPKJh*p:NMWIa#0/SXG^>#tS8Go^`VgPTOrGjjT)9s#LjN0g_>Ol"J+pLA*!XcFt"^`6s("8u(s1Z-'l<Q2BD`?e,F
%F_%_9CP.EgLQ+C^%:T^PAF*aab-6u"8q5C$Tiu-=V+)hN=klEL0@PNO\L+s$buI]hD=Z8eo`0;W42.i56^<u5E\u#$=u[K2FAu(P
%37d^E87AGURY>'K#Qp?oCXaGR/^sO:cA8i!Y%&n_"@Om$ef5:?8)hGJU&g?J\Xi!fOZApAjjV*$^X6;4Wg1NPEP,W%:hW0@Y-u$D
%9V`>F)[[CD]ZrlK,B9j%oq8R3/Q4^3V2ld:1IE>QUnP)/R24Gu?$GJ_r[`q'SeAm54]:@5/DX3^%tqu*Y7mQk7Y,-&aK9'8iVMJJ
%`@63F.pjadpGqsEC_(SC8VG!G/NtO\kn`ZHA'0"2q.E@\>_2Z-:?PqaC30EBlY:;I(gNDU2\@i)]^1[hH1Spr'6P*q?$BL;TP)kn
%fj2REft5WeiO[(A,<+$]V_[Ij$=?e&:n(a5969KX@[*c'MP?*2WWF*rXm)]XCJFq(dhR)JIAT)-;b]C'Zc=*[iNej_oeI-_AiZbQ
%^:Lm>hR/0KY=So/^"ka95PhTFSU:mcV`;Q3I=3Zk.^8Sp$28+D,2[Pn!D1b!Qku;O.0-&2Ae;"q:\KU#/pT%hn`MaRPU^(T"s3nE
%Z%=+CP<VdOpYp?!'n9k!,,VB*?dFN/)GoD$+D&#-ki8^K\/mq4q6E)]Vk,,`.O(0!Co3#-F_rj%g-2&&81*k/ih8a8qG[?AgQ2EX
%BbQd\#Dc#]MjXYj"*R`G43*\%DCD3AN?5WFkMUR8CWTFaTHU&>.aEeV?"p3gS=R&X(q`82CZ"jM,baJ<ZL2H44g,T<Pj7l5aD6H,
%7VDuD]+/>0<T'Isi=9BkniS#f2@J@dP^qnk/4'$Qe$RL`]7$P=0jT.=S06jNe+j;sF>UOUWtH3YTNh[iBogJg*^dES>r9jib8B\F
%^8gEX-3JF3ip5cdm9qJOAer,De72>q.ffEc&e(+L1.3T'\1B&`UX]tFbK:J!HR<WXXNs%SS1b6f;0,USA\iFX&ce88_/hX%0)LF5
%>N=FYYDKa%XG6iAI>J<dN".18^E:pMW(X)/%%f]4`"J/nM_:EN*nNd(dLq+"V;i.VdECmPE3YP'')l9mjd`3cMIYmBZT1n*mC%dO
%<8Ds\`qF#Z`$>.Clo^%`UODMnK<U6G"B`M,rec2H%/3oUlYk]rAY'pU6BmOIIKU-IGakHlKpQ%!6-j']="?9\@?G:GOKP`=Zk-TS
%;8$9VJuo6UNq;tr`J$m>2J[u3-Y7q,)hrW^rnF/9f#*WEemkh*Pre@)Z#H-8c:'8j&nW$Xd@e^IaV[[XcHqjG'"Zt[1e&Eu'=N!e
%U:<6*ZXbdL;/h49CZ:Nhj",ZQOuA/%/O'Z2Z,fTag!iejHqI,dKBCCMm,S6:)EIq^FjtA<$&Qo&2IfBGkKhYfZQ*^Ed$OEg/\a&j
%8@hM2Oq!WU!uP=rZLth!qB2"86$ag@ST1pAo8HCJe2LkU:2I_2":(oG_3`aUQhKbj[V/rgo<J1'!'UXA1=VeE)tpY5Gden+>8t$:
%AL_l>LT^6V4/mF!X=g@%D;Cd:Jo^sq#E%lZ;HHe(?.ZF+bHL4qMNVO-T,WH`2QZ%^(Tk\k??b/+m6>f,A3li)io2NV4(D\-N4r:7
%'680XRR?B.Io/`c!07K@&8>G63JtRSeFH$(=J8CA;[PLH=I+'@g)aSJEHc0F[nsuDUL8MaY\kVD=1MI)k,c;"LD$N&)<R7Wa@1s4
%6dV33k+#CSMo]0=0%">=9>(Vk5[9U1'j`X^Y&6a@$pc`J0@J@%2#2o;n&KaB-4e6.^P]A$)"R[iX:odC8e(M-8l05!EnSo#W\0Io
%dTk$$-)n\k294]t4AK8a-"(=I/L$EZ\BoUC0>g82`['86c45%8'PA[ea=l5i=D)W$AM>h235+6ZhV,jnbHAs.J3eJJ16]'P67[m5
%08E_>j:E?@'*21q`+Os@ZVdXTD)8GjF`I:`iO*dpo`a_c*oBfLRIL'PTYAZ+E?16Pq!<.aMCT[L,?t^db&o1k(X7*><ZQY@M-VdS
%fXV(CYdl<KeStNRE`sJFGVX5OY.L@T\?=--QK30+YJ1R+a*#37GB&V;ZK65+jt@W1HB"L8YQQ`\Z;!uje)r*Hd4+6M(1B!@:okeQ
%b]2F;dNOXGPN]-q&CW[M8b6i%4M7CXmSm/(6$Md;`nuBNobZHJUJ8cFFm)r9Vu_:AN3ocSl#hkXq'XfUGlU]CQY,#JkDW1ZM%1,q
%KDLh?Mm1$m,^jsnm1^Se<K-:+C82.c)0\_!Hgo2(V]I&D#3P4ldd+rugV*<s+7>Wb[pUnr%<WRNEi>9mG"SM%a"e\rc9l3?l1F-<
%2iaA;R[B<LG=`IoBrQ"JLNC8g<D:?XG79bnBlG2*Y'NFMT)&o299EX`mtYoH%APC,bB-m#\eLT\=UKu5@PCX!9Mm0QH7)80F?of%
%b*@7X+IX2X?Hp%aQBm,*s)<t#eNF)AIY_%2fl_=tWZGG!V's4_N2im8M5b&'E,CX]/A.&g,]@P^0jm=ucbKS,&d5lc,[-2sX'fLA
%;&`"p[>'2abQ9AL%SC;%C`EV9ORF]T7Kushi)U?l_`*lX-^SMs#=kdUCA5fJJ]]jLop@d\U.J#0oVAH98sZARB%Z!#D$ap;IC,kZ
%78KXDAaD7\S!NYdUe*TU`FANTD>-)?2CZ3N:,^Hkeqq9g8^/?I*bA&7")aQ,d%$tO.HkLXM4LYb,mrTBc"L<'ULrB:7/*NdL\.^n
%O54Wlp-%?nP,rH7n+SY!khK9JHl-3=b#aK6)nJEd,,0o)m<d2H=rL@LI@k,aUsk\WI_h]jdak<Qg6em/Po25:JN),b8.*kBf0+A&
%oJnmWFDtCaJ8$9nQ/J4e(*R[nl8RO5@&YXA,joaco,WltIEDjAPf9,mcPFDha([aB%:UKc-WA`8(u#*!:75YD64U&7LfkR$,/oT*
%ONk3Ja987TZ5Q`o0'8+ndjuA4o]$TpbEASQiF>auTA94Yp=$1>^b_St<RJk$WMeNJ3ICCd:27V!BUcr:)-hZUW\:(\m?0B>)ei_D
%URnb@Erj`ed:E1O=E.scminc>AnjGD*^W+XQ#%:l\1*jH:ITEDciYXS2.Eh*%WO:uSn)VMs2D2mb65%I?2bmq!<:OreEU(+Q>)W%
%I,NQ^QJjB`Fs5u=EnM<SI7QNdP9`mH(4#ZuNZ7H$h(tJk?+^l%.V-)uG!=,WKloRP^XuVn.&epaM@;?p=h!StCZ83LTF(\5p>(d5
%,;tYJ3Bh`2-'k^ZHGBEG'`CphVDa>PHHNjipj&tZ>MsB:YI==`VPVDQ9tRG(p;thkmn9+?AQU;>b`ZFB5g'or*S%Pjfe7W3!]fup
%ciLA;Ea3Lp:):'YT/2W4+=sHr3bALS$&:3n2PkboV.ce^7c&r<04uTUo?dB?9Dl"?1_SRoQ&R3@__C5S!bgsfl0,5/Mi?Z68YBIV
%,3Dj?Mf9;t6p7J/]:o22MPLA%+1:A*e[lLW6Th>"Q>Pd(1;rTrYEi`gHQ`Wo4b/(LA]I^!@;jaW6OG#2<MnDZeMtJGiHOa(h>-PC
%O<u0G9q#f)W]2$T3_s&L.(TiFOc!l;o!6;%--53qPsIb]'Culr<qj<3r/?+1LY5Nd8s,n@2E"'4=)#6'$A[hS'[sMWJIJ8Qdq"eK
%Q>"VtCM-<@qRt(?IrmWLnRrWIMj;fL.[XX@q@6l3A\^9+HOkR9)/O>cHL&sd%?[#"j&C$6!bnQt6>s3o$57B[JXp7gIV@GBR=G9G
%\YK$HX/d&`>AV+FBN%bQV.%>fRkZL;R2-l9)a;27&_/ASgS?W>_PJsiqq=.8@JFIW\RV9J_uDTAle9N:IT]u3VP0`b3k<J%"'rO4
%;4Ln:UT5tHMn)L.S`iqQR@;^Z30=mf?cRP`=)?!6f:b0'o]tJ'Eh>sD9+/SDW&9p1.W@"@bP"K3Z]^)M%c(*a]/=BORn"0\@moYo
%_lStL%%[:'lF=3H"EefZM_a2:ease`<AusLHYf*\e;Z-MJKAAE(Ru,[8<@Pt%td+c@$-0?#Y16($G>=5+5]s>WeMCsUm;uf<,<(9
%jD'US`ZoUIdB`iSMFs2AA<i1cO!'<ie2[X\+-Gt1SkM@l]9rMl-.OsVOXVi?4^P1#L1FoHKB.2h)E7epW*>h3j!AquZ;Qn68OaUh
%-#-T@7$VqZm'Ci;@ON[>C-ZkukK06d/`&lCO4a<1joc[aLf1$81*I?",W9@cd?BLX(S#aXdn>u@@Rdf)5DE_6$'p9=D#Lm!XSJBh
%;1FO@o,4W1D3i6_LMoj$"nU_R]2'f'R\YmuAI"-*C6hY"4Io]-2'ikeUc>4?6D"5D3-;Uu*+Z@VD*@;I?OX;Ch+t<K4Qh7K`(61l
%\';9`ocN3>I\b/nbVFqsVYmbJ6obee[T6m%VR]dSao\[a`H-To92Bof;7J<]7I$@HNJ4GiS.9T&G7k;3:09jo8JYnDjkb9h81*1)
%XXD1r>Ka@`VR,e2]5X\Uq2X9)c]Wub"X@[3CR/jo<#1J;1sjVlU0)umH'M7.K2?=dN(O=X]tc=14cqWi#CU`Pp3N.`$8%11?oLB:
%d@l^s4t*p2HR+].3o/d8(>"G/*,R.S=C?OV(mf[F.I%!Fma:RV)CiMB.>Qf]r.PX4CcZ:!q[c'CdGR2;nAK-S?G-IN!AIJ]C2f&(
%X+t@+Vu$R/d\>W`0I8gIdMbS':A5Y3>`N$"D.67+mh*st6m(sU-D^cMq3\+`e(2Xi"Mfr)lmP'":V7nUWOWdnEhu-bM@R8M_o9Sq
%V%O<R1G2Aheu+Up!7TrU)/fB2bBEbtS:^.tARu+dDfI0/=6fC4V#.q"jXuYBPL:)17lca/TfqqWc'9e.2FQGT`mLN?npA/7;LcgX
%Z>fj@jbMlP*A<)8gf'"s$ONH8Rnfb^m%A-l*Q,sYA)C]"8&#Y$N;m2CP`_ou(aG'7\@Ug:/8PJOj>f8k,0:`(Eb8E^"bj4)2l,#V
%dGZui5GEu+)'\49JoEH0_i7dROGJ^POaF']"k&`&P)\j;3Zqm6hO*Z)--EmsA8Y.Ap(511lA`a8(^._OThu)ki.hm$g[8`QDil1Y
%ZlKOR@8QhH!U*<A^!2<]R&LY.Y+9hsLlFG9-5q'*h*)093M"2^'TdTd.85r5[0Sfa4UKB\Wqd4e?&S^mM<@@E1P/AZ\clSr>g%+h
%-N,WW#%\1rC6A#N=idah>cT%N=?4?3Hi;dc<0D\U/Kcu.HY/afMf&._X;GZPCn8h+pm=*8<+%4RX-&!feu8DW`W[gjTm/`kN#3b<
%H^UJcC'&'XJD,*#?F20n=c:b\$PN`$kR:u.WS0NgD9<aZZ1)p'TFGKp0n*S&%6#e/A5A!_Y-u<G.8i<L/1^3nfKQtu\1`[h7,at<
%L<u;j(Fe<Wb%O%NZ;jT8Tl^$c2&JUn3__M%Ok+>1&MOHhRWa?N>'HYmU2L">irDS1SR!HV'e8CPo"-LM&7e*''iNk?[k+SrTT(L'
%XZqJJ]<OlG[@@A&XYrcEOdG>)0^@p6#J"T,i$LH:8$`M'Dqa*,M<>u2I2,.5N=_g;fl.%in"hSdB_R*+UJnFueNo4?q(dsB.2jRs
%jP:j8fW'n-gbFT-?\\!`]e@"e<dE:Ch_VW?=2&<#$\9QCUl<u[C<<86V-f/7NXs/L94SX)IseC3%4ZjnEso/hA,aS_KrRI8WD8Np
%#r__PAoqglm*4Y&nAS\jrEP8(PQh*]"Wc=+\&pO>/uH"LUA4R>:>j:%hod^faMj)Qb5nd>m;C$@Z@,E;1LrL$\]R=!*U[sZ,qi[r
%XNM5NFVi=1"WHHYN@-me<ISckf:/noQKSaRY_45V9rQ8e6RQ^&TiP6\[r+I(=2u<'nE?HuknPp";*pNRBJ#H7e;.atP6af0b"ApL
%2cRn+*KYHa#*X81DPF+TLFU3]TgQ5M!6^o]'_Pip5\^UWS%aOW:"enL_gW10[1'o=3f+f[PH=FV/``L&*HtVr.W1`Ub?-e@\/Kbd
%\r'^4LUEPs<NiIWflt_t`/1/:GkZ-A^0,ju.APF73+P3#L0^T7$0:p4B3$l%iB,d)-9g@.12+8\i]r/ZC8Z:<?H5E?3)RBrnf;Zo
%dZlndo[+XJd=mb1LTV,qdmr\bG8ak<j%#RWN*]U*k4ZhdqcKE`TPhU^C(AVpTMqi)#pNSF(B?biC5LUf.\^&/?fQkJ)6<h2`dt%c
%6qg0jV!qncS[mp]MY&$F4^2T$13URg)6/aFK=0YPrP]\l1OT056Ujg4G8/Z8Jjb`5<'RZO*UtCt_=l_1QRA-9Q(4mI-l3>_mU6'H
%o4(_oAiTo]X=dK#?XM^;5Gt,[d5moI#Nf"7,^JuF]G'r/(d<$Ob%;YHgtp@AUl\0)[CI@d'[E=gV:E\'&p<.QU5/6[qn_TFLd(Ti
%16(u&6feaBc0[-XGcn24V8L,;03rHcF$DZMkB!PWCX3eZIs?F^]\Ud"]e:71hPu4<"*mc#.YG5T0@84oStYF\Q[cT3<d^1kmdr)7
%r1FS?(FEj+'pbC77LU5ATZH_[gr.U$j)u594SOJVg*t8jiO[l_0iuKiYp&sO:O9b4n\arKibgEap<Ir0$P7a44M:n+]U>[+Jj`SI
%3d:2[7bF9(KS3&Bp7W.?R!dhs'Os0l+++KQSG)Nk1^P)GgKd5;fFR*FRo8c[p4r6_=Ni9([HDTAd0Fa7q#rE94MKgbg[gK>F-aNa
%NiCfdA('&(9KbN^"AJW5/)?at^c#I<I[;QE7UJ`p)4*h`+V5%(JtG8sOO`r/(K!<e6UWIV-+!]4biN_%Pc7n0)NkW>S)`>ecd!%\
%me--Dn!p/^i(*Ocd9Fo9boF-JV'GE-7Jl=M$C73(d2>sr&h#c/-@k#'qVZ%Uaj;Y)SA)md]8J)/qr-gN5fl]es)L'N(hpF-H0c5:
%=e9&_q8;eSk1s?mm@Ek@Q>:Ne4M><F*:n9m:"Qk7cKjOEe!AD]P5]))Z:);/I!IGBI'V6a"gHr*k]GU2d'9f*jln>-A0&QiL29DY
%Go;-6GnrPh@`ZJlS=d=$X0+,##9l\n(%h,6/[!`S!Qn6"*>do5HA(O>c_Wd#htGa$rN$t8847-9;;2o^Z0RmV8"FJ``"LTX:?.js
%:7RF(iP#j8gQ]/i,Zsd0b4DeIHYdar8S$ggF?1T1pcAUp7Kj4t=Ht2ks"C)b'u4I@aUDV4435UB[W`=82EY':)V#k1\F"`U,jMgS
%F/GRXfIo2+DcUGOFf$!k;&iQFb9^!K@Ra_A9dWf2/8^CIL,U%@_j6i6Mr-QNW3ksi.@,I?=Fj@PiHdOENY+64DFk198`@<gQZ,m^
%mGGcS;pf=W<eRugk=W+&I/.>lKOcjKX=jn%XD_9Tl?B@Xi8VDd-OXSH0\S\&1Q4Uk=J\TMKg]`'ad!,&(q=X_@A<1)LDs,@Gp=ZL
%#;Z^+5BfIMg1fDO0a3@'YA#SnD44#uQ-i8SV?sk:c.U0d$5NF*[4hF=QL\7G>2L)SY#$BNaIl<eDN%e"3]4lS`0tZU622+WDirDO
%(>'DcK&51b1./)<$10TfOH%'G+>':i8`48t1T*)9jq[Ga5s4mA;:I\>RLW8XqCO/%<b6*WZGu41%f"k\TD$96*gT7_kt?d,/L+;q
%c;;>OKp0X+_.C&Z:aCFjOgRDGP7T)WMoB\YW'fUWJAT5aj&<<+WVGS.R5C*:]SkE4'cF:/kLOL--Y\j.0%!fu#ZLBr-6t6KpY?65
%$E(eRe_6qr`<ZBOU\tp%g\%mIgO!i7Q;.*B2uRRQmL'(gl9A[JYdJL*XO731^4/1U%dCT0.0tc9!PjU-3#"*9%WeAU9nBtsVJ^QC
%J^ZPVUu4S/n[g7KW!M1sJ03e:MpBAu]R7B=LY'<*QV&smT/;`2iPf<`J,c"qr:>+Srq-2FhgPFjngrkj^AlB#s8D]\s7O"]r8p5Y
%s5CF/^\dQ9]`7W[:YdKPd1#@`rqX2#+!5Chr0uUAhr"J-:VVs+U#R?]qYDk;rp\qYhu3>rmsk65TE"\UhlLhBnl`_&n`t]!:I"d=
%rQ"AVqs95I>k^J^b1D(@<WDuP5QC6-nIN?ORFhD(5Q(<@rQ!62f_U:44'qJ"s.;OTiT$R1oR+)ro"oe+#gR?l+9(5kIe_BM+90e#
%huDs<pE0F=5JR6cO7.Sndhb\krfTRj?Snt0)diT*?M+5Me`m+cJ,,_Oqu1fSs3m=[^msufn.5QX%tAh8J3Ntk_uKVK^Am5@Q[f$E
%s8BG$5JI0ia.N.iBA#Z-R%e\2c^BtrWgDet9k@ToP-"X-1iEg]J/ca+?'DpX)pN_%pZPNTnb*__+o]IRhcl-**=#l!e,B,pdkcJs
%0_h6/^1gm1emL*Ebm_4Q"*qOV@SQ39.4X[gFpJQ\%WqMX=gos(>#YXGC=rku(g+3V#>UE<:F;N.j0=O;h,W7^`I0=mP`?IgM&k$L
%>/VX4/D_Q+d_rK5;l=%$'Zk+VS'UQT?L-d&)K=bOlg'n=[C;*38d8SdG;DcoK;Tc0e'1OW@Q<kdl9+\fXcjl;UVK]#/kYVtQdf[J
%e0u;g6(Zu`Q\T\<:o)!\QljaE(qq[9'lGpkBSjS.J3Arf"U`Y@R7PT&=t^%uW#TH&2rK\tp(;=A;H5=qR'-$"?Q5#tMc'Jc^L_<>
%/:&>7el"Dlp!AoNPf,D5:Pe_dD,mhkH#p@WApaabQY9'0!?p@dm3d@Bfd2.S0`3]>Gp^CGVO'46X1IG!VO+5leK>r3K%8A`4[PG[
%^40>bFnr"2m*J`kI-lQ8G4YV`oCJ9[6S5_QC2ZRc#GY+%N%ST06ThCAQggdmDo<#S3O!"TCIPq2&BcI6HK#9UEfmW^4(V^p<N6M8
%7*I35V\F]k`5)r+-4$cn/9XE).aMDib(oq)]AP3Zo^c_-IFmsM-p>p0@$Oc02n=CXfs2O=`.$.L4MV$f5Q<e,InN)9#Q,cE%K6[u
%DQ`P#@TQ0-XrpLDQ)19X-V)j&%ig2:Wl'5\e__,*i.-GB!eFDFb*JMW3ZeM`=-_%>@oqf@@Vlpu(1?V=5s4+L;M&l&$uPm.EDtMR
%7>1#]#7>,jS"R'tPghUcD\"?5JjQ6CTYEQ5]i$(!,d")"<[dN?<Ds/Q^5N0iQ%?H+llj'-2j$BkK=sDUB1D_p7+*%]o%k`.n!LPr
%<++8>Zn4"LV:2K4=D+DtnnQTAplMM3obtg)/a%me"0D1J`6u*E#8igr55GPn;C%cBLrq^JCI@o?jUB/P'hYtSUXg-IIjb]_,)-N_
%9f`4^0%b!Fd6aHSF*4T@,;U#r&H+?<Km=oTUXc(=?Wj.>bG.\8WJUJ0(XTVX>($.t$]$[-4O#5+7>ul(6@FE(X,W:4+Q)!QMSdEB
%]5MC,8YZ?I7_FoFlmm__Z^TiMW2K1R?_A=c=#?/j>DBFaa)?_sSgn2ppojE9NVXCoVI6!\@Jf,9]A&K7Wus$n50HiZLp"kBaAS["
%=C*[pOE_iU#r@YYDakkX:=7mt#lnAWgA)L0G)c(fScXX9<*)bBbVPWB#)2-Y?]!1Q'oule<8ImAd.N(1S>\@Y##IGLYZ7W&?a6LA
%FRhi(,1J(bMc:9&%dJeB(mXZ>5buB5pr_Omm(so22HIV[3*>Dss5hS)PL4EMp,C0L_S_C;6+iDkaGYEQWe;=;a!fh67D#P4E['EY
%fNk.OW*)-c#^#LO670o(940+i-XEj='0GKKaX4E0C<2``pQ8APVE,fN-\hcA/WlE#]oqm=4V6PeaKmD"T`TDV9r";=A5B$R+OhKo
%X[LLWI4`8aK#UY64mIQ\7$Y5<G`TB-E8-B(,k!/TLpA@/TKIgG<S!=C$nRjj;&4s^`j.3I1r_#0U+fmh$"mXcR?+As(O(hoQ:Y5Y
%ic'`])qb$Qi9;cOE7/CZE:1:$>OK9Ch=MaFMYO+uD1R4<`Gn/Af4D.Zo\/88T>We:c;mP.\o^Tl@<8end8rlM7(,kL4Al*DJcmgd
%EdAI893SUSTGF?=W"8k)30SO;VAIdm@gG#nDhDDucl$)QILW)-JDC8.)dJ!'&=Dm;GLlkgeCM9g559)>s+m]#h>91ndLs'V>)NdX
%$ELJuG,3_aN4VjY`Q'H+ojL7FA74$69^bM0[a0$_-.OP:Adp@,U^Cn9U05.]<N*_g^fg=pBF/"T\o^F7_rCQqTFV?Q.(^`C[K`N-
%mMqBmmM;^`Pg/8p,5t_&'A5dfX0RCV0]Tc5QG;Dqe!Ao(Gb]:h:TmL[a#DH&T]Nm5&Y$M/99AR]$3'i[I."DQC;[`Y;j%`sMN0:5
%(=6RDRG$+RXHTV>LRL&BN^O2>J1$Z8$gB`GQb>khl']`UVRtU%nn]cco\^^M;8^PCn+Un33X-QR[sX#5\%H;'Zal95]ZQLGX[MAs
%;k&`@L4mr+@LpsZY1<3PBUCpJ/pFVgZB+V<dh+7@%P(Y2@1@S=.?.\.K3uRO84oGoP";J-+cRfbO*!8oe`SnAbu.@eg1/n9eJ$>a
%W^;!0o)KGTFX2:H.Oq4P)A)Xn#!ulD'rN&*'LXDnG_F.F*.M5*=*Y8uluusS?]fg0>'$X9d@Zc"K9]>l-5-iA$ag[ahb6'c:@]NQ
%QJ/)K!>07/HhjZ;DHWM+m;=]5O$:pk8kuW&'KdnqLV_1k*kbc"0ai7U&Wi2JaE,q_:l!)D@ZW[;$%6Pd8RhmY8Mbaf>me3T/>W?Z
%anS#XUR&@VLdg-r`]"WjEC3nn-[6qP%3l(>973dr\(<+5aVY$QW)_u[)ck_0@qqLAVqs*2)@>t(0fX0o(f=5:SZ"p;V;9tA6<ph9
%Ob1QJ$B7[P8A$T>76nGhpf:<^'_8jdroLja@q<9s[)Md!<E`PKFc*,O_^p1H+8g06pac2Lb@`1RcHQ2gjh#9uf!;(r4sSU9_/@iC
%<I>H"]T&qV^d,RWA_V$b'W$ZMFOMD8Np^DNXTfHBZ@udu@hl6V<CI'&X?oI^Rf*PR]gcO9Ki,nkQ1[l>IWS<7IMKY2pLE9QO_upM
%*J"8LBR/^9hf+jH\dldJ9;_D=>bu(!Y8:C3dq_:L42D^Mdg_B\qt['hI7=*,3PA8>g>bK0on`L@VH%:VVdf?>NU;ItMj?:`$7WOc
%_(/F?&\g]CSK1$&-pM+m0nJ+Dp87sL@UE+55A,gX+Y<nudh2<9E!ePJ62NT)-TH+]?5T7tbQpRE?]N`d5j7;]B4f_.hKuol>4Wk.
%7+&=#^"JM+oF_(:=!@A45jb.gn1$;K8N[=oFW2[(M'`q]mmJYq8<X\6!r^)]Y_GR>Eoi!C7&EG\F?Ihom_qqri5fpWUc_#0)=/ZO
%.P0U(29rNV<sRti-l^OH<[u1Y\HG=*be:,AVad7P-T6Ve'a:i%8'=;-NomgVQUPp`3lL"J29k2NnNh^OoRme.#0BN<,'l53`AWH;
%;&""$U220=^KSlEPHqQ7,Qn-;WXt;-W=)20RTjaV+AsN^&4%PJkciYWgi`JO;H&)m4h,_>GC4/b3\+GtC-b-^5_q<L88XhRROr;2
%D0$Gn]@dppoB8]Eo*f<6,N%1n\O-MDNd$6DCtgO=LT:qD\*B^.d*%ZX",C496'1PE[hpX9=s6*hi2HD?l+KK+E"&.W1":74&7Q<a
%UqHs@F^ns*D*JNg]I5oHInFi;PBcmWN`JAH5qjhro3:Tl<so:?`4^d$ZR8hU1G2L\C_A?tS1;r>[0bO.RXl9(^9-6!TFR`H(kuCl
%h;=)gB^]";EKAqeamIdH#5p*u:%$FC.DfD*Q?$X;C>nQ%B=8m*jd+.=GGelYeVb.?CPl/tG>$CO>*.iDM\t:W>h2qUPJeqko>D0K
%BU;WI?$XX'U+s$U2r3U!'gd[ZX'3TN*<^uF:5!j2:*e\,!S8u%L;E/-?eK9sO:(`s!gSL@9-X3-.l=&r61jR2bcdc5PL>658%XLU
%/frE/B_7mb7*`/rkaYrW_+oOl0Vn!W.8e]nM^`PR[&]HFV!7/#40u!4$A&&+<$1IOF=hj(dMQ4WF<Zg(OAZF06MtI`9(lZJOKUOp
%&gGj:n,P2P9!lls&>>"+O*&hL+>S>7LIb(>ZD5K%Ol9R!f&sG.?WFk5Ykedbd#u#U67Io%pUP[;B%BTJjheL7l9S5W^Z+CHF%E^r
%+?ib5)0;LQPb-XH)m!M<h_pJY0WNaG3Q!JeX"8NK]R%51OsQiFMoj"1)2NZCh(Q4QI2T9NXlpi_2H1EpMdMg@[BdqTE+qpG(!Zma
%7H?6*gIJX]Le8#,-q,^_Q(=\C"OO&PccFsr.oeqtZ>t"c<ai2u<d2K_4mI/!G_OD6\k44L;^>iHd$9g2[7[:h<OU8c./]C+q)P/b
%U><&*G[]J@<l2HFE7o"#(Plmp"lU,hY)AiFXdiL/1>>fRLAKKPQcQ'4M7Qu=@9m[akh7nm(Q`fVM'=-oUc1kO3F&UcQPqk!8]@]F
%^>\2[48NG*967gR:@+NEk;2<r7*2_$`)!)ZBZ(5]\!mE",IMMHR=G@C%6baHkFbste.4fX-APZY"O%.X6m>OlK5[8#([[;X5WRp#
%?![%*Vf5SE'RN2';keIf2ASslieOOqehn<lC\6hi)k=8P=gZ'rEjE1@L&U-XGjDf?WT;dR@qj:j'l2Xh-M5+Mec(kBk!*"QL-Qsu
%Wf-!(_USuThAXSfHk;+B)57f16rj3*32[&#jWuP.WIg0jDR;Ko0NkffX\);D`W6""<PHR6<R1raKo.Aq"l:G[p1+]_A^4:4@C7NW
%,N:D8i&oW=\X.QXCj!q#R$,smIb:t:b,46[IL%,$[@rUh(.DD6B=h2*6Gi1>+npd_Uf?uqn[n(Qfjj]aRAHuhF?KB=T%UD&i=5T6
%C-gK77+FS!5/_hhLdWQ]A;>J50&=q_M[SQCj(Ed"hAX*_"e28KU@E^?od?UqV".8<)bOXA/O6G&*_`/_%-;k1\6BJ89".,dk?+uP
%7!l!Lj3r+^TGD,+S^2Ea*XL'ZENV#8lGq830elo(9")J+(t(0]O::j<AU:<J66;a"6t";pLq.YB%`V,:M[T^__c!R>7>CQp?BhCM
%,h/+M(h:B0WXW%f+hRIc7'pI#,K_(*0U6)h]:TmdOe=MGO^WTj0<CU!n1oos"Ne>^F<rbtIKH47c)Mt)6pMK7bA8X61!..&,]ik)
%d2gg_UHPt+cpbkNWE(f,<K"lecn/-ao92>3IIEl(eB%iU4"d8JBW6RjPk-'?9Y_iPUsG1=,[]nl#/)[(\\+16q=EE^Z=hRTK)fTJ
%(b--C.HhmC721Sq%Zne!QUcrs\Z/l-1n&04_oK_i&4ZpoRTA<<StTrM0#aeM]PTqN`WPr+\5[CB&ltgJ<GqVM#Bqm*B,otGHjH@8
%.9XSdVCjfSXnH[7d?=o@g7ilQ.pmX9guYYSdMJI\0>7<[%Ml#4&YZ4T?u%[FrSEICWt6#MdIM>.$X@\+-(<=>I9M0VX]NKma^Z*?
%2i:aYjYfVQ!JHBDF#mW>%Vt2e67<[A6Xr7jq5QCt&uh$Gk+H9]r>LE\9YV4lb)g94gkCrkYIihC@\-fTn66knT[fI!WSt"<+HP:-
%eLo!Vg5gK]l7[@d80u$C]#<o4YrBEQaELcij,LcV&3TW4=E4=`+8o>=Y>Wk#o^1:BCNnGn;KlW8A&eMN'+hqQBT/j2\!@Gs9]*_n
%H8sKRG,kB^FHBY1)`siq+s"_p)RY.Vg6M7sP:%H@LT#2CgK%p_gl7i97C'tNQ'hR9g`b<^Ep6[Jl='A.fA<psLOK'>>_*W/Z[uIC
%rQ%O,-&<.9k3<@UQAMW,UT:oQZ:CtuOaph[3O[j@OSWP\E&h+hZ-ft/$PB7J*=>mmZ?dcQe/Nj<e*gks6bJ!3`FD=-.SbW<L#:Ge
%_@_%;1FSn<K&l/7j;pei/)P^:Lq]-qE:B;ij<B(l(LV`RENOs<*C;$KN8"MpW8nZd.%E[^"%sq/>9QH4e.ROTfoj[Eif'sXRR2WL
%;ApmZ7"33+25!kspfgTf0<^A.i;#a'[&T1cX"@q?KFcld%O7k"rCV7KW(YYs`/Li9W8bX>X;\<61`oA?ROj+XNHbWe,-hA8@tUVP
%W0_mgK6%Li*2HS005'XW`=J647O$R^8/5cuo&`%l6Bg%GPX1=#G27;d?Hhf-gA%cQa=<b=BuI+.",;p]>0Ie^S?'BB0WimnQJDO4
%ZK[EH2dJ_AI1JfiFe@$/6t2_,*-XmaY/RZ2Ot3CaejPU]=k00VMa4^;1Do=&Y,:Nm@[nNV[VtFt\>*VXJ>t\(nO"$;j)/U/.?SF!
%>rmp?NB6]&nu@@6P.!YE6=j/W@#qoKh#>,rPuTN!!%'>EdWgthc_-GG8mArI&-;UT-!@6S;l?DU6/OfgcXu@cq0sp#IEuX*$NTWn
%rrm0!LC*iNh"2Y@eBo'%Meb;18DYd1&@kLAn9ketA>K&Rl!E!]RLj,Tk()p/6k@ef#1)fd0Y7poO.pJ$GTB*UDH]'$q$I7sGmtn?
%YQjhNFa"hnTG-=[V+(9?:3oOdK4B!OR.l`ts70s^Wfn=TF"d:NE`2f7Uh[WB6EY]*dJW0mD]bgqU6F:!/"45N,5[;Ad>t$t]1TWc
%07DWBf(RFIEuKEZis>M#C?Ig"?GEQArekOYO0;qErRB!&QHmBa6%>iZ.@n4p(,"qars"b[pB>jk5B]@,<N0ZT-PuRe=)59K'/Dj:
%U_QmGR/Kph=E1X1W('Xo+/K>EHP<3BgeNbLl3[QQ'bf-*l?A%4iJUN,Yk2'YZ7SO]TVJ>O"m#)>FMHdi>I5AaC8d>toJ\We'tP:P
%Kg^h?>9#BJ1NM"7!u<PAkCG70Ti4rW19H_[OQe^KXZWgk#tt_Z7:VL_X3A[SHrT;84B^a=D(=7r:c)7jDHDOo<$#hU&%k@HoRMN8
%-+J6V'YdhrNii&p6mPUN[5&[]nl5WZ=,$m'5p<Y9>%g;2iTc,j`=bjCm1oJ:o18<sQ#D4:_t#9_?uSj#Ap<mhf<4%\2;dH/`^;.@
%<T9(r(Q.o%p"WI@LVW#jQ#?M@oD+m3M7s836Q/E<E44R7GlCo_NJI3RqM4:m-A>cr^=*B]3uFKk^'DnDU,AJF+i_r-/3q04"is[H
%]3</VJmMUJpR.95Xe<n1.BdO7L9$a(9ZB_b$<mgr?(iM,Wpun4$Y;%]9iTSZ;;_a0GXt<dDNQ1Lga_'Jd_)iL\m_Zi'k#-Qf2UP1
%c%Uu5?3M=49JA(*l!,p:l@l:%TKS'GQQrfm"APc=O[_t>*T`3s*A/hnWPj!kfM(>>\/"4BWFq0Kc_<JO-+^Qq-E2XQU\a_&iK!L-
%IHd>,oaR[d8FS6+)5E%a$E^#q`To(YXG/KDF_5*_P\/LJNs4B-AS+)_R!N`D0h_rSBJHs74bZLd's;NhN2kAG?$dMs>@\o1-cV"i
%rA\4[,#W20Pt7o[oAu-[$dQ*NI;J+#0`f$1iH&b+c11<_eD7jEMEX$1j0!o/AZ4c']b3a_.,$OIVR"Pu"L:E3(qCZ5NgZ"N?@Kj$
%1X3\aQ)#_;)iY`.08pGIL>N5M1H^`aU1,,mjN%QWFF6sJQ674#*10HUoA:"u=.J<'b@[:CBM/'%Joqr+.c``=8oA6D<AKutYM^i@
%VQ9!(i<.o#*JU:t$#SG=1Q!3j<I([b#Z#eWp<D.-]27Q7dbnpQUCgfBnlnZSZ0')hnKf^TD;=As2HpC80ma?X^fgdo90bDUUa;pq
%hc]6ee-:q*;20dr^e>Yh&%QE*MGoMa'.?l+0J>6OdYKK;c,>e[LON0i,QSjs_I_C`Bu1qV;UgWsCSo9'aKMF/:T;>J#e!9C<)#Y_
%%LhijOef#bWnJBh@^,/.UIV&DKF$1q3<h`cej)7B^=he4j;N)7)Pe'KC1J^&aa&]';$@hQKZ\fVMH"UeS!U##+=XM&Yio#jWgB;^
%@f[k1Th;QNm^&lP!R9!?9jVgLbcVFn,G\h:<"r[AMauKWDEun_C2HLSd5Y%4mLHII%N(8_H;T)=J5Ii`.]^gF+I0I?[b,3X::1]I
%6]Pt>NY4`W)*",(.3g8E&*d<@k/eb!h3L`oejF9(QoS%_945E-LmkhloO/M7F5+Tu;`u.h;"8F;?g9IEDqf/,4"$gPSZOTap^<JF
%4%g#QiWL$K!\LZnZE&f$$VuL,1Z#l8)H1i*jM-?KVXk[ADk=3E!C"R]WriaSc.(KS=42bCY<IK50%=<$9b-EeVC#5tJj=j"#-DtL
%hRr<W&-R<Wa<YJ<29kF6L7Hggb2#:^92l6t"MIR=*r7P/$?G)X^MF,o1+t'8=Aoj6U_L5HP9m'(0Ti(GR1X-t5rroV\65@@ha.(d
%W`N4uN6hhjMP`CL\nqJp!_.&!M$sN!@#QgOo?s2(n(;43BQ#PT]LY>!_m$(>J-nMQR?otbnVZdo,:Wb1G',On]?h^qCrCj0Z=:(%
%5Ukta<t7o]B;l2o#`+.)W;tU"Hr8i9@We"VNXp7QIPUWIr(8LVi>E'7/TH/oH$sPM6)K$)BL!]7l:'9g1tiB:1oi2srSdk[]-bIs
%<j)3MSta@P]SYH&+o'TnH.>DH78TE;:1@!%<;Mfb)m6*UAQ_]@:,YI&g`MT;CLq0mZSFIJ!6Kh7\rB50:WhkB.?>M\VLIF0dTF.Z
%$&c!?_P;?mCoq61J:#EK215^sTBb]7c=Ncaf`0^c:9bqe(ThGJ/2SX$_5g%t+>U0&8,BNf=_qp,#uXb*8u+KM6u'64#>>l-0"Gu$
%3_G+U,t18i'r<HcPfW*Y8I;IQ5$Hqa*$m:$Y!q$I($rY-KNIJVEeA+2/tJhnTT&nIBu)B/0Knr$($%0E/RUZU0@_4IX%&OReW;pt
%D6^_V+R7L:k-POUb%k']@$=_^GqH/$@U=/YC;C3X[9?qGn5V4-"^Ug-K!0"YPKBiu!CRnF4j,pp]R.u('-g^,0061]fNM',9iT#_
%OWcF%]^"@egB7.Aon0X!Zp34A![g.Je1j$fY"FF>j'bPHHr#3';1TUB`^^s#,PB&G6O?m9(8Q1YV9RL>&U!/4L-A2kJSD6E78t2F
%cA'MSkuOi7Oq7[fe9*0M%O*>f9c=ua#OH46pb!g*nuu+OB/`]]/K!@S`.:*F]g(Q<LMg;F>u[682FY:uOeGf,/rM3CL4i1K*Y:8*
%<tQ+^G;6Q\dZdFN@<B@J+4k[S)6H%=ZB7%Z3/5sE[(,.`FLP\,MJK\?ACV;;c@:%/TH1#c%Elui!(*Y2PCQEL9lV:"69T,iXDh$a
%aHu!::edW(o"H/E!+rjlZHqr`.,.4RO]E^3L]M#k5n**C%&LCd<`HK00!.l587t@u>+8ZABI?rnl`ANS3/`f_X2)_1(C==eVAI$@
%3E%drg*9e>B[?nZhIQ*B?$9IIDD8.bB-.EG1$ppd6M3jaBZjqi<Br!F&59]Ii[O+.).qghDRkRheUb]iLBN@tOr`D;7[-]g8Sns)
%Cb!>eeSFJJ^7$0<U=<m8@h6?r=E&UggZI5UG6Y9g,mS"=8k7akhTc1l?qP4,K3q\M=NkVY\lAM5WeO*Jaj<DjmqCQg]\s:ck.GbM
%MBdJE%V:oS*HS^NcsN`*:$4)1.F2u??EPHo;6C2)7!2%;%94<1N>lUk$5.V8R56/OS!mls,S*JdgCULT'+pg8Br]C31^NT%R_n/<
%S1E@lC8%]K_S<g=WWF%kk&n<oSZDO8C+M$1/d]WkpM:G$iVX]0M$`92ISh1!H\C$O@aV3U!(7qL[NtG;jg(puUI9+KW^Vb,(Q8U+
%^-'dh4F:'L]Q?m:$lON5/9LdU/G+@\<&Ag,\hC5$K9D+sdE4s(mKEGuKpj<H22:PJ=^QP/^_p[!!*e-m$X)b&6]&FBG(LfJ<r9A@
%qE&H`>nS;%o@5,\XL-fP]Mqs]IRMlkmnM\mL1eNgE6Bl&dHIrK?Q#U+<f*]86<?gT4jkZTN>s+<_IP)UQqjZ.::otGN^DNlQXfWn
%TfZ_O_j:4P1@+lp@(\u*m2Iq]$a03+>g>=3:uIRoUp?3mdVfpI%jK,\1ZKdiGGfkjC+gTID2M@%,,FW^N.VU`;,E_,((toH>uQe3
%J>`7FOCK1j".c4%2:).<*)j4$D0ZcWTuQdh.SlmVe5l\e;5:U)>&<Sf!J1:"5!3p-@+YfYEL.JEZcuEBg`S;Hcf?"b2;WtiSa[B^
%!K*Xq=L8\i@>g/pWi5O+DPkA='rtlr=M;lHLj)cehF>FBS#=Hpk*7[691<Z8KipWI6YsL;l.#F[8nYTir/Y3;,3KhV'JXn=jN$g)
%=B(BDj?CUFf45m9&SLHM9PXNSlcdd$X=8]\`Me<NK_L\!Q-_I=Nd6gJ?oF-.dA1#E1_D;f5M.!iH*!!%F)W4<#M'n#?MU+XDuIq]
%hsth>8M;IP-XfA"P4nqSS,`(ePT2"PIK*LIfCsdkI2YTD^YCX:$e&EM?+4`LcdUZFE)XU/.U&pmq,+"\bUP*==1'S(1[M!h2?Y%k
%;;UDb">`cXSoq/kP*gB[E=Dk"MGjILD@q)6@j17EC9LH.;bRqTHji+tFVNA@-m21ioKaohLgj=,nB.Xl^&#S>c/h`9rNA8KC&Rt?
%]L+L18#?)Fl4:p)EAgj=[q\\`Feq:M7biC;P9<*j!qIr#pkO8QOV0Y.Bf.KG+`)0%Om^,$%[S9:;Zf*NC"CUP0IX`LcWd@c.p-(M
%Robn>@0+j^,&nbI,.26N8-Mmn6!EVpC$69=\Zf<baq:'`a/JuAed-k!\g?S^DNpP+WHg0(/\N!H2a:72@VTO1J)\n,6i]\aXS`5^
%+:G<*a:/rB(o>K(6:9p01r1iL"Ynli5pUaBL]Tji-J;:FD(na6A>H\#Pi@J;\j4JKcKl40N64)Tp'(i7huP!@#B.IJ$H)?-*):H=
%UV4:`&#fkiEL[ttm6Hp7D*?Q$g=6X:kR!mc5\R\DS[%;_QP+r(`Ik4&U@?T-,Dbn+l"&@r0&-m`=1CdJc7X;2(*\l[,*M9Q#Z;p4
%p(ZJ77snJ2]0anK`1Rr*4`r<+53'M[&(@ou?'<GUlj4l&H+2J.r7`pp%%<,YB-cU[dI/L-6)<Kk>;4;)<K\9l3,@n-3j9Fc.d15"
%JD<kVo&<ilUHVlH<ePjYg*H"_HB-pP0L=Uko1\.r1hdf4)9j.f"-Bf=*3Xbu4[A^$J94OtET0rM[AQQO_M$4-/rNR1X.=E>b&5L2
%/Ree.I!AGqmV\B'#g+JL7SU74l#uRNmLGGd1]eTB2ETWK*9&>\8od=deg"oS"bsfu#DpVR:<<92d>[g+%GcQn&ddObG`io$;@@Hj
%3:FN<pBVb>=A)_=G:keaE/BS52Y-'nXoTkW]bkIjSpQ/bBlWnq41qhV?)7``6>!OsB[ZUWnW.[,cR(NH6V#k;^Kjgge7Q'FM8WIK
%5E`mIcj\qWMl;_`dRc;U8j]0VR$`[BP?&oc4/Xp=/U7`Nf1rJ=*/b;`J9.'8P>`mj+^$![,,&fh*@isJ'hb9b`r#%1I#5M$pIO,Z
%[0dd3]ucX5,W#OrF]lY9,\`h5TMXm(@P_D*Bbnr*8<*[uYdP!*C6)Jo'QBI)'FV`-BC/tgb+&@dpLTtB>F`a"c"XgPFQ9GP^mCT/
%NRLE4@^/ncmrH(M8<!m[K;^;=`_':UC8\V7UJ?oCnhdI[;BC\sP5(`6&<Z*]>H0rt[];ru7(?4Dj!Q@Ql;X+-!*:\>RC"(n\64<'
%T:/#6EnRA!:`Y6#(S[?2X\N$#c8"YmgF5i!>,g(uWOW1SC>a@-N4/U+M3*SO`1"+0^7jH>bT+m-:Qi0Q;hQOim8Td+kk$k3dLgsM
%R_S-'e$QRY<H*.aHfrc?H7auD+@i7+JgdJbHX!^F+Z2%ldUN0eK\[mdZt'oTmOpRq5M6s2P50CNq?6,.H!s1pDltI#$s5p0nS,tl
%iOa]0HN_b1?n59M5nQ8s^JA1!/lG!1CF(0F3Lk`fEN,7`Z]fq\72fB)<MVu<C>#)QS[--ZDE%5P:?cYu8IhFuQhE+/<@"\H$8Xa\
%:dj`nd:Tl[\2K:99![%(5MU)Rf&V)<\,N)ePdC`'NU)VXOnn(l/\d1oeL[fti/`e;:"$>da3BAfZ1`4-hkrrX*_U&>"hIm&cN_$f
%b$=qs5f]_Qe3_h.46G#XifC=YB1!%ZibNn.'$](4Z:e],f>Jc7ihJ<[q4OL4eLU$j5.oS`MeF[jd<'Fi!L`:l-Lm$^Eq><p83bs%
%k;T!Y361$d@='5.qk[$@b$.+i3"5c.cWgFf'`:Ab+$R:f`a%=0`_.bOP]_nR+`c^66NgR&rH(6iQ.Pl/7d)4P%_lO;')`6;p&3V;
%8H1%(49(:5OhS2Rk8./CD80H\ci;l<+am,Oc7Cp7Vb4>19)[/P8a"A\cJ&0,:Ah5R*jbXNatm<s[?=eiB2.ehnb!/K`Q&9S;38[e
%a"^'bK_\<EVrW*3831$Pa^humIZ_JR.2%2,'Q>)lAm/diMu&gA?N5Y]FjHqL8]R9(30>*mI8.jN.(';&8lQ#Tr5_roj(H\g05o]J
%hTBUd?ce>VlmUM1*gJ3elS0O)&W9Cf+@N&cT2"$^,+`&_nk9t[6Ns_)+ljkPc0b'16tXb)hr`&)?3V\4SEJ5:>&^)[c=-o)gG:SI
%^C.c+Doh<*-i3b@;tb=b?MJ@,r4^eFk1s='_jdGoJ$XlK:DfVY"M6L&VA]\,b:$^\AJnF[g&d2<PfM_`08@;t3/IfdphSE])%s-h
%%lUN;7=4]uF62[MqV8S"Id=;Ld\SrI&Rog]4;/OCKHV]"_2Va93Foasp<Oeg8'RmKmMs:uOC3l'1Y)F8"-!:`JIHT<)82Nj<AMlN
%Xds'3)l^Hqe+QGm1+FB9``)Ur<bW5r[1EL$n`3GeD)/V:80cB787`8D.Dgd0%'o.^POj(%iumWbQ8K:'=SJCjbUndp8V'V>+M&a>
%Pq+tmbqYeJfqE-$V4]0Wj%Wrr]!KXV<_.9Fp9I-_#pLVC3lDeDdN="C<%*4FF\fCD:Bn4o5-Yde`PiT0.goq;P3X]g.lekanJVUg
%e.b/I5DaJIi#0\tKK$*Na,>aWO!33$>URT]f9Mg-ZFV-S6.03V4:j/_,2sdlY/W\90NsL:??Ml>\5nsYTa:mYBBoNt8!L)ui<OXA
%_Lq,$jBEj!"anPdc@&dOV2'f>f)4tUBsDiCcZ&*j6fL->2Mt_4E>*+.KMhB>;b_8X&h/d8G!rZf-=A\):]a/jY8fg7,mf=5<DtZ^
%AGl%\Cdu&&b%,\`+Y>_W!32EiW='*GN=V\%@eS(;\\<`af$^7RR5C30AVuKl;P:_.>KOqpdGeiGY2,UQHgHgtf!,eUlP:!Eb_.sl
%NCr/0*LY&ne2t-N/n0.gnlVa&IJSLQUnFi)S#VSmX\'en8\LVR;ekq06Dou[.61V.=BK/+.K\0%lE!24Wg`d!Urm.?4Cr\5(og%D
%]F"o_5@G!Zf-c3fKY:993sC#rNtL#N+K8oLk^Tuj)@gk*JmBmMNDXJ,ER,'O8!N:<2ps2\UXE"4H4Pij^05^QO9>e<G_K8e6\>cU
%<;1!*1PpM@*iu=R.CR:)H\i^t;K60s4nuf=dX0Pn(6M8.r9;o]_L):@cuep#E1]jn!@f&u3N,i%r`.HcM>pSd,!D8h[TIFDI+Q/Q
%_O.mZ.q`-%"I\EGltbfk;.1s8af)/05bs`u<?THFeTC3@odZqk1Jh=;Kn0M&F=`t;%gk*e[&P`aJit!N-[/7sn=l@id47MD/0ZgX
%4Uh5l^bTPb8RGLs*HnV67<5)t?CK`/&hdlnl[d5jc"^*V1?1Q/=P9L3lB-)7Y*aj+g8oC*7tK]OcJ-D^ODnO1jE:u000o;\;Q)U!
%f<?JOcAEfgYSjDS^7%GlM'E',MeE]2,<LAF.DfFE;JSjhjHO?PUB*-2K8+/I6B4TAHFe9\Pc>E%]U=.PE9pD<];lb/'%PA<$sbGJ
%K%UUa26<hOTSns/k-;UJ2ZV7V(2H"3:;s'CGVu5,Lc&W^kW!$%PIXS\&D(?)*ufA2q/odO6A%'Fk`WX)SO/d=Q@,dGlr%f)ZIScZ
%+XI@`4Ho%3)/G$d?TVcXLt$-.f@DY5AF_Cb(6m2bY(897C`ep_8gGC?[UXIuM&I=J08Wudb*rl,?2Ll2H<RFMK5"82IaN.c5s_3%
%1kU+9FIGD^;BX9[,+(eW$A1rBjZ%H\7qUE%mu$P@\^@?E3J[$:dfRu/LDHV(Tdu#n*b5T,o?cC@2ahp5MUjdBU]T(HClTqDTI(Eh
%>)hA3Lk#Pgf$EcAT[?]^'$YiH>\6/VIoReW2-SK*AQ0;16e$b_fprZ0-oIZCS6sE"CK[WT(2)N:;iSa4-[f!lb0o*hZVFEK$>J=j
%VDrV&LO"mTduc_OB:WcW!=H`ujB)M66L`\tH\_fuf<mK/KkMgtHgHT7P\/5HG)//Md6T7#P')qAB@:tSncMU)i"V&?-lPc"=l`Ha
%904]!Su9_-HRdCU.b'Xd;UlE2P^%Y4-rPT,(B7R833>+3`];"XK1uKBWiX49eNt-B%GS'S>,uS(I)Q6E4N9'rG8ZqJ`+7>l0?#p4
%=hC>El*@qlE>n72abRr&+\]an4L_r2_-n>K9B6b2R6dGsYko>P!6iu0Mb#I^(6l?,0Wd?37@B.oWrcNGZGlG<394KW1bn7[0YrnV
%6\EIZE(&CbE]1lYK*blI;g3"$>P)a\E!OWe.I3Up$$h?4?m$!<XB)<Vm>.d>Si3/pWtrBA>J(4FQ?Am$MfKh+DCXNIPmq@r9A3]L
%Z+HZPIjuGT;+bMN'rrk]!D$AoCgGen@FpsGT]rQ)ar>\0VBmE2\`L,^]$5$N<$Rk?QNHCNl"2\(Q<8u19G=`aqbsdP]E/ukg0Eso
%9*UN@)K_fV'-pkP6H9OrGO`f2%d:GcA$Ha6GO#k5TO.*ORD6Jg!.=4j582Xc8i`3pq5[4ADm;ucT!fT=Y"i&oH&rbr#a\(VcOW"S
%7t?./2U28=1r9BdcQa7^jjMK8*7JhS()8k#;DWt]V5P"uFZsJI.dW8INIGTHHIjU_3;O30gs<Gh4ZH9Ebs9NW:sQ6IDskbAYAXGH
%La.cWi[-\hOd1(Abr?i+'lb8%9a-h2OIItZ>YF_^2tO9\5??7N/"s<f@6;@l2\EKVQktlLF@M&(jgDR5E6-@?o3!k/,dAjGY0iq[
%<n1QO6]rl"E(5Vk']%J\U-hJH&njai&=F\]#)A9W\pFkr+]V`u1H;b@<K@Qs)'%@n<Td(mBN&&MGrS/Y86iiWKSC%,XPjd1g,MOU
%&o((5+[j:XV&:6+";8"L4C^`&U"Z?T`@%FQ7?Qnp$mCMLa<`UKWD5SjEfd0/Y5O:eD(5mYIAj[&r7'X_\qpe<9jM1C`J&KVeUgls
%$k.!)=Cm?7aO&RhdH^Ra$mAdW/tS3!%0V]^]1ZZ?<\p"#S<4uIgWTgBTqQHQb_X@e1kaBGgh1;6'-W;=e$1($W!Q^ON=BaQMGiS`
%<"j.am\:;[Yp"u;Ad%@W%B6_PJVJsi5mHLQ!fd^)'<iA/GRY,t_+bq*Ec@t5NM0'6#U9N,Zb36tlk1;4g`T\3b7"kH0'@[D7rX8.
%QLMg,*,<;T"a&GCB*="2DjWBM#S%TZH!LZ'#nDgSWbLS>kR_;[&[e"R+f]A.MsViP<$;-4g++s?<'W>JCNMt"@(ls`O@s\obdDR_
%LFDG,s5>1`<:DqR8p6%$W?A!NgWo!oN*l].T@'>6S[&^(96<^qig1WNMA[EaMQGH)NTa29A>M]X6CUCQl6@*e`.n]]^CehKpe\d6
%G&1U,LC+K9H],DVZj9;2bNOlqOdQMkBZ>h#Qo-Vl2*OEliPi8)N"=;e3@#1XU;?=:#b'/,Z3E,X)'19mJtYHjN";lu@`29lfLI)f
%@/W.h6r;8KE-h_De5^LZOgGuKU+`ROIqO:&e5_FeAldSAjNcKu6+u<DnK*@d4T\"_g!.l1"GktDDrKX+_fZcdH*O`5dj*"8f7Tb:
%XCI=!(qHjp!X8lm,!Z8u^3[Ye!@%'t="iUW+Q<=!:>uNj\HSN^6,\OZd/rN!0C^2W78n\q&#oSQdit:O+[k&&B7(!4[\YC@4o0$f
%=i#@$LEn?b"HjH@dd;'[3l=<=Ep2FE_aF&eX(b&A'HX"5^i1=;_bGB3_2:eC$kGWA+pNTS5,9e3H&qI`N"7X5`krng+c8AA<13h3
%)#a?_k"ZC55@RVOi??p7pEKsEn.8QUF4KBqo#+^u4#OoCl6I?&'&fNNXM_3d,s9+t\,CK'LY*BuBCH<?Z)-#jps8F@m6r8Z5JokT
%d*7$p$kKV.h>cm]*b*=]0(,+c+^0j9$V,1^KnlHg6tgcR%nY0IcK'cl'inS^8(^<jj(l,ZS+)N>l?p+cn5)u'W&hgq=>qooNg"1*
%\-W\><X!1s_aCA5\M\#ELe9jT.(dKS$EObRNYpQ1%riL9qfBc4W7P",ln^iDiA-^0ICP+EknN\McM.skeQ0-*qsLKpGE<9B9709@
%jIu>n5/^kj%[S'+QBkG@9")V`5#eJ)1/HDY%gb_bE9`AmENVemiX??+!pj-Nj&Ft\Ckmgp.6N9L_paU0bS_IR2`3\Z5N>,`2H^ak
%7smj<\96L893\;o1mD96RH[.loi0(55RJ$1@lZc$%1gQm]*=%pro1/Md31']jKSCs*Kl!<0]\0&@@TBF21n9ND";ib*5^3bbjl/P
%D$O*I_'-7Tb\jW<95nR6A7]Cm#d5@rHdCW3g_5IGcKL?qTJc(>3@-X]/lb'O6h18Kbe&O`OG61\_aCqOAje\s6h3,UYs6,n32V$c
%'#&X;O53d4B6_KMU)*K^%j>spLhhADWEZ,;nY%P4RCo$Z+[e+rSuo5=D43k.1Hr/P8Z]asnY'f?rnPGION*$FnY(q'7)OgnHjESM
%c_kQ+#\ffD1HpK5"HAEP2+b_VHjpW1S.L7-&8eu)o3(%FL_(^:m<sg&+gh?!7Yi<'_:TVK6FKTIr.kp?q!;WAkf1NT't]:k-:GeF
%RBYrb&a=:>`0_`:,aldfDF-b;`+P<CN?rNWP0a>Kja$cUP2036*@up-&L+s+'fS&p,)_d4VF-;5M_cG>eH^B@p-TTm,/fCY$:g?%
%nX=npSVRol'#V758G)SrFk=ql2)sk0^6E&m[YmR%6rPV8g>+i.NV;^2:<8+4;._([K*A%3>Q8Y>e<VAFR3K\^ATB0&jJoT`M]!JY
%F'9_b=3G*RN9)<71F2BV;Ye1?OB"?q<3(5MH7I?Q#(IR=2A`]])TqJ%',@a4TFTJ\<S*tioHB+p2<&3]2$qA<<OTUs#Tqo<WP4=f
%rrn5!orYfU?ujZ-RP!PgD*34)MMM8-af)<)J?gi*9^*a-K@"p#h%`*nH8O8,gnNK;+\Vt-)QP><7H<fSr"NuVOW0ttn@?SMCG<*B
%6QH*flN<NZ<c`(do;Pbk-kQ[^jXYiPg3;=@O0JU/T?5]^]!r--CoWEYatre\`>\P_\pfdmC)ng/VE#8K[#/sQ?VP[Z0e_\*-0h)d
%'=4`;=(1+T.p[mrgDMQ:^VQ)mGH,o.-Ef^=AU9?<\\@NpoOa>n@Oitk%[s8mWaJe@C4o;u0^Iub7m4Q^WV=Zs:R6QZD3BfaTV584
%.l$N>pO#V$*;=jT+,8\qs(V@ss7F3IhnB'UG<\8T%`.'&\+dZ7mXP00rqhc6rV3G.qqW@Os5gkJpHSS+?Ma(sa$2`bm`4eqpnp@S
%pt`h0J,b<(KnPAE$i^.os3lJr5CW9Lru2!e3G8~>
%AI9_PrivateDataEnd
